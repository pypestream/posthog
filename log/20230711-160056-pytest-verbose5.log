/workspaces/posthog/env/lib/python3.10/site-packages/pytest_asyncio/plugin.py:173: DeprecationWarning: You're using an outdated version of pytest. Newer releases of pytest-asyncio will not be compatible with this pytest version. Please update pytest to version 7 or later.
  warnings.warn(
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-6.2.5, py-1.10.0, pluggy-0.13.1 -- /workspaces/posthog/env/bin/python3
cachedir: .pytest_cache
django: settings: posthog.settings (from ini)
rootdir: /workspaces/posthog, configfile: pytest.ini
plugins: celery-4.4.7, flaky-3.7.0, timeout-2.1.0, env-0.6.2, cov-2.12.1, icdiff-0.5, syrupy-1.4.6, asyncio-0.20.3, Faker-17.5.0, mock-3.5.1, django-4.1.0, split-0.6.0
asyncio: mode=strict
collecting ... collected 2649 items

hogvm/python/test/test_execute.py::TestBytecodeExecute::test_async_operations PASSED [  0%]
hogvm/python/test/test_execute.py::TestBytecodeExecute::test_bytecode_create PASSED [  0%]
hogvm/python/test/test_execute.py::TestBytecodeExecute::test_errors PASSED [  0%]
hogvm/python/test/test_execute.py::TestBytecodeExecute::test_nested_value PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_cant_make_templates_without_teamid_private FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_create_and_get_dashboard_template_with_tile PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_dashboard_template_schema PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_delete_dashboard_template_by_id FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_filter_template_list_by_scope PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_get_dashboard_template_by_id FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_can_get_public_dashboard_templates FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_cannot_edit_dashboard_template FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_cannot_make_dashboard_template_public PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_user_cannot_create_dashboard FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_user_cannot_delete_dashboard_template_by_id FAILED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_staff_can_make_dashboard_template_private PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_staff_can_make_dashboard_template_public PASSED [  0%]
posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_update_dashboard_template_by_id FAILED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_cant_create_action_with_the_same_name PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_create_action PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_create_action_event_with_space PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_create_from_other_domain PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_create_tags_on_non_ee_not_allowed PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_empty_tags_does_not_delete_tags PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_get_event_count PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_get_tags_on_non_ee_returns_empty_list PASSED [  0%]
posthog/api/test/test_action.py::TestActionApi::test_hard_deletion_is_forbidden PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_hogql_filter PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_hogql_filter_no_event PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_http_to_https PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_listing_actions_is_not_nplus1 PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_undefined_tags_allows_other_props_to_update PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_update_action PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_update_action_remove_all_steps PASSED [  1%]
posthog/api/test/test_action.py::TestActionApi::test_update_tags_on_non_ee_not_allowed PASSED [  1%]
posthog/api/test/test_activity_log.py::TestActivityLog::test_can_get_top_ten_important_changes PASSED [  1%]
posthog/api/test/test_activity_log.py::TestActivityLog::test_reading_notifications_marks_them_unread PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_can_create_annotations_as_a_bot PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_cannot_fetch_annotations_of_org_user_does_not_belong_to PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_creating_annotation PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_deleting_annotation PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_downgrading_scope_from_org_to_project_uses_team_id_from_api PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_org_scoped_annotations_are_returned_between_projects PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_retrieving_annotation PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_retrieving_annotation_is_not_n_plus_1 PASSED [  1%]
posthog/api/test/test_annotation.py::TestAnnotation::test_updating_annotation PASSED [  1%]
posthog/api/test/test_app_metrics.py::TestAppMetricsAPI::test_error_details PASSED [  1%]
posthog/api/test/test_app_metrics.py::TestAppMetricsAPI::test_list_historical_exports PASSED [  1%]
posthog/api/test/test_app_metrics.py::TestAppMetricsAPI::test_retrieve PASSED [  1%]
posthog/api/test/test_app_metrics.py::TestAppMetricsAPI::test_retrieve_historical_export PASSED [  1%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_force_rollback_endpoint PASSED [  1%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_force_rollback_endpoint_migration_not_complete PASSED [  1%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_force_stop_endpoint PASSED [  2%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_force_stop_endpoint_non_running_migration PASSED [  2%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_get_async_migrations PASSED [  2%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_get_async_migrations_without_staff_status PASSED [  2%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_trigger_endpoint PASSED [  2%]
posthog/api/test/test_async_migrations.py::TestAsyncMigration::test_trigger_with_another_migration_running PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginPrecheckAPI::test_login_precheck_with_sso_enforced_with_invalid_license PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginPrecheckAPI::test_login_precheck_with_unenforced_sso PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_2fa_expired PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_2fa_throttling PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_cant_login_without_required_attributes PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_email_unverified_null_user_can_log_in_if_email_available PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_email_unverified_user_cant_log_in_if_email_available PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_login_2fa_enabled PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_login_endpoint_is_protected_against_brute_force_attempts PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_user_cant_login_with_incorrect_email PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_user_cant_login_with_incorrect_password PASSED [  2%]
posthog/api/test/test_authentication.py::TestLoginAPI::test_user_logs_in_with_email_and_password PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_anonymous_user_can_request_password_reset PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_can_validate_token PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_reset_if_email_is_not_configured PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_reset_more_than_six_times PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_reset_password_with_invalid_token PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_reset_password_with_invalid_user_id PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_reset_password_with_no_token PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_set_short_password PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_cant_validate_token_without_a_token PASSED [  2%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_e2e_test_special_handlers PASSED [  3%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_invalid_token_returns_error PASSED [  3%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_reset_with_sso_available PASSED [  3%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_success_response_even_on_invalid_email PASSED [  3%]
posthog/api/test/test_authentication.py::TestPasswordResetAPI::test_user_can_reset_password PASSED [  3%]
posthog/api/test/test_authentication.py::TestPersonalAPIKeyAuthentication::test_personal_api_key_does_not_update_last_used_at_when_in_the_past PASSED [  3%]
posthog/api/test/test_authentication.py::TestPersonalAPIKeyAuthentication::test_personal_api_key_does_not_update_last_used_at_within_the_hour PASSED [  3%]
posthog/api/test/test_authentication.py::TestPersonalAPIKeyAuthentication::test_personal_api_key_updates_last_used_at_hourly PASSED [  3%]
posthog/api/test/test_authentication.py::TestPersonalAPIKeyAuthentication::test_personal_api_key_updates_last_used_at_outside_the_day PASSED [  3%]
posthog/api/test/test_authentication.py::TestPersonalAPIKeyAuthentication::test_personal_api_key_updates_last_used_at_outside_the_year PASSED [  3%]
posthog/api/test/test_authentication.py::TestPersonalAPIKeyAuthentication::test_personal_api_key_updates_last_used_when_none PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_azure_app_insights_tracing_headers PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_base64_decode_variations PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch PASSED         [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_distinct_id_not_set PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_gzip_header PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_gzip_param PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_incorrect_token_shape PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_lzstring PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_token_not_set PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_with_dumped_json_data PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_batch_with_invalid_event PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_cached_is_randomly_partitioned PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_can_redirect_session_recordings_to_alternative_kafka PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_adds_library_to_sentry PASSED [  3%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_adds_unknown_to_sentry_when_no_properties_sent PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_can_override_attributes_important_in_replicator_exports PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_ip PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_ip_with_port PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_ipv6 PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_shortcircuits PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_event_too_large PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_events_503_on_kafka_produce_errors PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_capture_randomly_partitions_with_likely_anonymous_ids PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_create_session_recording_kafka_with_expected_hosts PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_custom_uuid PASSED   [  4%]
posthog/api/test/test_capture.py::TestCapture::test_custom_uuid_invalid PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_distinct_id_nan PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_distinct_id_set_but_null PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_drops_performance_events PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_emojis_in_text PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_empty_request_returns_an_error PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_engage PASSED        [  4%]
posthog/api/test/test_capture.py::TestCapture::test_event_name_missing PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_get_distinct_id_non_json_properties PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_handle_invalid_snapshot PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_handle_lacking_event_name_field PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_incorrect_json PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_incorrect_padding PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_invalid_gzip PASSED  [  4%]
posthog/api/test/test_capture.py::TestCapture::test_invalid_js_gzip_zlib_error PASSED [  4%]
posthog/api/test/test_capture.py::TestCapture::test_invalid_lz64 PASSED  [  4%]
posthog/api/test/test_capture.py::TestCapture::test_is_randomly_parititoned PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_js_gzip PASSED       [  5%]
posthog/api/test/test_capture.py::TestCapture::test_js_gzip_with_no_content_type PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_js_library_underscore_sent_at PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_legacy_recording_ingestion_compression_and_transformation PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_legacy_recording_ingestion_data_sent_to_kafka PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_legacy_recording_ingestion_large_is_split_into_multiple_messages PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_long_distinct_id PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_lz64_with_emoji PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_multiple_events PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_python_library PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_quota_limits SKIPPED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_quota_limits_ignored_if_disabled SKIPPED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_recording_ingestion_can_write_to_blob_ingestion_topic PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_recording_ingestion_can_write_to_blob_ingestion_topic_with_usual_size_limit PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_sent_at_field PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_sentry_tracing_headers PASSED [  5%]
posthog/api/test/test_capture.py::TestCapture::test_uses_does_not_produce_if_blob_ingestion_disabled PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_cohort_list PASSED     [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_cohort_with_is_set_filter_missing_value PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_creating_update_and_calculating PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_creating_update_and_calculating_ignore_bad_filters PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_creating_update_and_calculating_with_cycle PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_creating_update_and_calculating_with_invalid_cohort PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_creating_update_and_calculating_with_new_cohort_filters PASSED [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_csv_export_new PASSED  [  5%]
posthog/api/test/test_cohort.py::TestCohort::test_duplicating_dynamic_cohort_as_static PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_filter_by_cohort PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_filter_by_cohort_prop PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_filter_by_cohort_search PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_filter_by_static_cohort PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_hard_delete_is_forbidden PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_list_cohorts_is_not_nplus1 PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_static_cohort_csv_upload PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_static_cohort_to_dynamic_cohort PASSED [  6%]
posthog/api/test/test_cohort.py::TestCohort::test_update_cohort_used_in_flags PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_decide_analytics_only_fires_when_enabled PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_decide_analytics_samples_appropriately PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_decide_analytics_samples_appropriately_with_small_sample_rate PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_decide_analytics_samples_dont_break_with_zero_sampling PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_decide_doesnt_error_out_when_database_is_down PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_decide_with_json_and_numeric_distinct_ids PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_defaults_to_v2_if_conflicting_parameters PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_exception_autocapture_errors_to_ignore PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_exception_autocapture_opt_in PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags PASSED   [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2 PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_complex PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_consistent_flags PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_consistent_flags_with_delayed_new_identified_person PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_consistent_flags_with_ingestion_delays PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_consistent_flags_with_merged_persons PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_with_geoip_error PASSED [  6%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_with_groups PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v2_with_property_overrides PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3 PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_consistent_flags_with_database_errors PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_consistent_flags_with_numeric_distinct_ids PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_json PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_json_multivariate PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_with_database_errors PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_with_database_errors_and_geoip_properties PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_v3_with_database_errors_and_no_flags PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_feature_flags_with_personal_api_key PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_flag_with_behavioural_cohorts PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_flag_with_regular_cohorts PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_geoip_disable PASSED   [  7%]
posthog/api/test/test_decide.py::TestDecide::test_invalid_gzip_payload_on_decide_endpoint PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_invalid_payload_on_decide_endpoint PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_missing_token PASSED   [  7%]
posthog/api/test/test_decide.py::TestDecide::test_personal_api_key_without_project_id PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits PASSED     [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits_dont_apply_when_disabled PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits_dont_mix_teams PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits_replenish_over_time PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits_work_with_invalid_tokens PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits_work_with_malformed_request PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_rate_limits_work_with_missing_tokens PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_site_app_injection PASSED [  7%]
posthog/api/test/test_decide.py::TestDecide::test_user_autocapture_opt_out PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_console_log_opt_in PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_on_evil_site PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_performance_opt_in PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_session_recording_allowed_when_no_permitted_domains_are_set PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_session_recording_evil_site PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_session_recording_opt_in PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_session_recording_opt_in_wildcard_domain PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_user_session_recording_version PASSED [  8%]
posthog/api/test/test_decide.py::TestDecide::test_web_app_queries PASSED [  8%]
posthog/api/test/test_decide.py::TestDatabaseCheckForDecide::test_database_check_doesnt_interfere_with_regular_computation PASSED [  8%]
posthog/api/test/test_decide.py::TestDatabaseCheckForDecide::test_decide_doesnt_error_out_when_database_is_down_and_database_check_isnt_cached PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_archive PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_can_create_early_access_feature PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_can_create_new_early_access_feature_with_soft_deleted_flag PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_can_edit_feature PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_can_list_features PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_cant_create_early_access_feature_with_duplicate_key PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_cant_create_early_access_feature_with_flag_with_existing_early_access_feature PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_cant_create_early_access_feature_with_group_flag PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_cant_create_early_access_feature_with_multivariate_flag PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_cant_soft_delete_flag_with_early_access_feature PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_deleting_early_access_feature_removes_super_condition_from_flag PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_promote_to_beta PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_update_doesnt_remove_super_condition PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestEarlyAccessFeature::test_we_dont_delete_existing_flag_information_when_creating_early_access_feature PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestPreviewList::test_early_access_features PASSED [  8%]
posthog/api/test/test_early_access_feature.py::TestPreviewList::test_early_access_features_beta_only PASSED [  9%]
posthog/api/test/test_early_access_feature.py::TestPreviewList::test_early_access_features_errors_out_on_no_token PASSED [  9%]
posthog/api/test/test_early_access_feature.py::TestPreviewList::test_early_access_features_errors_out_on_random_token PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_automatic_order PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_can_filter_by_hogql PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_can_filter_by_properties PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_can_load_all_the_data PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_can_load_only_rageclick_data PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_can_load_rageclick_and_autocapture_data PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_clamps_date_from_to_start_of_day PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_cors_headers PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_does_not_allow_non_numeric_limit PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_does_not_allow_non_numeric_offset PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_does_not_allow_unexepcted_include PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_obeys_limit_parameter PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_postgres_queries_are_as_expected PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_element_stats_without_pagination PASSED [  9%]
posthog/api/test/test_element.py::TestElement::test_event_property_values PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_action_no_steps PASSED  [  9%]
posthog/api/test/test_event.py::TestEvents::test_ascending_order_timestamp PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_before_and_after PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_custom_event_values PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_default_descending_order_timestamp PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_event_property_values PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_events_in_future PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_filter_by_nonexisting_person PASSED [  9%]
posthog/api/test/test_event.py::TestEvents::test_filter_by_person PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events PASSED    [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events_by_being_after_properties_with_date_type PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events_by_being_before_properties_with_date_type PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events_by_event_name PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events_by_precalculated_cohort PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events_by_properties FAILED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_filter_events_with_date_format PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_get_event_by_id PASSED  [ 10%]
posthog/api/test/test_event.py::TestEvents::test_get_events_with_specified_token PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_get_single_action PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_limit PASSED            [ 10%]
posthog/api/test/test_event.py::TestEvents::test_optimize_query PASSED   [ 10%]
posthog/api/test/test_event.py::TestEvents::test_pagination PASSED       [ 10%]
posthog/api/test/test_event.py::TestEvents::test_pagination_bounded_date_range PASSED [ 10%]
posthog/api/test/test_event.py::TestEvents::test_specified_descending_order_timestamp PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_cant_see_event_definitions_for_another_team PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_delete_event_definition PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_event_type_event PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_event_type_event_custom PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_event_type_event_posthog PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_list_event_definitions PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_pagination_of_event_definitions PASSED [ 10%]
posthog/api/test/test_event_definition.py::TestEventDefinitionAPI::test_query_event_definitions PASSED [ 10%]
posthog/api/test/test_exports.py::TestExports::test_can_create_export_with_ttl PASSED [ 10%]
posthog/api/test/test_exports.py::TestExports::test_can_create_new_valid_export_dashboard PASSED [ 10%]
posthog/api/test/test_exports.py::TestExports::test_can_create_new_valid_export_insight PASSED [ 10%]
posthog/api/test/test_exports.py::TestExports::test_can_download_a_csv PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_errors_if_bad_format PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_errors_if_missing_related_instance PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_swallow_missing_schema_and_allow_front_end_to_poll PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_will_error_if_dashboard_missing PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_will_error_if_export_contains_other_team_dashboard PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_will_error_if_export_contains_other_team_insight PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_will_error_if_export_unsupported PASSED [ 11%]
posthog/api/test/test_exports.py::TestExports::test_will_respond_even_if_task_timesout PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_create_feature_flag_without_key PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_create_flag_with_duplicate_key PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_create_multivariate_feature_flag_with_invalid_variant_overrides PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_create_multivariate_feature_flag_with_variant_rollout_gt_100 PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_create_multivariate_feature_flag_with_variant_rollout_lt_100 PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_update_flag_with_duplicate_key PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_cant_update_multivariate_feature_flag_with_invalid_variant_overrides PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_create_feature_flag PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_create_minimal_feature_flag PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_create_multivariate_feature_flag PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_creating_a_feature_flag_with_same_team_and_key_after_deleting PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_creating_feature_flag_with_behavioral_cohort PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_creating_feature_flag_with_nested_behavioral_cohort PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_creating_feature_flag_with_non_existant_cohort PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_evaluation_reasons PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_feature_flag_can_edit PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_feature_flag_threshold PASSED [ 11%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_flag_is_cached_on_create_and_update PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_get_feature_flag_activity PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_get_feature_flag_activity_for_all_flags PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_get_feature_flag_activity_only_from_own_team PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_get_flags_dont_return_survey_targeting_flags PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_get_flags_with_specified_token PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_getting_flags_is_not_nplus1 PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_hard_deleting_feature_flag_is_forbidden PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_is_not_simple_flag PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_is_simple_flag PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_is_simple_flag_groups PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_length_of_feature_flag_activity_does_not_change_number_of_db_queries PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_local_evaluation PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_local_evaluation_billing_analytics PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_local_evaluation_for_arbitrary_cohorts PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_local_evaluation_for_cohorts PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_local_evaluation_for_static_cohorts PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_my_flags PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_my_flags_empty_flags PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_my_flags_groups PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_my_flags_is_not_nplus1 PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_paging_all_feature_flag_activity PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_paging_specific_feature_flag_activity PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_patch_api_as_form_data PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_rate_limits_for_local_evaluation_are_independent PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_updating_a_feature_flag_with_same_team_and_key_of_a_deleted_one PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_updating_feature_flag PASSED [ 12%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_validation_group_properties PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_validation_payloads PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestFeatureFlag::test_validation_person_properties PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_feature_flag_dashboard PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_feature_flag_dashboard_already_exists PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_feature_flag_dashboard_patch PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_all_selected_users PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups FAILED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_all_selected FAILED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_incorrect_group_type FAILED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_multiple_queries FAILED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_zero_selected FAILED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_multiple_precalculated_cohorts PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_multiple_static_cohorts PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_single_cohort PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_zero_selected_users PASSED [ 13%]
posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_zero_users PASSED [ 13%]
posthog/api/test/test_geoip.py::TestGeoIPDBError::test_geoip_with_invalid_database_file_returns_successfully PASSED [ 13%]
posthog/api/test/test_geoip.py::TestGeoIPError::test_geoip_on_invalid_ip_returns_successfully PASSED [ 13%]
posthog/api/test/test_geoip.py::TestGeoIPError::test_geoip_on_local_ip_returns_successfully PASSED [ 13%]
posthog/api/test/test_ingestion_warnings.py::TestIngestionWarningsAPI::test_ingestion_warnings_api PASSED [ 13%]
posthog/api/test/test_insight.py::TestInsight::test_adding_insight_to_dashboard_updates_activity_log PASSED [ 13%]
posthog/api/test/test_insight.py::TestInsight::test_another_user_viewing_an_insight_does_not_impact_the_list PASSED [ 13%]
posthog/api/test/test_insight.py::TestInsight::test_basic_results PASSED [ 13%]
posthog/api/test/test_insight.py::TestInsight::test_can_list_insights_by_which_dashboards_they_are_in PASSED [ 13%]
posthog/api/test/test_insight.py::TestInsight::test_can_update_insight_dashboards_without_deleting_tiles PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_can_update_insight_with_inconsistent_dashboards PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cancel_running_query PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cannot_create_insight_in_another_team SKIPPED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cannot_create_insight_with_dashboards_relation_from_another_team PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cannot_set_filters_hash_via_api PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cannot_update_insight_with_dashboard_from_another_team PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cant_view_insight_viewed_for_insight_in_another_team PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_cohort_without_match_group_works PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_create_insight_items PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_create_insight_items_on_a_dashboard PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_create_insight_logs_derived_name_if_there_is_no_name PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_create_insight_viewed PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_create_insight_with_no_names_logs_no_activity PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_created_updated_and_last_modified PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_dashboards_relation_is_tile_soft_deletion_aware PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_favorited_insight_items PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_insight_by_short_id PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_insight_in_dashboard_context PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_insight_items PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_recent_insights_with_feature_flag PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_recently_viewed_insights PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_recently_viewed_insights_can_include_query_based_insights PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_recently_viewed_insights_excludes_query_based_insights_by_default PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_recently_viewed_insights_when_no_insights_viewed PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_get_saved_insight_items PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_hard_delete_is_forbidden PASSED [ 14%]
posthog/api/test/test_insight.py::TestInsight::test_including_query_id_does_not_affect_cache_key PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_basic_get PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_basic_post PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_aggregating_steps PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_aggregating_time_to_convert PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_aggregating_trends PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_breakdown FAILED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_breakdown_single FAILED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_global_filters PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_local_filters PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_items_on_a_dashboard_ignore_deleted_dashboard_tiles PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_items_on_a_dashboard_ignore_deleted_dashboards PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_paths_basic PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_refreshing PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_retention_basic PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_retention_hogql PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trend_hogql_breakdown PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trend_hogql_global_filters PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trend_hogql_local_filters PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trends_allowed_if_project_open_and_org_member PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trends_basic PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trends_breakdown_pagination PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trends_breakdown_persons_with_histogram PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trends_compare PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_insight_trends_csv PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_listing_insights_does_not_nplus1 PASSED [ 15%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_can_retrieve_insight_with_correct_dashboard_sharing_access_token PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_can_retrieve_insight_with_correct_insight_sharing_access_token PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_cannot_retrieve_deleted_insight_with_correct_insight_sharing_access_token PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_cannot_retrieve_insight PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_cannot_retrieve_insight_with_correct_deleted_dashboard_sharing_access_token PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_cannot_retrieve_insight_with_disabled_insight_sharing_access_token PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_logged_out_user_cannot_update_insight_with_correct_insight_sharing_access_token PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_nonexistent_cohort_is_handled PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_precalculated_cohort_works PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_recently_viewed_insights_ordered_by_view_date PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_save_new_funnel PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_serializer PASSED    [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_soft_delete_can_be_reversed_by_patch PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_soft_delete_cannot_be_reversed_for_another_team PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_soft_delete_causes_404 PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_update_insight PASSED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_update_insight_filters SKIPPED [ 16%]
posthog/api/test/test_insight.py::TestInsight::test_update_insight_viewed PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_basic_exclusions PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_invalid_action_handled PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_invalid_exclusions PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_strict_basic_post PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_time_to_convert_auto_bins PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_time_to_convert_auto_bins_strict PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_time_to_convert_auto_bins_unordered PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_trends_basic_post PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_trends_basic_post_backwards_compatibility PASSED [ 16%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_trends_strict_basic_post PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_trends_unordered_basic_post PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_unordered_basic_post PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_funnel_with_breakdown_by_event_property PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_multi_property_breakdown PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_single_property_breakdown PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_strict_funnel_with_breakdown_by_event_property PASSED [ 17%]
posthog/api/test/test_insight_funnels.py::ClickhouseTestFunnelTypes::test_unordered_funnel_with_breakdown_by_event_property PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_can_list_insights_including_those_with_only_queries PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_can_save_insights_query_to_an_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_can_save_valid_events_query_to_an_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_can_save_valid_events_table_query_to_an_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_can_save_valid_persons_table_query_to_an_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_cannot_save_a_completely_invalid_query_to_an_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_cannot_save_invalid_persons_table_query_to_an_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_default_filters_on_non_query_insight PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_listing_insights_by_default_does_not_include_those_with_only_queries PASSED [ 17%]
posthog/api/test/test_insight_query.py::TestInsight::test_no_default_filters_on_insight_query PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_can_retrieve_setting PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_cant_update_setting_that_is_not_overridable PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_list_instance_settings PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_non_staff_user_cant_list_or_retrieve PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_non_staff_user_cant_update PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_retrieve_secret_setting PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_update_integer_setting PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_update_setting PASSED [ 17%]
posthog/api/test/test_instance_settings.py::TestInstanceSettings::test_updating_email_settings PASSED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_instance_status_routes PASSED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_navigation_not_ok PASSED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_navigation_ok PASSED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_navigation_on_cloud FAILED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_object_storage_when_disabled PASSED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_object_storage_when_enabled_and_healthy PASSED [ 18%]
posthog/api/test/test_instance_status.py::TestInstanceStatus::test_object_storage_when_enabled_but_unhealthy PASSED [ 18%]
posthog/api/test/test_kafka_inspector.py::TestKafkaInspector::test_fetch_message PASSED [ 18%]
posthog/api/test/test_kafka_inspector.py::TestKafkaInspector::test_fetch_message_invalid_params PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_cannot_update_organization_if_not_owner_or_admin PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_cant_create_organization_with_custom_plugin_level FAILED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_cant_create_organization_without_valid_license_on_self_hosted PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_cant_update_plugins_access_level PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_enforce_2fa_for_everyone PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_get_current_organization PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_get_current_team_fields PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_update_organization_if_admin PASSED [ 18%]
posthog/api/test/test_organization.py::TestOrganizationAPI::test_update_organization_if_owner PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomains::test_continuous_verification_task PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_admin_can_delete_domain PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_can_list_and_retrieve_domains PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_can_request_verification_for_unverified_domains PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_can_update_jit_provisioning_and_sso_enforcement PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_create_duplicate_domain PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_create_invalid_domain PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_delete_domain_for_another_org PASSED [ 18%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_enforce_sso_or_enable_jit_provisioning_on_unverified_domain PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_list_or_retrieve_domains_for_other_org PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_request_verification_for_verified_domains PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_cannot_update_domain_for_another_org PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_create_domain FAILED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_creating_domain_on_self_hosted_is_automatically_verified PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_domain_is_not_verified_with_incorrect_challenge FAILED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_domain_is_not_verified_with_missing_challenge FAILED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_domain_is_not_verified_with_missing_domain FAILED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_only_admin_can_create_verified_domains PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_only_admin_can_delete_domain PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_only_admin_can_request_verification PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_only_admin_can_update_domain PASSED [ 19%]
posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_only_allowed_parameters_can_be_updated PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_add_organization_invite_email_required PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_add_organization_invite_with_email PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_allow_bulk_creating_invites PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_can_create_invites_for_the_same_email_multiple_times PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_cannot_bulk_create_invites_for_another_organization PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_cannot_create_invite_for_another_org PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_cant_list_invites_for_an_alien_organization PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_delete_organization_invite_if_plain_member PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_invites_are_create_atomically PASSED [ 19%]
posthog/api/test/test_organization_invites.py::TestOrganizationInvitesAPI::test_maximum_20_invites_per_request PASSED [ 19%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_admin_can_promote_to_admin PASSED [ 19%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_cannot_change_own_organization_member_level PASSED [ 19%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_cant_list_members_for_an_alien_organization PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_change_organization_member_level PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_change_organization_member_level_requires_admin PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_delete_organization_member PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_leave_organization PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_list_organization_members PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_pass_ownership PASSED [ 20%]
posthog/api/test/test_organization_members.py::TestOrganizationMembersAPI::test_pass_ownership_only_if_owner PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_cant_see_another_organization_pii_with_filters PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_csv_export PASSED      [ 20%]
posthog/api/test/test_person.py::TestPerson::test_delete_person PASSED   [ 20%]
posthog/api/test/test_person.py::TestPerson::test_delete_person_and_events PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_delete_person_properties PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_filter_person_email PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_filter_person_list PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_filter_person_prop PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_legacy_get_person_by_id PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_pagination_limit PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_patch_user_property_activity PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_person_cache_invalidation PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_person_cohorts PASSED  [ 20%]
posthog/api/test/test_person.py::TestPerson::test_person_display_name PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_person_display_name_defaults PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_person_property_values PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_properties PASSED      [ 20%]
posthog/api/test/test_person.py::TestPerson::test_rate_limits_for_persons_are_independent PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_retrieve_person PASSED [ 20%]
posthog/api/test/test_person.py::TestPerson::test_retrieve_person_by_distinct_id_with_useful_error PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_retrieve_person_by_uuid PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_return_non_anonymous_name PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_search PASSED          [ 21%]
posthog/api/test/test_person.py::TestPerson::test_split_people_delete_props PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_split_people_keep_props PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_split_person_clickhouse PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_update_multiple_person_properties PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_update_multiple_person_properties_validation PASSED [ 21%]
posthog/api/test/test_person.py::TestPerson::test_update_single_person_property PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPI::test_create_personal_api_key PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPI::test_create_personal_api_key_label_required PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPI::test_delete_personal_api_key PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPI::test_get_own_personal_api_key PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPI::test_get_someone_elses_personal_api_key PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPI::test_list_only_user_personal_api_keys PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_body PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_does_not_interfere_with_temporary_token_auth PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_header_resilient PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_no_key PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_query_string PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_user_endpoint PASSED [ 21%]
posthog/api/test/test_personal_api_keys.py::TestPersonalAPIKeysAPIAuthentication::test_user_not_active PASSED [ 21%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_active_user_weekly_people PASSED [ 21%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_breakdown_by_cohort_people_endpoint PASSED [ 21%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_breakdown_by_event_property_none_people_endpoint PASSED [ 21%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_breakdown_by_event_property_people_endpoint PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_breakdown_by_person_property_nones_people_endpoint PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_breakdown_by_person_property_people_endpoint PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_day_interval PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_day_interval_cumulative PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_filtering_by_person_properties PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_hour_interval PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_legacy_interval_day PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_legacy_interval_hour PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_legacy_interval_month PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_legacy_interval_rounding PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_legacy_interval_week PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_month_interval PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_people_csv PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_people_csv_returns_400_on_no_entity_id_provided PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_people_cumulative PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_people_endpoint_paginated PASSED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_trends_people_endpoint_filters_search FAILED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_trends_people_endpoint_includes_recordings FAILED [ 22%]
posthog/api/test/test_persons_trends.py::TestPersonTrends::test_week_interval PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_cannot_access_others_orgs_plugins PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_cannot_delete_global_plugin PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_cannot_delete_of_other_orgs_plugin PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_check_for_updates_plugins_reload_not_called PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_auth PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_auth_globally_managed PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_commit_url PASSED [ 22%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_config PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_config_auth PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_config_with_secrets PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_frontend_source PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_other_commit_url PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_repo_url PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_eq_current PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_eq_next_minor PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_gt_current PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_gt_next_major PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_gt_next_major_ignore_on_cloud FAILED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_lt_current PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_lt_invalid PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_lt_next_major PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_delete_plugin_auth PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_delete_plugin_config_auth PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_get_all_activity PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_globally_managed_only_manageable_by_owner_org PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_globally_managed_visible_to_all_orgs PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_install_plugin_on_multiple_orgs PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_job_trigger PASSED  [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_listing_plugins_is_not_nplus1 PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_no_longer_globally_managed_still_visible_to_org_if_enabled PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_plugin_config_attachment PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_plugin_config_list PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_plugin_private_token_url_unique PASSED [ 23%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_plugin_repository PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_update_plugin_auth PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_update_plugin_auth_to_globally_managed PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_update_plugin_config_auth PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_update_plugin_config_no_longer_globally_managed_but_still_enabled PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginAPI::test_update_plugin_source PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_config_check PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_config_check_with_id_str PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_install_check PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_install_check_but_different_specific_id PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_no_org_check PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_none_check PASSED [ 24%]
posthog/api/test/test_plugin.py::TestPluginsAccessLevelAPI::test_root_check PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_can_create_org_in_fresh_instance PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_can_create_org_with_multi_org PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_based_on_license PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_limited_db_queries FAILED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_request FAILED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_request_unauthenticated FAILED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_request_with_social_auth_providers FAILED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_demo PASSED      [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_ee_preflight_with_users_limit PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_preflight_request PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_preflight_request_unauthenticated PASSED [ 24%]
posthog/api/test/test_preflight.py::TestPreflight::test_preflight_request_with_object_storage_available PASSED [ 24%]
posthog/api/test/test_prompt.py::TestPrompt::test_my_prompts PASSED      [ 24%]
posthog/api/test/test_prompt.py::TestPrompt::test_webhook_creates_sequence_and_state PASSED [ 24%]
posthog/api/test/test_prompt.py::TestPrompt::test_webhook_invalid_data PASSED [ 25%]
posthog/api/test/test_prompt.py::TestPrompt::test_webhook_rejects_get_request PASSED [ 25%]
posthog/api/test/test_prompt.py::TestPrompt::test_webhook_rejects_missing_token PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_cant_see_property_definitions_for_another_team PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_delete_property_definition PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_group_property_filter PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_individual_property_formats PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_is_event_property_filter PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_is_feature_flag_property_filter PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_list_numerical_property_definitions PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_list_property_definitions PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_pagination_of_property_definitions PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_person_property_filter PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionAPI::test_query_property_definitions PASSED [ 25%]
posthog/api/test/test_property_definition.py::TestPropertyDefinitionQuerySerializer::test_validation PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_event_property_filter PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_events_query_all_time_date PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_full_events_query_limit PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_full_hogql_query PASSED  [ 25%]
posthog/api/test/test_query.py::TestQuery::test_full_hogql_query_limit PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_hogql_property_filter PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_invalid_query_kind PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_invalid_recent_performance_pageviews PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_json_undefined_constant_error PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_person_property_filter PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_property_definition_annotation_does_not_break_things PASSED [ 25%]
posthog/api/test/test_query.py::TestQuery::test_property_filter_aggregations PASSED [ 26%]
posthog/api/test/test_query.py::TestQuery::test_safe_clickhouse_error_passed_through PASSED [ 26%]
posthog/api/test/test_query.py::TestQuery::test_select_event_person PASSED [ 26%]
posthog/api/test/test_query.py::TestQuery::test_select_hogql_expressions PASSED [ 26%]
posthog/api/test/test_query.py::TestQuery::test_unsafe_clickhouse_error_is_swallowed PASSED [ 26%]
posthog/api/test/test_query.py::TestQuery::test_valid_recent_performance_pageviews FAILED [ 26%]
posthog/api/test/test_query.py::TestQuery::test_valid_recent_performance_pageviews_defaults_to_the_last_hour SKIPPED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_can_get_session_recording_blob PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_can_not_get_session_recording_blob_that_does_not_exist PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_cannot_get_session_recording_blob_for_made_up_sessions PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_console_log_filters_are_correctly_passed_to_listing PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_delete_session_recording PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_empty_list_session_ids_filter_returns_no_recordings PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_default_limit_of_chunks PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_metadata_for_chunked_session_recording PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_session_recordings PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_single_session_recording_metadata PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_snapshots_for_chunked_session_recording PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_snapshots_is_compressed PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_snapshots_v2_default_response PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_snapshots_v2_default_response_no_realtime_if_old PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_get_via_sharing_token PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_listing_recordings_is_not_nplus1_for_persons PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_regression_encoded_emojis_dont_crash PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_request_to_another_teams_endpoint_returns_401 PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_session_ids_filter PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_session_recording_doesnt_exist PASSED [ 26%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_session_recording_for_user_with_multiple_distinct_ids PASSED [ 27%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_session_recording_with_no_person PASSED [ 27%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_session_recordings_dont_leak_teams PASSED [ 27%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_setting_viewed_state_of_session_recording PASSED [ 27%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_single_session_recording_doesnt_leak_teams PASSED [ 27%]
posthog/api/test/test_session_recordings.py::TestSessionRecordings::test_viewed_state_of_session_recording PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_can_edit_enabled_state PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_can_edit_enabled_state_for_insight PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_can_get_shared_dashboard_asset_with_no_content_but_content_location_0__exporter_something_png_token_my_test_token <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_can_get_shared_dashboard_asset_with_no_content_but_content_location_1__shared_dashboard_something_png_token_my_test_token <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_does_not_change_token_when_toggling_enabled_state PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_exports_image_when_sharing PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_gets_sharing_config PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_shared_insight_can_regenerate_stale_existing_generated_open_graph_image_0_insights <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_shared_insight_can_regenerate_stale_existing_generated_open_graph_image_1_dashboards <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_shared_thing_can_generate_open_graph_image_0_insights <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_shared_thing_can_generate_open_graph_image_1_dashboards <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_shared_thing_can_reuse_existing_generated_open_graph_image_0_insights <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_shared_thing_can_reuse_existing_generated_open_graph_image_1_dashboards <- ../../usr/local/lib/python3.10/unittest/mock.py PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_should_not_be_affected_by_collaboration_rules PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_should_not_get_deleted_item PASSED [ 27%]
posthog/api/test/test_sharing.py::TestSharing::test_should_update_to_match_existing_dashboard_sharing_token PASSED [ 27%]
posthog/api/test/test_signup.py::TestSignupAPI::test_api_can_use_social_login_to_create_organization_if_enabled PASSED [ 27%]
posthog/api/test/test_signup.py::TestSignupAPI::test_api_cannot_use_social_login_to_create_organization_if_disabled PASSED [ 27%]
posthog/api/test/test_signup.py::TestSignupAPI::test_api_cannot_use_whitelist_for_different_domain FAILED [ 27%]
posthog/api/test/test_signup.py::TestSignupAPI::test_api_sign_up PASSED  [ 27%]
posthog/api/test/test_signup.py::TestSignupAPI::test_api_social_login_cannot_create_second_organization PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_api_social_login_to_create_organization PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_cannot_social_signup_with_whitelisted_but_jit_provisioning_disabled FAILED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_cannot_social_signup_with_whitelisted_but_unverified_domain FAILED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_cant_sign_up_with_required_attributes_null PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_cant_sign_up_with_short_password PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_cant_sign_up_without_required_attributes PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_default_dashboard_is_created_on_signup PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_signup_allowed_on_self_hosted_with_env_var PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_signup_disallowed_on_email_collision PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_signup_disallowed_on_self_hosted_by_default PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_signup_minimum_attrs PASSED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_to_existing_org_without_whitelisted_domain_on_cloud FAILED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_with_whitelisted_domain_on_cloud FAILED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_with_whitelisted_domain_on_cloud_reverse FAILED [ 28%]
posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_with_whitelisted_domain_on_self_hosted FAILED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_member_joined_email_is_not_sent_for_initial_member PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_member_joined_email_is_not_sent_if_disabled PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_member_joined_email_is_sent_for_next_members PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_prevalidate PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_prevalidate_expired_invite PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_prevalidate_for_existing_user PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_prevalidate_invalid_invite PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_where_default_project_is_private PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_where_there_are_no_default_non_private_projects FAILED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_with_first_name_prevalidate PASSED [ 28%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_social_invite_sign_up PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_social_invite_sign_up_if_email_verification_on PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cannot_use_claim_invite_endpoint_to_update_user PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cannot_use_social_invite_sign_up_if_social_session_is_not_active PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cannot_use_social_invite_sign_up_without_required_attributes PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cant_claim_expired_invite PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cant_claim_invalid_invite PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cant_claim_invite_sign_up_with_short_password PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_cant_claim_sign_up_invite_without_required_attributes PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_existing_user_can_sign_up_to_a_new_organization PASSED [ 29%]
posthog/api/test/test_signup.py::TestInviteSignupAPI::test_existing_user_cant_claim_invite_if_it_doesnt_match_target_email PASSED [ 29%]
posthog/api/test/test_signup_demo.py::TestDemoSignupAPI::test_demo_login PASSED [ 29%]
posthog/api/test/test_signup_demo.py::TestDemoSignupAPI::test_demo_signup PASSED [ 29%]
posthog/api/test/test_signup_demo.py::TestDemoSignupAPI::test_social_login_give_staff_privileges PASSED [ 29%]
posthog/api/test/test_signup_demo.py::TestDemoSignupAPI::test_social_signup_give_staff_privileges PASSED [ 29%]
posthog/api/test/test_site_app.py::TestSiteApp::test_get_site_config_from_schema PASSED [ 29%]
posthog/api/test/test_site_app.py::TestSiteApp::test_site_app PASSED     [ 29%]
posthog/api/test/test_survey.py::TestSurvey::test_can_create_basic_survey PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurvey::test_can_create_survey_with_linked_flag_and_targeting PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurvey::test_can_list_surveys PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurvey::test_deleting_survey_deletes_targeting_flag PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurvey::test_deleting_survey_does_not_delete_linked_flag PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurvey::test_updating_survey_with_targeting_creates_or_updates_targeting_flag PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurveysAPIList::test_get_surveys_errors_on_empty_token PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurveysAPIList::test_get_surveys_errors_on_invalid_token PASSED [ 29%]
posthog/api/test/test_survey.py::TestSurveysAPIList::test_list_surveys PASSED [ 29%]
posthog/api/test/test_tagged_item.py::TestTaggedItemSerializerMixin::test_can_list_tags_on_non_ee_and_get_empty_list PASSED [ 30%]
posthog/api/test/test_tagged_item.py::TestTaggedItemSerializerMixin::test_create_tags_on_non_ee_not_allowed PASSED [ 30%]
posthog/api/test/test_tagged_item.py::TestTaggedItemSerializerMixin::test_empty_tags_does_not_delete_tags PASSED [ 30%]
posthog/api/test/test_tagged_item.py::TestTaggedItemSerializerMixin::test_get_tags_on_non_ee_returns_empty_list PASSED [ 30%]
posthog/api/test/test_tagged_item.py::TestTaggedItemSerializerMixin::test_undefined_tags_allows_other_props_to_update PASSED [ 30%]
posthog/api/test/test_tagged_item.py::TestTaggedItemSerializerMixin::test_update_tags_on_non_ee_not_allowed PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_cannot_set_invalid_timezone_for_project PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_cant_create_a_second_project_without_license PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_cant_create_team_without_license_on_selfhosted PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_cant_retrieve_project_from_another_org PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_cant_set_primary_dashboard_to_another_teams_dashboard PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_cant_update_project_from_another_org PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_configure_exception_autocapture_event_dropping PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_configure_exception_autocapture_event_dropping_only_allows_simple_config PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_delete_bulky_postgres_data PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_delete_team_own_second PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_filter_permission PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_is_generating_demo_data PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_list_projects PASSED    [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_org_member_can_create_demo_project PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_reset_token PASSED      [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_reset_token_insufficient_priviledges PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_retrieve_project PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_team_is_cached_on_create_and_update PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_turn_on_exception_autocapture PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_update_primary_dashboard PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_update_project_timezone PASSED [ 30%]
posthog/api/test/test_team.py::TestTeamAPI::test_update_recording_version PASSED [ 31%]
posthog/api/test/test_team.py::TestTeamAPI::test_update_test_filter_default_checked PASSED [ 31%]
posthog/api/test/test_team.py::TestTeamAPI::test_update_timezone_remove_cache PASSED [ 31%]
posthog/api/test/test_uploaded_media.py::TestMediaAPI::test_can_upload_and_retrieve_a_file PASSED [ 31%]
posthog/api/test/test_uploaded_media.py::TestMediaAPI::test_made_up_id_is_404 PASSED [ 31%]
posthog/api/test/test_uploaded_media.py::TestMediaAPI::test_rejects_file_manually_crafted_to_start_with_image_magic_bytes PASSED [ 31%]
posthog/api/test/test_uploaded_media.py::TestMediaAPI::test_rejects_non_image_file_type PASSED [ 31%]
posthog/api/test/test_uploaded_media.py::TestMediaAPI::test_rejects_too_large_file_type PASSED [ 31%]
posthog/api/test/test_uploaded_media.py::TestMediaAPI::test_rejects_upload_when_object_storage_is_unavailable PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_can_only_list_yourself PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_can_update_current_organization PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_can_update_current_project PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_cannot_set_a_non_existent_org_or_team PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_cannot_set_a_team_without_permissions PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_cannot_set_an_organization_without_permissions PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_cannot_set_mismatching_org_and_team PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_cannot_upgrade_yourself_to_staff_user PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_cant_update_to_insecure_password PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_creating_users_on_this_endpoint_is_not_supported PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_current_team_prefer_current_organization PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_deleting_current_user_is_not_supported PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_no_notifications_when_user_email_is_changed_and_email_not_available PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_no_notifications_when_user_email_is_changed_and_only_case_differs PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_no_ratelimit_for_get_requests_for_users PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_notifications_sent_when_user_email_is_changed_and_email_available PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_organization_metadata_on_user_serializer PASSED [ 31%]
posthog/api/test/test_user.py::TestUserAPI::test_redirect_only_to_allowed_urls PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_redirect_user_to_site_with_toolbar PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_retrieve_current_user PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_unauthenticated_user_cannot_fetch_endpoint PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_unauthenticated_user_cannot_update_anything PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_update_current_user PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_user_can_update_password PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_user_cannot_update_password_with_incorrect_current_password PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_user_cannot_update_password_with_incorrect_current_password_and_ratelimit_to_prevent_attacks PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_user_cannot_update_password_without_current_password PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_user_with_no_password_set_can_set_password PASSED [ 32%]
posthog/api/test/test_user.py::TestUserAPI::test_user_with_unusable_password_set_can_set_password PASSED [ 32%]
posthog/api/test/test_user.py::TestUserSlackWebhook::test_slack_webhook_bad_url PASSED [ 32%]
posthog/api/test/test_user.py::TestUserSlackWebhook::test_slack_webhook_bad_url_full PASSED [ 32%]
posthog/api/test/test_user.py::TestUserSlackWebhook::test_slack_webhook_no_webhook PASSED [ 32%]
posthog/api/test/test_user.py::TestLoginViews::test_redirect_to_preflight_when_no_users PASSED [ 32%]
posthog/api/test/test_user.py::TestStaffUserAPI::test_add_2fa PASSED     [ 32%]
posthog/api/test/test_user.py::TestStaffUserAPI::test_can_list_staff_users PASSED [ 32%]
posthog/api/test/test_user.py::TestStaffUserAPI::test_only_staff_can_list_other_users PASSED [ 32%]
posthog/api/test/test_user.py::TestStaffUserAPI::test_only_staff_user_can_update_staff_prop PASSED [ 32%]
posthog/api/test/test_user.py::TestStaffUserAPI::test_update_staff_user PASSED [ 32%]
posthog/api/test/test_user.py::TestEmailVerificationAPI::test_can_validate_email_verification_token PASSED [ 32%]
posthog/api/test/test_user.py::TestEmailVerificationAPI::test_cant_validate_email_verification_token_without_a_token PASSED [ 32%]
posthog/api/test/test_user.py::TestEmailVerificationAPI::test_cant_verify_if_email_is_not_configured PASSED [ 32%]
posthog/api/test/test_user.py::TestEmailVerificationAPI::test_cant_verify_more_than_six_times PASSED [ 32%]
posthog/api/test/test_user.py::TestEmailVerificationAPI::test_invalid_verification_token_returns_error PASSED [ 32%]
posthog/api/test/test_user.py::TestEmailVerificationAPI::test_user_can_request_verification_email PASSED [ 32%]
posthog/api/test/test_utils.py::TestUtils::test_check_definition_ids_inclusion_field_sql PASSED [ 33%]
posthog/api/test/test_utils.py::TestUtils::test_format_paginated_url PASSED [ 33%]
posthog/api/test/test_utils.py::TestUtils::test_get_data PASSED          [ 33%]
posthog/api/test/test_utils.py::TestUtils::test_get_target_entity PASSED [ 33%]
posthog/api/test/test_utils.py::TestUtils::test_safe_clickhouse_string_surrogates PASSED [ 33%]
posthog/api/test/test_utils.py::TestUtils::test_safe_clickhouse_string_unicode_non_surrogates PASSED [ 33%]
posthog/api/test/test_utils.py::TestUtils::test_safe_clickhouse_string_valid_strings PASSED [ 33%]
posthog/api/test/batch_exports/test_backfill.py::test_batch_export_backfill PASSED [ 33%]
posthog/api/test/batch_exports/test_backfill.py::test_batch_export_backfill_with_non_isoformatted_dates PASSED [ 33%]
posthog/api/test/batch_exports/test_backfill.py::test_batch_export_backfill_with_start_at_after_end_at PASSED [ 33%]
posthog/api/test/batch_exports/test_backfill.py::test_cannot_trigger_backfill_for_another_organization PASSED [ 33%]
posthog/api/test/batch_exports/test_backfill.py::test_backfill_is_partitioned_by_team_id PASSED [ 33%]
posthog/api/test/batch_exports/test_create.py::test_create_batch_export_with_interval_schedule PASSED [ 33%]
posthog/api/test/batch_exports/test_create.py::test_cannot_create_a_batch_export_for_another_organization PASSED [ 33%]
posthog/api/test/batch_exports/test_delete.py::test_delete_batch_export PASSED [ 33%]
posthog/api/test/batch_exports/test_delete.py::test_cannot_delete_export_of_other_organizations PASSED [ 33%]
posthog/api/test/batch_exports/test_delete.py::test_deletes_are_partitioned_by_team_id PASSED [ 33%]
posthog/api/test/batch_exports/test_get.py::test_can_get_exports_for_your_organizations PASSED [ 33%]
posthog/api/test/batch_exports/test_get.py::test_cannot_get_exports_for_other_organizations PASSED [ 33%]
posthog/api/test/batch_exports/test_get.py::test_batch_exports_are_partitioned_by_team PASSED [ 33%]
posthog/api/test/batch_exports/test_list.py::test_list_batch_exports PASSED [ 33%]
posthog/api/test/batch_exports/test_list.py::test_cannot_list_batch_exports_for_other_organizations PASSED [ 33%]
posthog/api/test/batch_exports/test_list.py::test_list_is_partitioned_by_team PASSED [ 33%]
posthog/api/test/batch_exports/test_pause.py::test_pause_and_unpause_batch_export PASSED [ 33%]
posthog/api/test/batch_exports/test_pause.py::test_connot_pause_and_unpause_batch_exports_of_other_organizations PASSED [ 33%]
posthog/api/test/batch_exports/test_pause.py::test_pause_and_unpause_are_partitioned_by_team_id PASSED [ 33%]
posthog/api/test/batch_exports/test_pause.py::test_pause_batch_export_that_is_already_paused PASSED [ 34%]
posthog/api/test/batch_exports/test_pause.py::test_unpause_batch_export_that_is_already_unpaused PASSED [ 34%]
posthog/api/test/batch_exports/test_pause.py::test_pause_non_existent_batch_export PASSED [ 34%]
posthog/api/test/batch_exports/test_pause.py::test_unpause_can_trigger_a_backfill PASSED [ 34%]
posthog/api/test/batch_exports/test_runs.py::test_can_get_export_runs_for_your_organizations PASSED [ 34%]
posthog/api/test/batch_exports/test_runs.py::test_cannot_get_exports_for_other_organizations PASSED [ 34%]
posthog/api/test/batch_exports/test_runs.py::test_batch_exports_are_partitioned_by_team PASSED [ 34%]
posthog/api/test/batch_exports/test_update.py::test_can_put_config PASSED [ 34%]
posthog/api/test/batch_exports/test_update.py::test_can_patch_config PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_adding_insights_is_not_nplus1_for_gets PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_can_move_tile_between_dashboards PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_can_soft_delete_dashboard_after_soft_deleting_insight PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_can_soft_delete_insight_after_soft_deleting_dashboard PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_cannot_create_a_dashboard_with_a_description_when_unlicensed PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_cannot_update_dashboard_with_invalid_filters PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_create_basic_dashboard PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_create_dashboard_item PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_create_from_template_json PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_create_from_template_json_cam_provide_query_tile PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_create_from_template_json_cam_provide_text_tile PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_create_from_template_json_must_provide_at_least_one_tile PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_creation_mode PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_creation_validation PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_does_not_load_insight_that_was_deleted PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_duplication PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_duplication_can_duplicate_tiles PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_duplication_can_duplicate_tiles_without_editing_name_if_there_is_none PASSED [ 34%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_duplication_does_not_duplicate_tiles_by_default PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_duplication_without_tile_duplicate_excludes_soft_deleted_tiles PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_endpoints PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_filter_is_applied_even_if_insight_is_created_before_dashboard PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_filtering_on_properties PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_from_template PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_insight_tiles_can_be_loaded_correct_context PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_insights_out_of_synch_with_tiles_are_not_shown PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_item_layout PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_items PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_items_history_per_user PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_items_history_saved PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_dashboard_tile_color_can_be_set_for_new_or_existing_tiles PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_delete_dashboard_can_delete_tiles PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_delete_does_not_delete_insights_by_default PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_duplication_fail_for_different_team PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_hard_delete_is_forbidden PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_insights_with_no_insight_set PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_invalid_dashboard_duplication PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_invalid_properties PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_invalid_template_receives_400_response PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_listing_dashboards_does_not_include_tiles PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_listing_dashboards_is_not_nplus1 PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_loading_individual_dashboard_does_not_prefetch_all_possible_tiles PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_no_cache_available PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_patch_api_as_form_data PASSED [ 35%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_refresh_cache PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_relations_on_insights_when_dashboards_were_deleted PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_retrieve_dashboard PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_retrieve_dashboard_different_team PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_retrieve_dashboard_list PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_return_cached_results_bleh PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_return_cached_results_dashboard_has_filters PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_shared_dashboard PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_soft_delete_can_be_reversed_with_patch PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_soft_delete_does_not_delete_tiles PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard.py::TestDashboard::test_update_dashboard PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_duplication.py::TestDashboardDuplication::test_duplicating_dashboard_while_duplicating_tiles PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_duplication.py::TestDashboardDuplication::test_duplicating_dashboard_without_duplicating_tiles PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_text_tiles.py::TestDashboardTiles::test_can_create_a_single_text_tile PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_text_tiles.py::TestDashboardTiles::test_can_remove_text_tiles_from_dashboard PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_text_tiles.py::TestDashboardTiles::test_can_update_a_single_text_tile PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_text_tiles.py::TestDashboardTiles::test_can_update_a_single_text_tile_color PASSED [ 36%]
posthog/api/test/dashboards/test_dashboard_text_tiles.py::TestDashboardTiles::test_do_not_see_deleted_text_tiles_when_adding_new_ones PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_cannot_change_short_id PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_cannot_list_deleted_notebook PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_create_a_notebook_0_without_content PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_create_a_notebook_1_with_content PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_creating_does_not_leak_between_teams PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_empty_notebook_list PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_filters_based_on_params PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_gets_individual_notebook_by_shortid PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_listing_does_not_leak_between_teams PASSED [ 36%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_patching_does_not_leak_between_teams PASSED [ 37%]
posthog/api/test/notebooks/test_notebook.py::TestNotebooks::test_updates_notebook PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_check_groups_data_success PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_check_person_data_failure PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_check_person_data_success PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_completes_successfully PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_data_copy_groups PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_data_copy_persons PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_deleted_data_persons PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_duplicated_data_persons PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_is_required PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_no_extra_tables PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_postcheck_e2e PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_rollback PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_team_id_filter_event_in_team PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_team_id_filter_event_not_in_team PASSED [ 37%]
posthog/async_migrations/test/test_0007_persons_and_groups_on_events_backfill.py::Test0007PersonsAndGroupsOnEventsBackfill::test_timestamp_boundaries PASSED [ 37%]
posthog/async_migrations/test/test_0010_move_old_partitions.py::Test0010MoveOldPartitions::test_completes_successfully PASSED [ 37%]
posthog/async_migrations/test/test_definition.py::TestAsyncMigrationDefinition::test_get_async_migration_definition PASSED [ 37%]
posthog/async_migrations/test/test_definition.py::TestAsyncMigrationDefinition::test_get_migration_instance_and_parameters PASSED [ 37%]
posthog/async_migrations/test/test_migrations_not_required.py::TestAsyncMigrationsNotRequired::test_async_migrations_not_required_on_fresh_instances PASSED [ 37%]
posthog/async_migrations/test/test_runner.py::TestRunner::test_fail_at_startup_with_no_definition PASSED [ 37%]
posthog/async_migrations/test/test_runner.py::TestRunner::test_rollback_an_incomplete_migration PASSED [ 37%]
posthog/async_migrations/test/test_runner.py::TestRunner::test_rollback_migration PASSED [ 37%]
posthog/async_migrations/test/test_runner.py::TestRunner::test_rollback_migration_failure PASSED [ 37%]
posthog/async_migrations/test/test_runner.py::TestRunner::test_run_async_migration_next_op PASSED [ 37%]
posthog/async_migrations/test/test_runner.py::TestRunner::test_run_migration_in_full PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_complete_migration PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_execute_on_each_shard PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_execute_op_clickhouse PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_execute_op_postgres PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_force_stop_migration PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_process_error PASSED [ 38%]
posthog/async_migrations/test/test_utils.py::TestUtils::test_trigger_migration PASSED [ 38%]
posthog/caching/test/test_fetch_from_cache.py::TestFetchFromCache::test_fetch_cached_insight_result_from_cache PASSED [ 38%]
posthog/caching/test/test_fetch_from_cache.py::TestFetchFromCache::test_fetch_invalid_filter PASSED [ 38%]
posthog/caching/test/test_fetch_from_cache.py::TestFetchFromCache::test_fetch_nothing_yet_cached PASSED [ 38%]
posthog/caching/test/test_fetch_from_cache.py::TestFetchFromCache::test_synchronously_update_cache_dashboard_tile PASSED [ 38%]
posthog/caching/test/test_fetch_from_cache.py::TestFetchFromCache::test_synchronously_update_cache_insight PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_schedule_cache_updates PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params0-1] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params1-0] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params2-1] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params3-0] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params4-1] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params5-0] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params6-1] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params7-0] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params8-1] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_fetch_states_in_need_of_updating[params9-0] PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_update_cache PASSED     [ 38%]
posthog/caching/test/test_insight_cache.py::test_update_cache_updates_identical_cache_keys PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_update_cache_when_calculation_fails PASSED [ 38%]
posthog/caching/test/test_insight_cache.py::test_update_cache_when_recently_refreshed PASSED [ 39%]
posthog/caching/test/test_insight_cache.py::test_get_cache_type[Filter-TRENDS-Trends] PASSED [ 39%]
posthog/caching/test/test_insight_cache.py::test_get_cache_type[StickinessFilter-STICKINESS-Stickiness] PASSED [ 39%]
posthog/caching/test/test_insight_cache.py::test_get_cache_type[PathFilter-PATHS-Path] PASSED [ 39%]
posthog/caching/test/test_insight_cache.py::test_get_cache_type[RetentionFilter-RETENTION-Retention] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[shared insight (base)] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[not shared insight] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with inactive team] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight never viewed] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight viewed long time ago] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with no filters] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[deleted insight] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[shared tile (base)] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[not shared tile] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile with inactive team] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[deleted tile] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile with deleted dashboard] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile with deleted insight] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile with insight with no filters] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile with text] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile on home dashboard] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[very recently viewed tile (1)] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[very recently viewed tile (2)] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[recently viewed tile (1)] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[recently viewed tile (2)] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile viewed ages ago] PASSED [ 39%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with EventsQuery query viewed recently] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with HogQLQuery query viewed recently] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with RecentPerformancePageViewNode query viewed recently] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with TimeToSeeDataSessionsQuery query viewed recently] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with TimeToSeeDataQuery query viewed recently] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with query viewed recently but not a cacheable type of query] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[insight with query viewed recently, not a cacheable type of query, but with a cacheable source] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_calculate_target_age[tile with query viewed ages ago] PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_upsert_new_insight PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_upsert_update_insight PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_upsert_update_insight_with_filter_change PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_upsert_new_tile PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_upsert_text_tile_does_not_create_record PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::test_sync_insight_cache_states PASSED [ 40%]
posthog/caching/test/test_insight_caching_state.py::TestLazyLoader::test_recently_viewed_insights PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_dashboard_filters_should_override_insight_filters_when_deciding_on_refresh_time PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_insights_with_hour_intervals_can_be_refreshed_more_often PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_insights_with_ranges_lower_than_7_days_can_be_refreshed_more_often PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_shared_insights_can_be_refreshed_less_often PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_should_return_true_if_insight_does_not_have_last_refresh PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_should_return_true_if_refresh_just_about_to_time_out_elsewhere PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_should_return_true_if_refresh_not_requested PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_should_return_true_if_refresh_requested PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_should_return_true_if_refresh_timed_out_elsewhere_before PASSED [ 40%]
posthog/caching/test/test_should_refresh_insight.py::TestShouldRefreshInsight::test_should_return_true_if_was_recently_refreshed PASSED [ 40%]
posthog/caching/test/test_tolerant_zlib_compressor.py::TestTolerantZlibCompressor::test_the_zlib_compressor_compression_0_test_when_disabled_compress_is_the_identity PASSED [ 40%]
posthog/caching/test/test_tolerant_zlib_compressor.py::TestTolerantZlibCompressor::test_the_zlib_compressor_compression_1_test_when_enabled_can_compress PASSED [ 40%]
posthog/caching/test/test_tolerant_zlib_compressor.py::TestTolerantZlibCompressor::test_the_zlib_compressor_compression_2_test_when_enabled_does_not_compress_small_values PASSED [ 41%]
posthog/caching/test/test_tolerant_zlib_compressor.py::TestTolerantZlibCompressor::test_the_zlib_compressor_decompression_0_test_when_disabled_decompress_is_the_identity PASSED [ 41%]
posthog/caching/test/test_tolerant_zlib_compressor.py::TestTolerantZlibCompressor::test_the_zlib_compressor_decompression_1_test_when_enabled_can_decompress PASSED [ 41%]
posthog/caching/test/test_tolerant_zlib_compressor.py::TestTolerantZlibCompressor::test_the_zlib_compressor_decompression_2_test_when_disabled_can_still_decompress PASSED [ 41%]
posthog/clickhouse/test/test_person_overrides.py::test_can_insert_person_overrides PASSED [ 41%]
posthog/clickhouse/test/test_person_overrides.py::test_person_overrides_dict PASSED [ 41%]
posthog/demo/test/test_matrix_manager.py::TestMatrixManager::test_create_team PASSED [ 41%]
posthog/demo/test/test_matrix_manager.py::TestMatrixManager::test_reset_master PASSED [ 41%]
posthog/demo/test/test_matrix_manager.py::TestMatrixManager::test_run_on_team PASSED [ 41%]
posthog/demo/test/test_matrix_manager.py::TestMatrixManager::test_run_on_team_using_pre_save PASSED [ 41%]
posthog/hogql/database/test/test_argmax.py::TestArgmax::test_argmax_select PASSED [ 41%]
posthog/hogql/database/test/test_argmax.py::TestArgmax::test_argmax_select_deleted PASSED [ 41%]
posthog/hogql/database/test/test_database.py::TestDatabase::test_database_with_warehouse_tables PASSED [ 41%]
posthog/hogql/database/test/test_database.py::TestDatabase::test_serialize_database_no_person_on_events PASSED [ 41%]
posthog/hogql/database/test/test_database.py::TestDatabase::test_serialize_database_with_person_on_events_enabled PASSED [ 41%]
posthog/hogql/database/test/test_s3_table.py::TestS3Table::test_s3_table_select PASSED [ 41%]
posthog/hogql/database/test/test_s3_table.py::TestS3Table::test_s3_table_select_and_non_s3_join PASSED [ 41%]
posthog/hogql/database/test/test_s3_table.py::TestS3Table::test_s3_table_select_join PASSED [ 41%]
posthog/hogql/database/test/test_s3_table.py::TestS3Table::test_s3_table_select_join_with_alias PASSED [ 41%]
posthog/hogql/database/test/test_s3_table.py::TestS3Table::test_s3_table_select_with_alias PASSED [ 41%]
posthog/hogql/functions/test/test_cohort.py::TestCohort::test_in_cohort_dynamic PASSED [ 41%]
posthog/hogql/functions/test/test_cohort.py::TestCohort::test_in_cohort_error PASSED [ 41%]
posthog/hogql/functions/test/test_cohort.py::TestCohort::test_in_cohort_static PASSED [ 41%]
posthog/hogql/functions/test/test_cohort.py::TestCohort::test_in_cohort_strings PASSED [ 41%]
posthog/hogql/functions/test/test_sparkline.py::TestSparkline::test_sparkline PASSED [ 41%]
posthog/hogql/functions/test/test_sparkline.py::TestSparkline::test_sparkline_error PASSED [ 41%]
posthog/hogql/test/test_bytecode.py::TestBytecode::test_bytecode_create PASSED [ 42%]
posthog/hogql/test/test_bytecode.py::TestBytecode::test_bytecode_create_error PASSED [ 42%]
posthog/hogql/test/test_escape_sql.py::TestPrintString::test_sanitize_clickhouse_identifier PASSED [ 42%]
posthog/hogql/test/test_escape_sql.py::TestPrintString::test_sanitize_clickhouse_string PASSED [ 42%]
posthog/hogql/test/test_escape_sql.py::TestPrintString::test_sanitize_hogql_identifier PASSED [ 42%]
posthog/hogql/test/test_escape_sql.py::TestPrintString::test_sanitize_hogql_string PASSED [ 42%]
posthog/hogql/test/test_metadata.py::TestMetadata::test_metadata_expr_parse_error PASSED [ 42%]
posthog/hogql/test/test_metadata.py::TestMetadata::test_metadata_expr_resolve_error PASSED [ 42%]
posthog/hogql/test/test_metadata.py::TestMetadata::test_metadata_in_cohort PASSED [ 42%]
posthog/hogql/test/test_metadata.py::TestMetadata::test_metadata_property_type_notice PASSED [ 42%]
posthog/hogql/test/test_metadata.py::TestMetadata::test_metadata_valid_expr_select PASSED [ 42%]
posthog/hogql/test/test_parse_string.py::TestParseString::test_escaped_quotes PASSED [ 42%]
posthog/hogql/test/test_parse_string.py::TestParseString::test_escaped_quotes_slash PASSED [ 42%]
posthog/hogql/test/test_parse_string.py::TestParseString::test_quote_types PASSED [ 42%]
posthog/hogql/test/test_parse_string.py::TestParseString::test_slash_escape PASSED [ 42%]
posthog/hogql/test/test_parse_string.py::TestParseString::test_slash_escape_not_escaped PASSED [ 42%]
posthog/hogql/test/test_parse_string.py::TestParseString::test_slash_escape_slash_multiple PASSED [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_alias PASSED         [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_and_or PASSED        [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_arithmetic_operations PASSED [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_arrays PASSED        [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_booleans PASSED      [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_calls PASSED         [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_calls_with_params PASSED [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_case_when PASSED     [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_case_when_case PASSED [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_case_when_many PASSED [ 42%]
posthog/hogql/test/test_parser.py::TestParser::test_conditional PASSED   [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_ctes_subquery_recursion PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_expr_with_ignored_sql_comment PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_field_access PASSED  [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_intervals PASSED     [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_lambdas PASSED       [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_like_comparison_operations PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_math_comparison_operations PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_null PASSED          [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_null_comparison_operations PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_numbers PASSED       [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_order_by PASSED      [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_parens PASSED        [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_parser_error_start_end PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_placeholders PASSED  [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_property_access PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_sample_clause PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_columns PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_columns_distinct PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_complex_wheres PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_from PASSED   [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_from_join PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_from_join_multiple PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_group_by PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_having PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_limit_offset PASSED [ 43%]
posthog/hogql/test/test_parser.py::TestParser::test_select_order_by PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_placeholders PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_prewhere PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_union_all PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_where PASSED  [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_with_columns PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_with_mixed PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_select_with_subqueries PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_strings PASSED       [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_tuples PASSED        [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_unary_operations PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_window_functions PASSED [ 44%]
posthog/hogql/test/test_parser.py::TestParser::test_window_functions_with_window PASSED [ 44%]
posthog/hogql/test/test_placeholders.py::TestParser::test_assert_no_placeholders PASSED [ 44%]
posthog/hogql/test/test_placeholders.py::TestParser::test_replace_placeholders_comparison PASSED [ 44%]
posthog/hogql/test/test_placeholders.py::TestParser::test_replace_placeholders_error PASSED [ 44%]
posthog/hogql/test/test_placeholders.py::TestParser::test_replace_placeholders_simple PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_alias_keywords PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_array_access PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_arrays PASSED      [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_case_when PASSED   [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_case_when_case PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_case_when_many PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_comments PASSED    [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_comparisons PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_concat_pipes PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_count_distinct PASSED [ 44%]
posthog/hogql/test/test_printer.py::TestPrinter::test_count_if_distinct PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_count_star PASSED  [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_equals_null PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_expr_parse_errors PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_expr_parse_errors_poe_off PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_expr_parse_errors_poe_on PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_expr_syntax_errors PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_field_nullable_equals PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_field_nullable_not_equals PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_fields_and_properties PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_functions PASSED   [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_functions_expecting_datetime_arg PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_hogql_properties PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_hogql_properties_json PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_hogql_properties_materialized_json_access PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_lambdas PASSED     [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_literals PASSED    [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_logic PASSED       [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_materialized_fields_and_properties PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_methods PASSED     [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_nullish_concat PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_print_timezone PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_print_timezone_custom PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_print_timezone_gibberish PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select PASSED      [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_alias PASSED [ 45%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_distinct PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_from PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_group_by PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_having PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_limit PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_limit_by PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_offset PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_order_by PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_prewhere PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_sample PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_subquery PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_union_all PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_select_where PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_tuples PASSED      [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_values PASSED      [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_window_functions PASSED [ 46%]
posthog/hogql/test/test_printer.py::TestPrinter::test_window_functions_with_window PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_action_to_expr PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_cohort_filter_dynamic PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_cohort_filter_static PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_elements_chain_key_filter PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_has_aggregation PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_property_groups PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_property_groups_combined PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_property_groups_single PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_boolean PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_element PASSED [ 46%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_event PASSED [ 47%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_event_list PASSED [ 47%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_feature PASSED [ 47%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_hogql PASSED [ 47%]
posthog/hogql/test/test_property.py::TestProperty::test_property_to_expr_person PASSED [ 47%]
posthog/hogql/test/test_property.py::TestProperty::test_selector_to_expr PASSED [ 47%]
posthog/hogql/test/test_property.py::TestProperty::test_tag_name_to_expr PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_hogql_arrays PASSED    [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_hogql_lambdas PASSED   [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_join_with_property_materialized_session_id FAILED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_join_with_property_not_materialized PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_null_equality PASSED   [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_null_properties PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_nullish_coalescing PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_prop_cohort_basic PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_prop_cohort_static PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_property_access_with_arrays PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_property_access_with_arrays_zero_index_error PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query PASSED           [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_e_pdi PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_pdi PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_pdi_e_person_properties PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_pdi_person PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_pdi_person_properties PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_person_properties PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_events_person_properties_in_aggregration PASSED [ 47%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_pdi PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_pdi_person_properties PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_pdi_persons PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_query_joins_simple PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_query_select_person_with_joins_without_poe PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_query_select_person_with_poe_without_joins PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_regex_functions PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_select_person_on_events PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_time_window_functions PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_tuple_access PASSED    [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_window_functions_simple PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_window_functions_with_window PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_with_pivot_table_1_level PASSED [ 48%]
posthog/hogql/test/test_query.py::TestQuery::test_with_pivot_table_2_levels PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_from_subquery_table PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_multiple_table_error PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_select_union PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_subquery PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_subquery_alias PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_table PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_asterisk_expander_table_alias PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_call_type PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_basic_column PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_field_access PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_loop PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_recursive_column PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_subqueries PASSED [ 48%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_subquery_deep PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_ctes_subquery_recursion PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_lambda_parent_scope PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_boolean_operation_types PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_constant_type PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_errors PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_events_table PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_events_table_alias PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_events_table_column_alias PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_events_table_column_alias_inside_subquery PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_lazy_events_pdi_person_table PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_lazy_events_pdi_person_table_aliased PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_lazy_events_pdi_table PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_lazy_events_pdi_table_aliased PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_lazy_pdi_person_table PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_subquery_no_field_access PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_union_all PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_resolve_virtual_events_poe PASSED [ 49%]
posthog/hogql/test/test_resolver.py::TestResolver::test_will_not_run_twice PASSED [ 49%]
posthog/hogql/test/test_visitor.py::TestVisitor::test_everything_visitor PASSED [ 49%]
posthog/hogql/test/test_visitor.py::TestVisitor::test_hogql_exception_start_end PASSED [ 49%]
posthog/hogql/test/test_visitor.py::TestVisitor::test_unknown_error_visitor PASSED [ 49%]
posthog/hogql/test/test_visitor.py::TestVisitor::test_unknown_visitor PASSED [ 49%]
posthog/hogql/test/test_visitor.py::TestVisitor::test_visitor_pattern PASSED [ 49%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_table_as_select_table PASSED [ 49%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_table_as_table_in_join PASSED [ 49%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_one_level_properties PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_one_level_properties_deep PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_traversed_fields PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_two_levels PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_two_levels_properties PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_two_levels_properties_duplicate PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_resolve_lazy_tables_two_levels_traversed PASSED [ 50%]
posthog/hogql/transforms/test/test_lazy_tables.py::TestLazyJoins::test_select_count_from_lazy_table PASSED [ 50%]
posthog/hogql/transforms/test/test_property_types.py::TestPropertyTypes::test_resolve_property_types_combined PASSED [ 50%]
posthog/hogql/transforms/test/test_property_types.py::TestPropertyTypes::test_resolve_property_types_event PASSED [ 50%]
posthog/hogql/transforms/test/test_property_types.py::TestPropertyTypes::test_resolve_property_types_event_person_poe_off PASSED [ 50%]
posthog/hogql/transforms/test/test_property_types.py::TestPropertyTypes::test_resolve_property_types_event_person_poe_on PASSED [ 50%]
posthog/hogql/transforms/test/test_property_types.py::TestPropertyTypes::test_resolve_property_types_person PASSED [ 50%]
posthog/hogql/transforms/test/test_property_types.py::TestPropertyTypes::test_resolve_property_types_person_raw PASSED [ 50%]
posthog/kafka_client/test/test_client.py::KafkaClientTestCase::test_kafka_default_security_protocol PASSED [ 50%]
posthog/kafka_client/test/test_client.py::KafkaClientTestCase::test_kafka_interface PASSED [ 50%]
posthog/kafka_client/test/test_client.py::KafkaClientTestCase::test_kafka_no_sasl_params PASSED [ 50%]
posthog/kafka_client/test/test_client.py::KafkaClientTestCase::test_kafka_produce PASSED [ 50%]
posthog/kafka_client/test/test_client.py::KafkaClientTestCase::test_kafka_produce_and_consume PASSED [ 50%]
posthog/kafka_client/test/test_client.py::KafkaClientTestCase::test_kafka_sasl_params PASSED [ 50%]
posthog/management/commands/test/test_backfill_persons_and_groups_on_events.py::TestBackfillPersonsAndGroupsOnEvents::test_groups_backfill PASSED [ 50%]
posthog/management/commands/test/test_backfill_persons_and_groups_on_events.py::TestBackfillPersonsAndGroupsOnEvents::test_person_backfill PASSED [ 50%]
posthog/management/commands/test/test_fix_person_distinct_ids_after_delete.py::TestFixPersonDistinctIdsAfterDelete::test_dry_run PASSED [ 50%]
posthog/management/commands/test/test_fix_person_distinct_ids_after_delete.py::TestFixPersonDistinctIdsAfterDelete::test_live_run PASSED [ 50%]
posthog/management/commands/test/test_fix_person_distinct_ids_after_delete.py::TestFixPersonDistinctIdsAfterDelete::test_no_op PASSED [ 50%]
posthog/management/commands/test/test_run_async_migrations.py::test_run_async_migrations_doesnt_raise PASSED [ 51%]
posthog/management/commands/test/test_run_async_migrations.py::test_plan_includes_all_migrations_except_past_max_version PASSED [ 51%]
posthog/management/commands/test/test_run_async_migrations.py::test_check_with_pending_migrations PASSED [ 51%]
posthog/management/commands/test/test_run_async_migrations.py::test_check_with_no_pending_migrations PASSED [ 51%]
posthog/management/commands/test/test_run_async_migrations.py::test_complete_noop_migrations PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_distinct_ids_deleted PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_distinct_ids_sync PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_distinct_ids_sync_with_null_version PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_dry_run_everything PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_group_sync PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_group_sync_multiple_entries PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_group_sync_updates_group PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_live_run_everything PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_persons_deleted PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_persons_sync PASSED [ 51%]
posthog/management/commands/test/test_sync_persons_to_clickhouse.py::TestSyncPersonsToClickHouse::test_persons_sync_with_null_version PASSED [ 51%]
posthog/management/commands/test/test_sync_replicated_schema.py::TestSyncReplicatedSchema::test_analyze_empty_cluster PASSED [ 51%]
posthog/management/commands/test/test_sync_replicated_schema.py::TestSyncReplicatedSchema::test_analyze_test_cluster PASSED [ 51%]
posthog/management/commands/test/test_sync_replicated_schema.py::TestSyncReplicatedSchema::test_create_missing_tables PASSED [ 51%]
posthog/models/async_deletion/test_delete_person.py::TestDeletePerson::test_delete_person PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_non_precalculated_cohort_with_behavioural_filter FAILED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_non_precalculated_cohort_with_cohort_filter PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_non_precalculated_cohort_with_only_person_property_filters PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_precalculated_cohort PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_precalculated_cohort_negated PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_static_cohort PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_static_cohort_with_negation PASSED [ 51%]
posthog/models/cohort/test/test_util.py::TestDependentCohorts::test_dependent_cohorts_for_circular_nested_cohort PASSED [ 52%]
posthog/models/cohort/test/test_util.py::TestDependentCohorts::test_dependent_cohorts_for_complex_nested_cohort PASSED [ 52%]
posthog/models/cohort/test/test_util.py::TestDependentCohorts::test_dependent_cohorts_for_deeply_nested_cohort PASSED [ 52%]
posthog/models/cohort/test/test_util.py::TestDependentCohorts::test_dependent_cohorts_for_nested_cohort PASSED [ 52%]
posthog/models/cohort/test/test_util.py::TestDependentCohorts::test_dependent_cohorts_for_simple_cohort PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestFilter::test_old_style_properties PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestFilter::test_simplify_test_accounts PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestFilter::test_to_dict PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_array_property_as_string_on_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_boolean_filters_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_contains_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_does_not_contain_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_filter_out_team_members_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_group_property_filters_direct PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_incomplete_data PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_invalid_regex_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_is_date_before_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_is_not_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_is_not_set_and_is_set_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_is_not_true_false_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_json_object PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_multiple_equality_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_multiple_persons PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_numerical_person_properties PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_person_cohort_properties PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_person_cohort_properties_with_negation PASSED [ 52%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_person_cohort_properties_with_zero_value PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_regex_persons PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertiesToQ::test_simple_persons PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_multiple_properties_property_group_to_q PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_nested_property_group_to_q PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_property_group_to_q_with_behavioural_cohort PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_property_group_to_q_with_cohorts PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_property_group_to_q_with_cohorts_no_match PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_property_group_to_q_with_negation_cohorts PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_property_group_to_q_with_property_overrides PASSED [ 53%]
posthog/models/filters/test/test_filter.py::TestDjangoPropertyGroupToQ::test_simple_property_group_to_q PASSED [ 53%]
posthog/models/filters/test/test_filter_mixins.py::TestFilterMixins::test_funnel_window_days_to_microseconds PASSED [ 53%]
posthog/models/filters/test/test_filter_mixins.py::TestFilterMixins::test_funnel_window_days_to_milliseconds PASSED [ 53%]
posthog/models/filters/test/test_lifecycle_filter.py::TestLifecycleFilter::test_filter_properties PASSED [ 53%]
posthog/models/filters/test/test_path_filter.py::TestPathFilter::test_to_dict PASSED [ 53%]
posthog/models/filters/test/test_path_filter.py::TestPathFilter::test_to_dict_hogql PASSED [ 53%]
posthog/models/filters/test/test_retention_filter.py::TestFilter::test_entities PASSED [ 53%]
posthog/models/filters/test/test_retention_filter.py::TestFilter::test_fill_date_from_and_date_to PASSED [ 53%]
posthog/models/filters/test/test_stickiness_filter.py::TestStickinessFilter::test_filter_properties PASSED [ 53%]
posthog/models/test/test_activity_logging.py::TeatActivityLog::test_dict_changes_between PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_auxilary_models_via_team PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_auxilary_models_via_team_unrelated PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_cohortpeople PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_cohortpeople_version PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_group PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_group_unrelated PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_person PASSED [ 53%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_person_unrelated PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_teams PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_delete_teams_unrelated PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_mark_deletions_done_groups PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_mark_deletions_done_groups_when_not_done PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_mark_deletions_done_person PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_mark_deletions_done_person_when_not_done PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_mark_deletions_done_team_when_not_done PASSED [ 54%]
posthog/models/test/test_async_deletion_model.py::TestAsyncDeletion::test_mark_team_deletions_done PASSED [ 54%]
posthog/models/test/test_dashboard_tile_model.py::TestDashboardTileModel::test_cannot_add_a_tile_with_insight_and_text_on_validation PASSED [ 54%]
posthog/models/test/test_dashboard_tile_model.py::TestDashboardTileModel::test_cannot_set_caching_data_for_text_tiles PASSED [ 54%]
posthog/models/test/test_dashboard_tile_model.py::TestDashboardTileModel::test_loads_dashboard_tiles_efficiently PASSED [ 54%]
posthog/models/test/test_dashboard_tile_model.py::TestDashboardTileModel::test_loads_dashboard_tiles_excludes_deleted PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_equality_with_complex_operator_properties PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_equality_with_ids PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_equality_with_old_style_and_new_style_properties PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_equality_with_simple_properties PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_equality_with_type PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_inclusion PASSED [ 54%]
posthog/models/test/test_entity_model.py::TestEntity::test_inclusion_unordered PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_asterisk_in_middle_of_query PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_asterisk_in_query PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_class PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_nth_child PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_attribute PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_attribute_with_spaces PASSED [ 54%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_child PASSED [ 55%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_child_direct_descendant PASSED [ 55%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_id PASSED [ 55%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_splitting PASSED [ 55%]
posthog/models/test/test_event_model.py::TestSelectors::test_selector_with_spaces PASSED [ 55%]
posthog/models/test/test_event_model.py::TestSelectors::test_unique_order PASSED [ 55%]
posthog/models/test/test_exported_asset_model.py::TestExportedAssetModel::test_delete_expired_assets PASSED [ 55%]
posthog/models/test/test_exported_asset_model.py::TestExportedAssetModel::test_exported_asset_inside_ttl_is_visible_to_both_managers PASSED [ 55%]
posthog/models/test/test_exported_asset_model.py::TestExportedAssetModel::test_exported_asset_outside_ttl_is_not_visible_to_both_managers PASSED [ 55%]
posthog/models/test/test_exported_asset_model.py::TestExportedAssetModel::test_exported_asset_without_ttl_is_visible_to_both_managers PASSED [ 55%]
posthog/models/test/test_exported_asset_model.py::TestExportedAssetModel::test_invalid_exported_asset_is_expired_on_access PASSED [ 55%]
posthog/models/test/test_insight_caching_state.py::TestInsightCachingState::test_dashboard PASSED [ 55%]
posthog/models/test/test_insight_caching_state.py::TestInsightCachingState::test_dashboard_tile_creation_updating_deletion PASSED [ 55%]
posthog/models/test/test_insight_caching_state.py::TestInsightCachingState::test_dashboard_updating_last_accessed_at_does_not_sync PASSED [ 55%]
posthog/models/test/test_insight_caching_state.py::TestInsightCachingState::test_insight_creation_updating_deletion PASSED [ 55%]
posthog/models/test/test_insight_caching_state.py::TestInsightCachingState::test_sharing_configuration_insight PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_does_not_affect_filters_hash_with_absent_date_from PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_does_not_affect_filters_hash_with_null_date_from PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_with_date_from_all_overrides_compare PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_with_date_from_changes_filters_hash PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_with_date_from_filters_does_override_date_from PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_with_no_filters_does_not_override_date_from PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_dashboard_with_same_date_from_filters_generates_expected_date_from PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_query_hash_matches_same_query_source PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_query_hash_varies_with_query_content PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_short_id_and_team_must_be_unique_together PASSED [ 55%]
posthog/models/test/test_insight_model.py::TestInsightModel::test_short_id_is_automatically_generated PASSED [ 55%]
posthog/models/test/test_integration_model.py::TestIntegrationModel::test_slack_integration_config PASSED [ 56%]
posthog/models/test/test_organization_model.py::TestOrganization::test_organization_active_invites PASSED [ 56%]
posthog/models/test/test_organization_model.py::TestOrganization::test_plugins_access_level_is_determined_based_on_realm FAILED [ 56%]
posthog/models/test/test_organization_model.py::TestOrganization::test_plugins_are_not_preinstalled_on_cloud FAILED [ 56%]
posthog/models/test/test_organization_model.py::TestOrganization::test_plugins_are_preinstalled_on_self_hosted FAILED [ 56%]
posthog/models/test/test_organization_model.py::TestOrganization::test_update_available_features_ignored_if_usage_info_exists PASSED [ 56%]
posthog/models/test/test_person_model.py::TestPerson::test_delete_ch_distinct_ids PASSED [ 56%]
posthog/models/test/test_person_model.py::TestPerson::test_delete_person PASSED [ 56%]
posthog/models/test/test_person_model.py::TestPerson::test_person_is_identified PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_complex_rrule_configuration PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_creation PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_generating_token PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_only_updates_next_delivery_date_if_rrule_changes PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_should_ignore_bysetpos_if_missing_weeekday PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_should_work_for_nth_days PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_subscription_summary PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_subscription_summary_with_unexpected_values PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_unsubscribe_deletes_subscription_if_last_subscriber PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_unsubscribe_does_nothing_if_already_unsubscribed PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_unsubscribe_using_token_fails_if_too_old PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_unsubscribe_using_token_succeeds PASSED [ 56%]
posthog/models/test/test_subscription_model.py::TestSubscription::test_update_next_delivery_date_on_save PASSED [ 56%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_at_least_one_constraint PASSED [ 56%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_exactly_one_object_constraint PASSED [ 56%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_uniqueness_constraint_action PASSED [ 56%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_uniqueness_constraint_dashboard PASSED [ 56%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_uniqueness_constraint_event_definition PASSED [ 57%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_uniqueness_constraint_insight PASSED [ 57%]
posthog/models/test/test_tagged_item_model.py::TestTaggedItem::test_uniqueness_constraint_property_definition PASSED [ 57%]
posthog/models/test/test_user_model.py::TestUser::test_analytics_metadata FAILED [ 57%]
posthog/models/test/test_user_model.py::TestUser::test_create_user_with_distinct_id PASSED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_download_plugin_archive_github FAILED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_download_plugin_archive_gitlab PASSED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_download_plugin_archive_npm PASSED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_get_file_from_archive PASSED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_parse_github_urls FAILED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_parse_gitlab_urls PASSED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_parse_npm_urls PASSED [ 57%]
posthog/plugins/test/test_utils.py::TestPluginsUtils::test_put_json_into_zip_archive PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestTeamPluginsDeliveryRateQuery::test_ignores_out_of_bound_metrics PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestTeamPluginsDeliveryRateQuery::test_query_delivery_rate PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsQuery::test_app_metrics PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsQuery::test_filter_by_hourly_date_range PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsQuery::test_filter_by_job_id PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsQuery::test_ignores_unrelated_data PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsErrorsQuery::test_errors_query PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsErrorsQuery::test_errors_query_filter_by_job_id PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsErrorsQuery::test_ignores_unrelated_data PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsErrorDetailsQuery::test_error_details_query PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsErrorDetailsQuery::test_error_details_query_filter_by_job_id PASSED [ 57%]
posthog/queries/app_metrics/test/test_app_metrics.py::TestAppMetricsErrorDetailsQuery::test_ignores_unrelated_data PASSED [ 57%]
posthog/queries/app_metrics/test/test_historical_exports.py::TestHistoricalExports::test_historical_export_metrics PASSED [ 57%]
posthog/queries/app_metrics/test/test_historical_exports.py::TestHistoricalExports::test_historical_exports_activity_for_failed_export PASSED [ 57%]
posthog/queries/app_metrics/test/test_historical_exports.py::TestHistoricalExports::test_historical_exports_activity_for_finished_export PASSED [ 58%]
posthog/queries/app_metrics/test/test_historical_exports.py::TestHistoricalExports::test_historical_exports_activity_for_not_finished_export PASSED [ 58%]
posthog/queries/app_metrics/test/test_historical_exports.py::TestHistoricalExports::test_historical_exports_activity_ignores_unrelated_entries PASSED [ 58%]
posthog/queries/app_metrics/test/test_historical_exports.py::TestHistoricalExports::test_historical_exports_orders_activity_by_created_at PASSED [ 58%]
posthog/queries/funnels/test/test_breakdowns_by_current_url.py::TestBreakdownsByCurrentURL::test_breakdown_by_current_url PASSED [ 58%]
posthog/queries/funnels/test/test_breakdowns_by_current_url.py::TestBreakdownsByCurrentURL::test_breakdown_by_pathname PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_basic_funnel_default_funnel_days_breakdown_action <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_basic_funnel_default_funnel_days_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_breakdown_correct_breakdown_props_are_chosen <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_cohort_breakdown <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_event_no_type <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_event_single_person_events_with_multiple_properties <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_event_single_person_multiple_breakdowns <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_event_with_other <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_event_with_string_only_breakdown <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_limit <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_person <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_with_first_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_with_last_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_with_step_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_with_step_one_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_custom_breakdown_limit_with_nulls <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_custom_breakdown_limit_with_nulls_included <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 58%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_multi_property_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_multiple_breakdown_snapshot <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_multiple_breakdown_with_first_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_multiple_breakdown_with_first_touch_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelBreakdown::test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelConversionTime::test_funnel_step_conversion_times <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelConversionTime::test_funnel_times_with_different_conversion_windows <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFunnelConversionTime::test_funnel_with_multiple_incomplete_tries <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_advanced_funnel_exclusions_between_steps PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_advanced_funnel_multiple_exclusions_between_steps PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_advanced_funnel_with_repeat_steps PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_advanced_funnel_with_repeat_steps_out_of_order_events PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_basic_funnel_default_funnel_days PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_basic_funnel_with_derivative_steps PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_basic_funnel_with_repeat_step_updated_param PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_basic_funnel_with_repeat_steps PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_breakdown_values_is_set_on_the_query_with_fewer_than_two_entities PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_all_events_with_properties PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_conversion_window PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_conversion_window_seconds PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_default PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_events PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_events_with_person_on_events_v2 PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_exclusion_no_end_event PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_exclusions_full_window PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_exclusions_invalid_params PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_exclusions_with_actions PASSED [ 59%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_filter_by_action_with_person_properties PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_filter_test_accounts PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_multiple_actions PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_no_events PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_person_prop PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_prop_filters PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_prop_filters_per_entity PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_skipped_step PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_actions PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_actions_and_events SKIPPED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_actions_and_props PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_actions_and_props_with_zero_person_ids PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_any_event PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_cohorts_step_filter PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_denormalised_properties PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_different_actions_at_same_time_count_as_converted PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_elements_chain PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_entity_person_property_filters PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_matching_properties PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_messed_up_order PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_new_entities_that_mess_up_order PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_precalculated_cohort_step_filter PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_property_groups PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_sampling PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_single_step PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_funnel_with_static_cohort_step_filter PASSED [ 60%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_hogql_aggregation PASSED [ 61%]
posthog/queries/funnels/test/test_funnel.py::TestFOSSFunnel::test_timezones PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_basic_offset PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_first_step PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_first_step_breakdown_person PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_first_step_breakdowns PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_first_step_breakdowns_with_multi_property_breakdown PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_funnel_cohort_breakdown_persons PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_funnel_person_recordings PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_last_step PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_last_step_dropoff PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_second_step_dropoff PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_steps_with_custom_steps_parameter_are_equivalent_to_funnel_step PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_steps_with_custom_steps_parameter_overrides_funnel_step PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_persons.py::TestFunnelPersons::test_steps_with_custom_steps_parameter_where_funnel_step_equivalence_isnt_possible PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_basic_funnel_default_funnel_days_breakdown_action PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_basic_funnel_default_funnel_days_breakdown_action_materialized PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_basic_funnel_default_funnel_days_breakdown_event PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_breakdown_correct_breakdown_props_are_chosen <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_cohort_breakdown <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_event_no_type <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_event_single_person_events_with_multiple_properties <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_event_single_person_multiple_breakdowns <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_event_with_other <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_event_with_string_only_breakdown <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 61%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_limit <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_person <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_with_first_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_with_last_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_with_step_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_with_step_one_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_custom_breakdown_limit_with_nulls <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_custom_breakdown_limit_with_nulls_included <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_multi_property_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_multiple_breakdown_snapshot <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_multiple_breakdown_with_first_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_multiple_breakdown_with_first_touch_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsBreakdown::test_strict_breakdown_events_with_multiple_properties PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsConversionTime::test_funnel_step_conversion_times <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsConversionTime::test_funnel_times_with_different_conversion_windows <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictStepsConversionTime::test_funnel_with_multiple_incomplete_tries <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictSteps::test_advanced_strict_funnel PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictSteps::test_basic_strict_funnel PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict.py::TestFunnelStrictSteps::test_basic_strict_funnel_conversion_times PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict_persons.py::TestFunnelStrictStepsPersons::test_first_step PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict_persons.py::TestFunnelStrictStepsPersons::test_second_step PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict_persons.py::TestFunnelStrictStepsPersons::test_second_step_dropoff PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict_persons.py::TestFunnelStrictStepsPersons::test_strict_funnel_person_recordings PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_strict_persons.py::TestFunnelStrictStepsPersons::test_third_step PASSED [ 62%]
posthog/queries/funnels/test/test_funnel_time_to_convert.py::TestFunnelTimeToConvert::test_auto_bin_count_single_step PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_time_to_convert.py::TestFunnelTimeToConvert::test_auto_bin_count_single_step_duplicate_events PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_time_to_convert.py::TestFunnelTimeToConvert::test_auto_bin_count_total PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_time_to_convert.py::TestFunnelTimeToConvert::test_basic_strict PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_time_to_convert.py::TestFunnelTimeToConvert::test_basic_unordered PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_time_to_convert.py::TestFunnelTimeToConvert::test_custom_bin_count_single_step PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_all_date_range PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_all_results_for_day_interval PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_day_interval PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_from_second_step PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_funnel_step_breakdown_event PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_funnel_step_breakdown_person PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_funnel_trend_cohort_breakdown PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_hour_interval PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_month_interval PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_no_event_in_period PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_one_person_in_multiple_periods_and_windows PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_one_person_in_multiple_periods_and_windows_in_strict_funnel PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_one_person_in_multiple_periods_and_windows_in_unordered_funnel PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_only_one_user_reached_one_step PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_period_not_final PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_steps_performed_in_period_but_in_reverse PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_timezones_trends PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_to_second_step PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_trend_for_hour_based_conversion_window PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_two_runs_by_single_user_in_one_period PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_week_interval PASSED [ 63%]
posthog/queries/funnels/test/test_funnel_trends.py::TestFunnelTrends::test_window_size_one_day PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_trends_persons.py::TestFunnelTrendsPersons::test_funnel_trend_persons_returns_recordings PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_trends_persons.py::TestFunnelTrendsPersons::test_funnel_trend_persons_with_drop_off PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_trends_persons.py::TestFunnelTrendsPersons::test_funnel_trend_persons_with_no_to_step PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_basic_funnel_default_funnel_days_breakdown_action <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_basic_funnel_default_funnel_days_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_breakdown_correct_breakdown_props_are_chosen <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_breakdown_correct_breakdown_props_are_chosen_for_step PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_cohort_breakdown <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_event_no_type <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_event_single_person_events_with_multiple_properties PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_event_single_person_multiple_breakdowns <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_event_with_other <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_event_with_string_only_breakdown <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_limit <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_person <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_with_first_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_with_last_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_with_step_attribution PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_with_step_one_attribution PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_breakdown_with_step_one_attribution_incomplete_funnel PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_custom_breakdown_limit_with_nulls <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_custom_breakdown_limit_with_nulls_included <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_multi_property_breakdown_event <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_multiple_breakdown_snapshot <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 64%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_multiple_breakdown_with_first_touch_attribution <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_multiple_breakdown_with_first_touch_attribution_incomplete_funnel <- posthog/queries/funnels/test/breakdown_cases.py PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsBreakdown::test_funnel_step_non_array_breakdown_with_step_one_attribution_incomplete_funnel PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsConversionTime::test_funnel_step_conversion_times <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsConversionTime::test_funnel_times_with_different_conversion_windows <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedStepsConversionTime::test_funnel_with_multiple_incomplete_tries <- posthog/queries/funnels/test/conversion_time_cases.py PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_advanced_funnel_multiple_exclusions_between_steps PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_basic_unordered_funnel PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_basic_unordered_funnel_conversion_times PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_big_multi_step_unordered_funnel PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_funnel_exclusions_full_window PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_funnel_exclusions_invalid_params PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_funnel_unordered_all_events_with_properties PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered.py::TestFunnelUnorderedSteps::test_single_event_unordered_funnel PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered_persons.py::TestFunnelUnorderedStepsPersons::test_first_step PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered_persons.py::TestFunnelUnorderedStepsPersons::test_invalid_steps PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered_persons.py::TestFunnelUnorderedStepsPersons::test_last_step PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered_persons.py::TestFunnelUnorderedStepsPersons::test_last_step_dropoff PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered_persons.py::TestFunnelUnorderedStepsPersons::test_second_step_dropoff PASSED [ 65%]
posthog/queries/funnels/test/test_funnel_unordered_persons.py::TestFunnelUnorderedStepsPersons::test_unordered_funnel_does_not_return_recordings PASSED [ 65%]
posthog/queries/funnels/test/test_utils.py::TestGetFunnelOrderClass::test_filter_missing_order PASSED [ 65%]
posthog/queries/funnels/test/test_utils.py::TestGetFunnelOrderClass::test_ordered PASSED [ 65%]
posthog/queries/funnels/test/test_utils.py::TestGetFunnelOrderClass::test_strict PASSED [ 65%]
posthog/queries/funnels/test/test_utils.py::TestGetFunnelOrderClass::test_unordered PASSED [ 65%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_chunked_snapshots PASSED [ 65%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_chunked_snapshots_with_specific_limit_and_offset PASSED [ 65%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_metadata PASSED [ 65%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_metadata_does_not_leak_teams PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_metadata_for_non_existant_session_id PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_snapshots PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_snapshots_does_not_leak_teams PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_snapshots_with_date_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_get_snapshots_with_no_such_session PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording.py::TestClickhouseSessionRecording::test_should_parse_metadata_efficiently PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_action_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_all_filters_at_once PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_all_sessions_recording_object_keys PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_all_sessions_recording_object_keys_with_entity_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_any_event_filter_with_properties PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_basic_query PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_date_from_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_date_to_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_duration_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_duration_is_calculated_from_summary PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_filter_with_cohort_properties PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_filter_with_hogql_properties PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_filter_with_matching_on_session_id PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_filter_with_person_properties PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_event_filter_with_properties PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_multiple_event_filters PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_pagination PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_person_id_filter PASSED [ 66%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_recording_that_spans_time_bounds PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_recording_without_fullsnapshot_dont_appear PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_recordings_dont_leak_data_between_teams PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsList::test_teams_dont_leak_event_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_action_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_all_filters_at_once PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_all_sessions_recording_object_keys PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_all_sessions_recording_object_keys_with_entity_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_any_event_filter_with_properties PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_basic_query PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_date_from_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_date_to_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_duration_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_event_duration_is_calculated_from_summary PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_event_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_event_filter_with_cohort_properties PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_event_filter_with_matching_on_session_id PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_event_filter_with_person_properties PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_event_filter_with_properties PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_multiple_event_filters PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_pagination PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_person_id_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_recording_that_spans_time_bounds PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_recording_without_fullsnapshot_dont_appear PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_recordings_dont_leak_data_between_teams PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list.py::TestClickhouseSessionRecordingsListV2::test_teams_dont_leak_event_filter PASSED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_action_filter FAILED [ 67%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_all_filters_at_once PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_all_sessions_recording_object_keys_with_entity_filter PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_any_event_filter_with_properties PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_basic_query PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_basic_query_active_sessions PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_basic_query_with_paging PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_date_from_filter PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_date_from_filter_cannot_search_before_ttl PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_date_to_filter PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_duration_filter PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter_with_active_sessions PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter_with_cohort_properties PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter_with_hogql_properties SKIPPED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter_with_matching_on_session_id PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter_with_person_properties PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_event_filter_with_properties PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_filter_for_recordings_with_console_errors PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_filter_for_recordings_with_console_logs PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_filter_for_recordings_with_console_warns PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_filter_for_recordings_with_mixed_console_counts PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_first_url_selection PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_multiple_event_filters PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_person_id_filter PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_recording_that_spans_time_bounds PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_recordings_dont_leak_data_between_teams PASSED [ 68%]
posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_teams_dont_leak_event_filter PASSED [ 69%]
posthog/queries/session_recordings/test/test_session_recording_properties.py::TestSessionRecordingProperties::test_properties_list PASSED [ 69%]
posthog/queries/session_recordings/test/test_session_replay_summaries.py::TestReceiveSummarizedSessionReplays::test_session_replay_summaries_can_be_queried PASSED [ 69%]
posthog/queries/test/test_base.py::TestBase::test_determine_compared_filter PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_properties_exact PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_properties_icontains PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_properties_is_set PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_properties_math_operators PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_properties_not_in PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_properties_regex PASSED [ 69%]
posthog/queries/test/test_base.py::TestMatchProperties::test_match_property_date_operators PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_filter_test_accounts PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_action PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_all_time PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_any_event PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_months PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_people PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_people_paginated PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_person_prop_filtering PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_prop_filtering PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_weeks PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trend_with_zero_person_ids PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_lifecycle_trends_distinct_id_repeat PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_sampling PASSED [ 69%]
posthog/queries/test/test_lifecycle.py::TestLifecycle::test_timezones PASSED [ 69%]
posthog/queries/test/test_paths.py::TestPaths::test_current_url_paths_and_logic PASSED [ 69%]
posthog/queries/test/test_paths.py::TestPaths::test_custom_event_paths PASSED [ 70%]
posthog/queries/test/test_paths.py::TestPaths::test_custom_hogql_paths PASSED [ 70%]
posthog/queries/test/test_paths.py::TestPaths::test_paths_in_window PASSED [ 70%]
posthog/queries/test/test_paths.py::TestPaths::test_paths_properties_filter PASSED [ 70%]
posthog/queries/test/test_paths.py::TestPaths::test_paths_start PASSED   [ 70%]
posthog/queries/test/test_paths.py::TestPaths::test_screen_paths PASSED  [ 70%]
posthog/queries/test/test_query_date_range.py::TestQueryDateRange::test_interval_annotation PASSED [ 70%]
posthog/queries/test/test_query_date_range.py::TestQueryDateRange::test_is_hourly PASSED [ 70%]
posthog/queries/test/test_query_date_range.py::TestQueryDateRange::test_parsed_date PASSED [ 70%]
posthog/queries/test/test_query_date_range.py::TestQueryDateRange::test_parsed_date_hour PASSED [ 70%]
posthog/queries/test/test_query_date_range.py::TestQueryDateRange::test_parsed_date_middle_of_hour PASSED [ 70%]
posthog/queries/test/test_query_date_range.py::TestQueryDateRange::test_parsed_date_week_rounded PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_day_interval PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_day_interval_sampled PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_filter_test_accounts PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_first_time_retention PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_hour_interval PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_interval_rounding PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_month_interval PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_month_interval_with_person_on_events_v2 PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_action_start_point PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_aggregate_by_distinct_id PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_any_event PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_default PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_event_action PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_invalid_properties PASSED [ 70%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_multiple_events PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_people_basic PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_people_first_time PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_people_in_perieod_first_time PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_people_in_period PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_people_paginated PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_with_properties PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_with_user_properties PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_retention_with_user_properties_via_action PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_timezones PASSED [ 71%]
posthog/queries/test/test_retention.py::TestFOSSRetention::test_week_interval PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_action_filtering PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_action_filtering_with_cohort PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_action_filtering_with_cohort_poe_v2 <- posthog/test/base.py PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_action_with_prop PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_against_clashing_entity_and_property_filter_naming PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_all_time_timerange PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_avg_filtering PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_avg_filtering_non_number_resiliency PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_bar_chart_by_value PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_cohort PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_cohort_poe_v2 <- posthog/test/base.py PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_empty_cohort PASSED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props FAILED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props_person_on_events FAILED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props_with_person_filter FAILED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props_with_person_filter_person_on_events FAILED [ 71%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_person_property PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_person_property_for_person_on_events PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_person_property_for_person_on_events_with_zero_person_ids PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_person_property_pie PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_property_pie PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filter_by_precalculated_cohort PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filter_by_precalculated_cohort_poe_v2 <- posthog/test/base.py PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering_bar_chart_by_value PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering_limit PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering_persons PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering_persons_with_action_props PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering_with_properties PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_filtering_with_properties_in_new_format PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_label PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_multiple_cohorts PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_single_cohort PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_user_props_with_filter PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_weekly_active_users_aggregated PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_weekly_active_users_daily PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_weekly_active_users_daily_based_on_action PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter_groups FAILED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter_groups_person_on_events FAILED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter_groups_person_on_events_v2 FAILED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_person_property_filter PASSED [ 72%]
posthog/queries/test/test_trends.py::TestTrends::test_combine_all_cohort_and_icontains PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_custom_range_timerange PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_dau_filtering PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_dau_with_breakdown_filtering PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_dau_with_breakdown_filtering_with_prop_filter PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_dau_with_breakdown_filtering_with_sampling PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_day_interval PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_entity_person_property_filtering PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_by_precalculated_cohort PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_events_by_cohort PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_events_by_cohort_poe_v2 <- posthog/test/base.py PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_events_by_precalculated_cohort PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_events_by_precalculated_cohort_poe_v2 <- posthog/test/base.py PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_test_accounts PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filter_test_accounts_cohorts PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filtering_by_multiple_groups_person_on_events FAILED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_action_props PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_group_props FAILED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_group_props_event_with_no_group_data FAILED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_group_props_person_on_events FAILED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_hour_interval PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_ilike_regression_with_current_clickhouse_version PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_interval_filtering PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_interval_filtering_breakdown PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_interval_rounding PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_interval_rounding_monthly PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_last14days_timerange PASSED [ 73%]
posthog/queries/test/test_trends.py::TestTrends::test_last24hours_timerange PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_last30days_timerange PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_last48hours_timerange PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_last7days_timerange PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_last90days_timerange PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_mau_with_breakdown_filtering_and_prop_filter PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_mau_with_breakdown_filtering_and_prop_filter_poe_v2 <- posthog/test/base.py PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_max_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_median_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_min_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_month_interval PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_no_props PASSED    [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_non_deterministic_timezones PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_p90_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_p95_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_p99_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_per_entity_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_person_filtering_in_cohort_in_action PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_person_filtering_in_cohort_in_action_poe_v2 <- posthog/test/base.py PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_person_property_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_person_property_filtering_clashing_with_event_property PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_previous_month_timerange PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_property_filtering PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_response_empty_if_no_events PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_same_day PASSED    [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_same_day_with_person_on_events_v2 PASSED [ 74%]
posthog/queries/test/test_trends.py::TestTrends::test_same_day_with_person_on_events_v2_latest_override PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_should_throw_exception PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_sum_filtering PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_this_month_timerange PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_daily PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_daily_minus_utc <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_daily_plus_utc <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_hourly PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_hourly_minus_utc <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_hourly_plus_utc <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_weekly PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_weekly_minus_utc <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_timezones_weekly_plus_utc <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_today_timerange PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trend_actors_person_on_events_pagination_with_alias_inconsistencies PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trend_breakdown_user_props_with_filter_with_partial_property_pushdowns PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_aggregate_by_distinct_id PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_any_event_total_count PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_cumulative PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_cumulative_poe_v2 <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_single_aggregate PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_single_aggregate_cohorts PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_single_aggregate_cohorts_poe_v2 <- posthog/test/base.py PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_single_aggregate_math PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_single_aggregate_with_zero_person_ids PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_timezone PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_with_math_func PASSED [ 75%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_breakdown_with_session_property_single_aggregate_math_and_breakdown PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_compare_day_interval_fixed_range_single PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_compare_day_interval_relative_range PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_compare_hour_interval_relative_range PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_group_average_aggregated PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_group_average_daily PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_aggregated PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_aggregated_poe_v2 <- posthog/test/base.py PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_aggregated_with_event_property_breakdown PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_aggregated_with_event_property_breakdown_with_sampling PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_daily PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_daily_poe_v2 <- posthog/test/base.py PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_weekly PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_with_event_property_breakdown PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_average_with_person_property_breakdown PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_count_per_user_maximum PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_for_non_existing_action PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_groups_per_day_cumulative PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_math_without_math_property PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_per_day PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_per_day_48hours PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_per_day_cumulative PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_person_breakdown_with_session_property_single_aggregate_math_and_breakdown PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_regression_filtering_by_action_with_person_properties PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_single_aggregate_dau PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_single_aggregate_math PASSED [ 76%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_with_hogql_math FAILED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_with_session_property_single_aggregate_math PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_with_session_property_total_volume_math PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_with_session_property_total_volume_math_with_breakdowns PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_trends_with_session_property_total_volume_math_with_sessions_spanning_multiple_intervals PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_unique_session_with_session_breakdown PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_week_interval PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_aggregated_range_narrower_than_week PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_aggregated_range_wider_than_week PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_aggregated_range_wider_than_week_with_sampling PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily_based_on_action PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily_based_on_action_minus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily_based_on_action_plus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily_based_on_action_with_zero_person_ids PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily_minus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_daily_plus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_filtering PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_hourly PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_monthly PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_monthly_minus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_monthly_plus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_weekly PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_weekly_minus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_weekly_active_users_weekly_plus_utc <- posthog/test/base.py PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_year_to_date_timerange PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrends::test_yesterday_timerange PASSED [ 77%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_get_cached_result_bad_cache PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_get_cached_result_day PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_get_cached_result_hour PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_get_cached_result_month PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_get_cached_result_no_cache PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_get_cached_result_week PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_merge_result PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_merge_result_multiple PASSED [ 78%]
posthog/queries/test/test_trends.py::TestTrendUtils::test_merge_result_no_cache PASSED [ 78%]
posthog/queries/test/test_util.py::TestQueriesUtil::test_correct_resullt_for_sampling PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_event_property_of_unique_sessions_with_bucketing PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_event_property_with_bucketing PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_event_property_with_bucketing_and_duplicate_buckets PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_event_property_with_bucketing_and_single_bucket PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_event_property_with_entity_session_filter PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_session_duration_of_events PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_session_duration_of_events_single_aggregate PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_session_duration_of_events_with_bucketing PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_session_duration_of_unique_sessions PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_by_session_duration_of_unique_sessions_with_bucketing PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns.py::TestBreakdowns::test_breakdown_histogram_by_missing_property_regression PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns_by_current_url.py::TestBreakdownsByCurrentURL::test_breakdown_by_current_url PASSED [ 78%]
posthog/queries/trends/test/test_breakdowns_by_current_url.py::TestBreakdownsByCurrentURL::test_breakdown_by_pathname PASSED [ 78%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_aggregated PASSED [ 78%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_aggregated_one_without_events PASSED [ 78%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown PASSED [ 78%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_aggregated PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_cohort PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_counts_of_different_events_one_without_events PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_hogql FAILED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_mismatching_sizes PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_with_different_breakdown_values_per_series PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_compare PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_cumulative PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_day_interval PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_event_properties PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_formula PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_formula_with_unique_sessions PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_global_properties PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_group_formulas PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_hour_interval PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_month_interval PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_multiple_events PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_properties_with_escape_params PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_regression_formula_with_unique_sessions_2x_and_duration_filter PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_session_formulas PASSED [ 79%]
posthog/queries/trends/test/test_formula.py::TestFormula::test_week_interval PASSED [ 79%]
posthog/queries/trends/test/test_paging_breakdowns.py::TestPagingBreakdowns::test_with_breakdown_loads_two_unqiue_pages_of_values PASSED [ 79%]
posthog/queries/trends/test/test_paging_breakdowns.py::TestPagingBreakdowns::test_without_breakdown PASSED [ 79%]
posthog/queries/trends/test/test_person.py::TestPerson::test_group_query_includes_recording_events FAILED [ 79%]
posthog/queries/trends/test/test_person.py::TestPerson::test_person_query_does_not_include_recording_events_if_flag_not_set PASSED [ 79%]
posthog/queries/trends/test/test_person.py::TestPerson::test_person_query_includes_recording_events PASSED [ 79%]
posthog/storage/test/test_object_storage.py::TestStorage::test_can_generate_presigned_url_for_existing_file PASSED [ 79%]
posthog/storage/test/test_object_storage.py::TestStorage::test_can_generate_presigned_url_for_non_existent_file PASSED [ 80%]
posthog/storage/test/test_object_storage.py::TestStorage::test_can_list_objects_with_prefix PASSED [ 80%]
posthog/storage/test/test_object_storage.py::TestStorage::test_can_list_unknown_prefix PASSED [ 80%]
posthog/storage/test/test_object_storage.py::TestStorage::test_does_not_create_client_if_storage_is_disabled PASSED [ 80%]
posthog/storage/test/test_object_storage.py::TestStorage::test_write_and_read_works_with_known_byte_content PASSED [ 80%]
posthog/storage/test/test_object_storage.py::TestStorage::test_write_and_read_works_with_known_content PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_does_filter_columns PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_does_filter_columns_and_can_handle_unexpected_columns PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_does_not_filter_columns_on_empty_param PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_events_query PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_hogql_query PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_writes_to_asset_when_object_storage_is_disabled PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_writes_to_asset_when_object_storage_write_fails PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_csv_exporter_writes_to_object_storage_when_object_storage_is_enabled PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_failing_export_api_is_reported PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_limiting_existing_limit_query_as_expected PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_limiting_query_as_expected PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter.py::TestCSVExporter::test_raises_expected_error_when_json_is_none PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[retention_breakdown.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[people.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[trends_formula.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[funnels.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[retention.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[funnels_breakdown.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[events_query.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[trends.json] PASSED [ 80%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[funnels_historic_trends.json] PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[persons_modal.json] PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_renders.py::test_csv_rendering[persons_modal_retention.json] PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_next_url_0_changing_scheme PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_next_url_1_changing_port PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_next_url_2_changing_port_and_url PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_next_url_3_changing_domain PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_paths_0_changing_scheme PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_paths_1_changing_port PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_paths_2_changing_port_and_url PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitise_url_error_cases_as_paths_3_changing_domain PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitize_url_when_provided_path PASSED [ 81%]
posthog/tasks/exports/test/test_csv_exporter_url_sanitising.py::TestCSVExporterURLSanitization::test_sanitize_url_when_provided_path_and_site_url_has_a_port PASSED [ 81%]
posthog/tasks/exports/test/test_image_exporter.py::TestImageExporter::test_image_exporter_writes_to_asset_when_object_storage_is_disabled PASSED [ 81%]
posthog/tasks/exports/test/test_image_exporter.py::TestImageExporter::test_image_exporter_writes_to_object_storage_when_object_storage_is_enabled PASSED [ 81%]
posthog/tasks/exports/test/test_image_exporter.py::TestImageExporter::test_image_exporter_writes_to_object_storage_when_object_storage_write_fails PASSED [ 81%]
posthog/tasks/test/test_async_migrations.py::TestAsyncMigrations::test_check_async_migration_health_during_non_resumable_op PASSED [ 81%]
posthog/tasks/test/test_async_migrations.py::TestAsyncMigrations::test_check_async_migration_health_during_resumable_op PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_action_without_id_is_safe PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_calculate_usage PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_calculate_usage_does_not_double_count_on_second_run PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_complete_inference PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_event_and_property_definition_with_empty_name_is_safe PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_recency_check_makes_subsequent_run_do_nothing PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_updating_event_properties_or_related_updates_property_definitions PASSED [ 81%]
posthog/tasks/test/test_calculate_event_property_usage.py::TestCalculateEventPropertyUsage::test_updating_team_events_or_related_updates_event_definitions PASSED [ 81%]
posthog/tasks/test/test_email.py::TestEmail::test_send_async_migration_complete_email PASSED [ 81%]
posthog/tasks/test/test_email.py::TestEmail::test_send_async_migration_errored_email PASSED [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_canary_email PASSED [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_email_verification PASSED [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_fatal_plugin_error PASSED [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_fatal_plugin_error_with_settings PASSED [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_invite PASSED     [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_member_join PASSED [ 82%]
posthog/tasks/test/test_email.py::TestEmail::test_send_password_reset PASSED [ 82%]
posthog/tasks/test/test_exporter.py::TestExporterTask::test_exporter_runs PASSED [ 82%]
posthog/tasks/test/test_exporter.py::TestExporterTask::test_exporter_setsup_selenium PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_prepare_dictionary FAILED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_prepare_dictionary_with_older_overrides_present PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_drop_dictionary PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_select_persons_to_delete PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_select_persons_to_delete_selects_persons_in_older_partitions PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_select_persons_to_squash_with_empty_table PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_select_persons_to_squash_with_different_partition PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_select_persons_to_delete_with_newer_merges PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_events_partition PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_events_partition_dry_run PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_events_partition_with_older_overrides PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_events_partition_with_newer_overrides PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_events_partition_with_limited_team_ids PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_delete_squashed_person_overrides_from_clickhouse PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_delete_squashed_person_overrides_from_clickhouse_dry_run PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_delete_squashed_person_overrides_from_postgres PASSED [ 82%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_delete_squashed_person_overrides_from_postgres_dry_run PASSED [ 83%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_delete_squashed_person_overrides_from_postgres_with_newer_override PASSED [ 83%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_person_overrides_workflow FAILED [ 83%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_person_overrides_workflow_with_newer_overrides FAILED [ 83%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_person_overrides_workflow_with_limited_team_ids FAILED [ 83%]
posthog/temporal/tests/batch_exports/test_s3_batch_export_workflow.py::test_insert_into_s3_activity_puts_data_into_s3 PASSED [ 83%]
posthog/temporal/tests/batch_exports/test_s3_batch_export_workflow.py::test_s3_export_workflow_with_minio_bucket PASSED [ 83%]
posthog/temporal/tests/batch_exports/test_snowflake_batch_export_workflow.py::test_snowflake_export_workflow_exports_events_in_the_last_hour_for_the_right_team PASSED [ 83%]
posthog/temporal/tests/batch_exports/test_snowflake_batch_export_workflow.py::test_snowflake_export_workflow_raises_error_on_put_fail PASSED [ 83%]
posthog/temporal/tests/batch_exports/test_snowflake_batch_export_workflow.py::test_snowflake_export_workflow_raises_error_on_copy_fail PASSED [ 83%]
posthog/test/test_cache_utils.py::TestCacheUtils::test_background_cache_refresh PASSED [ 83%]
posthog/test/test_cache_utils.py::TestCacheUtils::test_cache_for_with_different_passed_arguments_styles_when_caching PASSED [ 83%]
posthog/test/test_cache_utils.py::TestCacheUtils::test_cache_for_with_different_passed_arguments_styles_when_skipping_cache PASSED [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_calculating_cohort_clickhouse PASSED [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_empty_query PASSED   [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_group_to_property_conversion PASSED [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_group_to_property_conversion_with_missing_days_and_invalid_count PASSED [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_group_to_property_conversion_with_valid_zero_count PASSED [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_group_to_property_conversion_with_valid_zero_count_different_operator PASSED [ 83%]
posthog/test/test_cohort_model.py::TestCohort::test_insert_by_distinct_id_or_email PASSED [ 83%]
posthog/test/test_database_healthcheck.py::TestDatabaseHealthcheck::test_healthcheck PASSED [ 83%]
posthog/test/test_database_healthcheck.py::TestDatabaseHealthcheck::test_set_is_connected PASSED [ 83%]
posthog/test/test_dbrouter.py::TestReplicaRouter::test_opted_in_models_are_replica_routed PASSED [ 83%]
posthog/test/test_element_model.py::TestElement::test_broken_class_names PASSED [ 83%]
posthog/test/test_element_model.py::TestElement::test_elements_to_string PASSED [ 83%]
posthog/test/test_email.py::TestEmail::test_applies_default_utm_tags PASSED [ 83%]
posthog/test/test_email.py::TestEmail::test_cant_send_emails_if_not_properly_configured PASSED [ 83%]
posthog/test/test_email.py::TestEmail::test_cant_send_same_campaign_twice PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_behavioral_cohorts PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_cohort_expansion PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_cohort_expansion_multiple_properties PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_cohort_expansion_with_negation PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_cohort_property_group PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_cohort_thats_impossible_to_expand PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_complex_cohort_expansion_that_is_simplified_via_clearing_excess_levels PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_feature_flag_preventing_simple_cohort_expansion PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_feature_flag_with_additional_conditions_playing_well_with_complex_cohort_expansion PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagCohortExpansion::test_multiple_cohorts PASSED [ 84%]
posthog/test/test_feature_flag.py::TestModelCache::test_save_updates_cache PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_blank_flag PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_coercion_of_booleans PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_coercion_of_strings_and_numbers PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_cohort_cache_no_unnecessary_queries PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_cohort_expansion_returns_same_result_as_regular_flag PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_cohort_filters_with_multiple_OR_override_properties PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_cohort_filters_with_override_properties PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_complex_cohort_filter_with_override_properties SKIPPED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_complicated_flag PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_db_matches_independent_of_string_or_number_type PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_empty_group PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_by_group_properties PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_by_groups_with_rollout_100 PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_by_groups_with_rollout_50 PASSED [ 84%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_with_clashing_variant_overrides PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_with_invalid_variant_overrides PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_with_multiple_variant_overrides PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_flag_with_variant_overrides PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_invalid_filters_dont_set_db_down PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_legacy_property_filters PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_legacy_rollout_and_property_filter PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_legacy_rollout_percentage PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_legacy_user_in_cohort PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_multi_property_filters PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_multi_property_filters_with_override_group_properties PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_multi_property_filters_with_override_properties PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_multi_property_filters_with_override_properties_with_is_not_set PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_multiple_flags PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_null_rollout_percentage PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_override_properties_where_person_doesnt_exist_yet PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_override_properties_where_person_doesnt_exist_yet_multiple_conditions PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_rollout_percentage PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_is_not_set PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_matches_and_false PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_matches_boolean PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_matches_string PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_promoted PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_rolled_out_to_50 PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_with_override_properties PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_with_override_properties_doesnt_make_database_requests SKIPPED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_super_condition_with_override_properties_with_property_not_ingested PASSED [ 85%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_user_in_cohort PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_user_in_cohort_without_calculation PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_user_in_static_cohort PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_variants PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcher::test_zero_rollout_percentage PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagHashKeyOverrides::test_entire_flow_with_hash_key_override PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagHashKeyOverrides::test_hash_key_overrides_for_multiple_ids_when_people_are_not_merged PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagHashKeyOverrides::test_retrieving_hash_key_overrides PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagHashKeyOverrides::test_setting_overrides PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagHashKeyOverrides::test_setting_overrides_doesnt_balk_with_existing_overrides PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagHashKeyOverrides::test_setting_overrides_when_persons_dont_exist PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcherConsistency::test_multivariate_flag_consistency PASSED [ 86%]
posthog/test/test_feature_flag.py::TestFeatureFlagMatcherConsistency::test_simple_flag_consistency PASSED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestFeatureFlagAnalytics::test_capture_team_decide_usage PASSED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestFeatureFlagAnalytics::test_increment_request_count_adds_requests_to_appropriate_buckets PASSED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestFeatureFlagAnalytics::test_locking_in_redis_doesnt_block_new_incoming_increments SKIPPED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestFeatureFlagAnalytics::test_locking_works_for_capture_team_decide_usage SKIPPED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestFeatureFlagAnalytics::test_no_interference_between_different_types_of_new_incoming_increments SKIPPED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestFeatureFlagAnalytics::test_no_token_loses_capture_team_decide_usage_data PASSED [ 86%]
posthog/test/test_feature_flag_analytics.py::TestEnrichedAnalytics::test_find_flags_with_enriched_analytics PASSED [ 86%]
posthog/test/test_gzip_middleware.py::TestGzipMiddleware::test_compresses_when_on_allow_list SKIPPED [ 86%]
posthog/test/test_gzip_middleware.py::TestGzipMiddleware::test_does_not_compress_outside_of_allow_list PASSED [ 86%]
posthog/test/test_gzip_middleware.py::TestGzipMiddleware::test_no_compression_for_unsuccessful_requests_to_paths_on_the_allow_list PASSED [ 86%]
posthog/test/test_gzip_middleware.py::TestGzipMiddleware::test_no_compression_when_allow_list_is_empty PASSED [ 86%]
posthog/test/test_gzip_middleware.py::TestGzipMiddleware::test_sensible_error_if_bad_pattern PASSED [ 86%]
posthog/test/test_health.py::test_readyz_returns_200_if_everything_is_ok PASSED [ 86%]
posthog/test/test_health.py::test_readyz_supports_excluding_checks PASSED [ 87%]
posthog/test/test_health.py::test_readyz_accepts_role_events_and_filters_by_relevant_services PASSED [ 87%]
posthog/test/test_health.py::test_readyz_accepts_role_web_and_filters_by_relevant_services PASSED [ 87%]
posthog/test/test_health.py::test_readyz_accepts_role_worker_and_filters_by_relevant_services PASSED [ 87%]
posthog/test/test_health.py::test_readyz_accepts_no_role_and_fails_on_everything PASSED [ 87%]
posthog/test/test_health.py::test_readyz_accepts_role_decide_and_filters_by_relevant_services PASSED [ 87%]
posthog/test/test_health.py::test_readyz_complains_if_role_does_not_exist PASSED [ 87%]
posthog/test/test_instance_setting_model.py::test_unknown_key_raises PASSED [ 87%]
posthog/test/test_instance_setting_model.py::test_initial_value_and_overriding PASSED [ 87%]
posthog/test/test_instance_setting_model.py::test_model_creation PASSED  [ 87%]
posthog/test/test_instance_setting_model.py::test_override_constance_config PASSED [ 87%]
posthog/test/test_instance_setting_model.py::test_can_retrieve_multiple_settings PASSED [ 87%]
posthog/test/test_middleware.py::TestAccessMiddleware::test_attempt_spoofing PASSED [ 87%]
posthog/test/test_middleware.py::TestAccessMiddleware::test_ip_range PASSED [ 87%]
posthog/test/test_middleware.py::TestAccessMiddleware::test_trust_all_proxies PASSED [ 87%]
posthog/test/test_middleware.py::TestAccessMiddleware::test_trusted_proxies PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_action_of_another_accessible_team PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_cohort_of_another_accessible_team PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_dashboard_of_another_accessible_team FAILED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_dashboard_of_another_accessible_team_with_trailing_slash PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_feature_flag_of_another_accessible_team FAILED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_insight_edit_mode_of_another_accessible_team PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_insight_of_another_accessible_team PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_unchanged_when_accessing_dashboard_of_another_off_limits_team PASSED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_unchanged_when_accessing_dashboards_list FAILED [ 87%]
posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_unchanged_when_creating_feature_flag FAILED [ 87%]
posthog/test/test_middleware.py::TestPostHogTokenCookieMiddleware::test_logged_in_client FAILED [ 87%]
posthog/test/test_middleware.py::TestPostHogTokenCookieMiddleware::test_logged_out_client PASSED [ 88%]
posthog/test/test_middleware.py::TestPostHogTokenCookieMiddleware::test_logout FAILED [ 88%]
posthog/test/test_middleware.py::TestPostHogTokenCookieMiddleware::test_ph_project_cookies_are_not_set_on_capture_or_api_endpoints PASSED [ 88%]
posthog/test/test_migration_0219.py::TagsTestCase::test_tags_migrated SKIPPED [ 88%]
posthog/test/test_migration_0220.py::TagsTestCase::test_backfill_primary_dashboard SKIPPED [ 88%]
posthog/test/test_migration_0222.py::DeletedPrimaryDashboardTestCase::test_backfill_primary_dashboard SKIPPED [ 88%]
posthog/test/test_migration_0227.py::CreatingDashboardTilesTestCase::test_migrate_to_create_tiles SKIPPED [ 88%]
posthog/test/test_migration_0228.py::FixingDashboardTilesTestCase::test_migrate_to_create_tiles SKIPPED [ 88%]
posthog/test/test_migration_0259.py::RecordingDomainMigrationTestCase::test_backfill_recording_domain SKIPPED [ 88%]
posthog/test/test_migration_0273.py::MarkInactiveExportsAsFinished::test_migration PASSED [ 88%]
posthog/test/test_plugin.py::TestPlugin::test_default_config_dict PASSED [ 88%]
posthog/test/test_plugin.py::TestPlugin::test_default_config_list PASSED [ 88%]
posthog/test/test_plugin.py::TestPlugin::test_validate_plugin_job_payload PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_no_archive_fails PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_tgz_with_explicit_index_js_works PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_zip_with_explicit_index_js_works PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_zip_with_index_ts_works PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_zip_without_any_code_fails PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_zip_without_index_ts_but_frontend_tsx_works PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_zip_without_index_ts_but_site_Ts_works PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_from_zip_without_plugin_js_fails PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_twice_from_zip_with_index_ts_replaced_by_frontend_tsx_works PASSED [ 88%]
posthog/test/test_plugin.py::TestPluginSourceFile::test_sync_from_plugin_archive_with_subdir_works PASSED [ 88%]
posthog/test/test_plugin_log_entry.py::TestPluginLogEntry::test_log_limit_works PASSED [ 88%]
posthog/test/test_plugin_log_entry.py::TestPluginLogEntry::test_log_search_works PASSED [ 88%]
posthog/test/test_plugin_log_entry.py::TestPluginLogEntry::test_log_type_filter_works PASSED [ 88%]
posthog/test/test_plugin_log_entry.py::TestPluginLogEntry::test_simple_log_is_fetched PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_allow_list_works_as_expected PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_clickhouse_burst_rate_limit PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_default_burst_rate_limit PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_default_sustained_rate_limit PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_does_not_call_get_instance_setting_for_every_request PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_does_not_rate_limit_capture_endpoints PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_does_not_rate_limit_decide_endpoints PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_does_not_rate_limit_if_rate_limit_disabled PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_does_not_rate_limit_non_personal_api_key_endpoints PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_rate_limits_are_based_on_the_team_not_user PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_rate_limits_unauthenticated_users PASSED [ 89%]
posthog/test/test_rate_limit.py::TestUserAPI::test_rate_limits_work_on_non_team_endpoints PASSED [ 89%]
posthog/test/test_redis.py::TestRedis::test_redis_client_is_cached_between_calls PASSED [ 89%]
posthog/test/test_redis.py::TestRedis::test_redis_client_is_created PASSED [ 89%]
posthog/test/test_redis.py::TestRedis::test_redis_client_uses_given_url PASSED [ 89%]
posthog/test/test_team.py::TestModelCache::test_save_updates_cache PASSED [ 89%]
posthog/test/test_team.py::TestTeam::test_create_team_sets_primary_dashboard PASSED [ 89%]
posthog/test/test_team.py::TestTeam::test_create_team_with_test_account_filters PASSED [ 89%]
posthog/test/test_team.py::TestTeam::test_preinstalled_are_autoenabled PASSED [ 89%]
posthog/test/test_team.py::TestTeam::test_team_has_expected_defaults PASSED [ 89%]
posthog/test/test_team.py::TestTeam::test_team_on_cloud_uses_feature_flag_to_determine_person_on_events FAILED [ 89%]
posthog/test/test_team.py::TestTeam::test_team_on_self_hosted_uses_instance_setting_to_determine_person_on_events PASSED [ 89%]
posthog/test/test_templatetags.py::TestTemplateTags::test_compact_number PASSED [ 89%]
posthog/test/test_templatetags.py::TestTemplateTags::test_percentage PASSED [ 89%]
posthog/test/test_urls.py::TestUrls::test_authorize_and_redirect_domain PASSED [ 89%]
posthog/test/test_urls.py::TestUrls::test_logged_out_user_is_redirected_to_login PASSED [ 89%]
posthog/test/test_urls.py::TestUrls::test_logout_temporary_token_reset PASSED [ 90%]
posthog/test/test_urls.py::TestUrls::test_unauthenticated_routes_get_loaded_on_the_frontend PASSED [ 90%]
posthog/test/test_utils.py::TestAbsoluteUrls::test_absolute_uri_can_not_escape_out_host PASSED [ 90%]
posthog/test/test_utils.py::TestAbsoluteUrls::test_absolute_uri_can_not_escape_out_host_on_different_scheme PASSED [ 90%]
posthog/test/test_utils.py::TestAbsoluteUrls::test_absolute_uri_can_not_escape_out_host_when_site_url_is_the_empty_string PASSED [ 90%]
posthog/test/test_utils.py::TestAbsoluteUrls::test_format_absolute_url PASSED [ 90%]
posthog/test/test_utils.py::TestFormatUrls::test_format_query_params_absolute_url PASSED [ 90%]
posthog/test/test_utils.py::TestFormatUrls::test_format_query_params_absolute_url_with_https PASSED [ 90%]
posthog/test/test_utils.py::TestGeneralUtils::test_available_timezones PASSED [ 90%]
posthog/test/test_utils.py::TestGeneralUtils::test_fetching_env_var_parsed_as_float PASSED [ 90%]
posthog/test/test_utils.py::TestGeneralUtils::test_fetching_env_var_parsed_as_float_from_nonsense_input PASSED [ 90%]
posthog/test/test_utils.py::TestGeneralUtils::test_fetching_env_var_parsed_as_int PASSED [ 90%]
posthog/test/test_utils.py::TestRelativeDateParse::test_day PASSED       [ 90%]
posthog/test/test_utils.py::TestRelativeDateParse::test_hour PASSED      [ 90%]
posthog/test/test_utils.py::TestRelativeDateParse::test_month PASSED     [ 90%]
posthog/test/test_utils.py::TestRelativeDateParse::test_normal_date PASSED [ 90%]
posthog/test/test_utils.py::TestRelativeDateParse::test_year PASSED      [ 90%]
posthog/test/test_utils.py::TestDefaultEventName::test_no_events PASSED  [ 90%]
posthog/test/test_utils.py::TestDefaultEventName::test_prefer_pageview PASSED [ 90%]
posthog/test/test_utils.py::TestDefaultEventName::test_take_screen PASSED [ 90%]
posthog/test/test_utils.py::TestLoadDataFromRequest::test_can_decompress_gzipped_body_received_with_no_compression_flag PASSED [ 90%]
posthog/test/test_utils.py::TestLoadDataFromRequest::test_fails_to_JSON_parse_the_literal_string_undefined_when_not_compressed PASSED [ 90%]
posthog/test/test_utils.py::TestLoadDataFromRequest::test_pushes_debug_information_into_sentry_scope_from_origin_header PASSED [ 90%]
posthog/test/test_utils.py::TestLoadDataFromRequest::test_pushes_debug_information_into_sentry_scope_when_origin_header_not_present PASSED [ 90%]
posthog/test/test_utils.py::TestLoadDataFromRequest::test_raises_specific_error_for_the_literal_string_undefined_when_compressed PASSED [ 90%]
posthog/test/test_utils.py::TestLoadDataFromRequest::test_still_tags_sentry_scope_even_when_debug_signal_is_not_available PASSED [ 90%]
posthog/test/test_utils.py::TestShouldRefresh::test_can_get_period_to_compare_when_interval_is_day PASSED [ 91%]
posthog/test/test_utils.py::TestShouldRefresh::test_refresh_requested_by_client_with_data_true PASSED [ 91%]
posthog/test/test_utils.py::TestShouldRefresh::test_refresh_requested_by_client_with_refresh_empty PASSED [ 91%]
posthog/test/test_utils.py::TestShouldRefresh::test_refresh_requested_by_client_with_refresh_true PASSED [ 91%]
posthog/test/test_utils.py::TestShouldRefresh::test_should_not_refresh_with_data_false PASSED [ 91%]
posthog/test/test_utils.py::TestShouldRefresh::test_should_not_refresh_with_refresh_false PASSED [ 91%]
posthog/test/test_utils.py::TestShouldRefresh::test_should_not_refresh_with_refresh_gibberish PASSED [ 91%]
posthog/test/test_utils.py::TestFlatten::test_flatten_lots_of_depth PASSED [ 91%]
posthog/test/test_utils.py::TestFlatten::test_flatten_single_depth PASSED [ 91%]
posthog/test/test_version_requirement.py::TestServiceVersionRequirement::test_accepted_services PASSED [ 91%]
posthog/test/test_version_requirement.py::TestServiceVersionRequirement::test_ranges PASSED [ 91%]
posthog/test/test_version_requirement.py::TestServiceVersionRequirement::test_service_versions PASSED [ 91%]
posthog/test/activity_logging/test_activity_logging.py::TestActivityLogModel::test_can_not_save_if_there_is_neither_a_team_id_nor_an_organisation_id PASSED [ 91%]
posthog/test/activity_logging/test_activity_logging.py::TestActivityLogModel::test_can_save_a_log_that_has_no_model_changes PASSED [ 91%]
posthog/test/activity_logging/test_activity_logging.py::TestActivityLogModel::test_can_save_a_model_changed_activity_log PASSED [ 91%]
posthog/test/activity_logging/test_activity_logging.py::TestActivityLogModel::test_does_not_save_an_updated_activity_that_has_no_changes PASSED [ 91%]
posthog/test/activity_logging/test_activity_logging.py::TestActivityLogModel::test_does_not_throw_if_cannot_log_activity PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_a_change_of_filters_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_a_change_of_flag_active_status_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_a_change_of_key_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_a_change_of_name_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_a_change_of_rollout_percentage_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_a_change_of_soft_delete_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_adding_a_rollout_percentage_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_can_exclude_changed_fields_in_feature_flags PASSED [ 91%]
posthog/test/activity_logging/test_feature_flag_activity_logging.py::TestChangesBetweenFeatureFlags::test_comparing_two_nothings_results_in_no_changes PASSED [ 91%]
posthog/test/activity_logging/test_insight_activity_logging.py::TestChangesBetweenInsights::test_a_change_of_insight_dashboard_can_be_logged PASSED [ 91%]
posthog/test/activity_logging/test_insight_activity_logging.py::TestChangesBetweenInsights::test_insight_change_of_derived_name_can_be_logged PASSED [ 92%]
posthog/test/activity_logging/test_insight_activity_logging.py::TestChangesBetweenInsights::test_insight_change_of_description_can_be_logged PASSED [ 92%]
posthog/test/activity_logging/test_insight_activity_logging.py::TestChangesBetweenInsights::test_insight_change_of_name_can_be_logged PASSED [ 92%]
posthog/test/activity_logging/test_insight_activity_logging.py::TestChangesBetweenInsights::test_insight_change_of_tags_can_be_logged PASSED [ 92%]
posthog/warehouse/api/test/test_table.py::TestTable::test_create PASSED  [ 92%]
posthog/warehouse/api/test/test_table.py::TestTable::test_credentialerror PASSED [ 92%]
posthog/warehouse/models/test/test_table.py::TestTable::test_hogql_definition PASSED [ 92%]
posthog/warehouse/models/test/test_table.py::TestTable::test_hogql_definition_tuple_patch PASSED [ 92%]
posthog/api/test/test_decide.py::TestDecideUsesReadReplica::test_decide_uses_read_replica SKIPPED [ 92%]
posthog/api/test/test_decide.py::TestDecideUsesReadReplica::test_decide_uses_read_replica_for_cohorts_based_flags SKIPPED [ 92%]
posthog/api/test/test_decide.py::TestDecideUsesReadReplica::test_feature_flags_v2_with_groups SKIPPED [ 92%]
posthog/api/test/test_decide.py::TestDecideUsesReadReplica::test_feature_flags_v3_consistent_flags SKIPPED [ 92%]
posthog/api/test/test_decide.py::TestDecideUsesReadReplica::test_feature_flags_v3_consistent_flags_with_write_on_hash_key_overrides SKIPPED [ 92%]
posthog/api/test/test_decide.py::TestDecideUsesReadReplica::test_healthcheck_uses_read_replica SKIPPED [ 92%]
posthog/api/test/test_feature_flag.py::TestResiliency::test_feature_flags_v3_with_a_working_slow_db PASSED [ 92%]
posthog/api/test/test_feature_flag.py::TestResiliency::test_feature_flags_v3_with_experience_continuity_working_slow_db PASSED [ 92%]
posthog/api/test/test_feature_flag.py::TestResiliency::test_feature_flags_v3_with_group_properties PASSED [ 92%]
posthog/api/test/test_feature_flag.py::TestResiliency::test_feature_flags_v3_with_group_properties_and_slow_db PASSED [ 92%]
posthog/api/test/test_feature_flag.py::TestResiliency::test_feature_flags_v3_with_person_properties PASSED [ 92%]
posthog/api/test/test_feature_flag.py::TestResiliency::test_feature_flags_v3_with_slow_db_doesnt_try_to_compute_conditions_again PASSED [ 92%]
posthog/api/test/batch_exports/test_reset.py::TestReset::test_can_reset_export_run FAILED [ 92%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_allow_consecutive_merges PASSED [ 92%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_allows_duplicate_override_person_id PASSED [ 92%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_allows_override_person_id_as_old_person_id_in_different_teams PASSED [ 92%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_disallows_concurrent_merge PASSED [ 92%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_disallows_concurrent_merge_different_order PASSED [ 92%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_disallows_old_person_id_as_override_person_id PASSED [ 93%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_disallows_override_person_id_as_old_person_id PASSED [ 93%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_disallows_same_old_person_id PASSED [ 93%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_merge PASSED [ 93%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_old_person_id_as_override_person_id_in_different_teams PASSED [ 93%]
posthog/models/test/test_person_override_model.py::TestPersonOverride::test_person_override_same_old_person_id_in_different_teams PASSED [ 93%]
posthog/temporal/tests/batch_exports/test_run_updates.py::RunUpdatesTest::test_create_export_run PASSED [ 93%]
posthog/temporal/tests/batch_exports/test_run_updates.py::RunUpdatesTest::test_update_export_run_status PASSED [ 93%]
posthog/test/test_feature_flag.py::TestHashKeyOverridesRaceConditions::test_hash_key_overrides_with_race_conditions PASSED [ 93%]
posthog/test/test_feature_flag.py::TestHashKeyOverridesRaceConditions::test_hash_key_overrides_with_race_conditions_on_person_creation_and_deletion PASSED [ 93%]
posthog/test/test_feature_flag.py::TestHashKeyOverridesRaceConditions::test_hash_key_overrides_with_simulated_error_race_conditions_on_person_merging PASSED [ 93%]
posthog/test/test_feature_flag.py::TestHashKeyOverridesRaceConditions::test_hash_key_overrides_with_simulated_race_conditions_on_person_merging PASSED [ 93%]
posthog/test/test_migration_0218.py::TaggedItemsUniquenessTest::test_taggeditems_uniqueness SKIPPED [ 93%]
posthog/test/test_migration_0287.py::CreatingSessionRecordingModelMigrationTestCase::test_migrate_to_create_session_recordings FAILED [ 93%]
posthog/api/test/test_geoip.py::test_geoip_results[13.106.122.3-Australia] PASSED [ 93%]
posthog/api/test/test_geoip.py::test_geoip_results[31.28.64.3-United Kingdom] PASSED [ 93%]
posthog/api/test/test_geoip.py::test_geoip_results[2600:6c52:7a00:11c:1b6:b7b0:ea19:6365-United States] PASSED [ 93%]
posthog/api/test/test_sharing.py::test_shared_image_alternative_0_http_localhost_8000_something PASSED [ 93%]
posthog/api/test/test_sharing.py::test_shared_image_alternative_1_http_localhost_8000_something_query_string PASSED [ 93%]
posthog/api/test/test_sharing.py::test_shared_image_alternative_2_http_localhost_8000_something_query_string_another_one PASSED [ 93%]
posthog/api/test/test_sharing.py::test_shared_image_alternative_3_http_localhost_8000_something_query_string_another_one_withhash PASSED [ 93%]
posthog/api/test/test_sharing.py::test_shared_image_alternative_4_http_localhost_8000_something_withhash PASSED [ 93%]
posthog/clickhouse/client/test/test_connection.py::test_connection_pool_creation_without_offline_cluster PASSED [ 93%]
posthog/clickhouse/client/test/test_connection.py::test_connection_pool_creation_with_offline_cluster PASSED [ 93%]
posthog/clickhouse/client/test/test_connection.py::test_connection_pool_creation_with_team_id PASSED [ 93%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[cohortpeople] PASSED [ 93%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_static_cohort] PASSED [ 93%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[events_dead_letter_queue] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[sharded_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[groups] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_overrides] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_distinct_id] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_distinct_id2] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[plugin_log_entries] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[sharded_session_recording_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[sharded_ingestion_warnings] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[sharded_app_metrics] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[sharded_performance_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[sharded_session_replay_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[writable_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[writable_session_recording_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[session_recording_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[ingestion_warnings] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[app_metrics] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[writeable_performance_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[performance_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[session_replay_events] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_events_dead_letter_queue] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_events_json] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_groups] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_person] PASSED [ 94%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_person_overrides] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_person_distinct_id] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_person_distinct_id2] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_plugin_log_entries] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_session_recording_events] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_ingestion_warnings] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_app_metrics] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_performance_events] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[kafka_session_replay_events] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[events_dead_letter_queue_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[events_json_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[groups_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_overrides_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_distinct_id_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[person_distinct_id2_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[plugin_log_entries_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[session_recording_events_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[ingestion_warnings_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[app_metrics_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[performance_events_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query[session_replay_events_mv] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[cohortpeople] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[person_static_cohort] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[events_dead_letter_queue] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[sharded_events] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[groups] PASSED [ 95%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[person] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[person_overrides] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[person_distinct_id] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[person_distinct_id2] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[plugin_log_entries] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[sharded_session_recording_events] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[sharded_ingestion_warnings] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[sharded_app_metrics] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[sharded_performance_events] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_table_query_replicated_and_storage[sharded_session_replay_events] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_events_dead_letter_queue] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_events_json] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_groups] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_person] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_person_overrides] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_person_distinct_id] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_person_distinct_id2] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_plugin_log_entries] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_session_recording_events] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_ingestion_warnings] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_app_metrics] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_performance_events] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_table_with_different_kafka_host[kafka_session_replay_events] PASSED [ 96%]
posthog/clickhouse/test/test_schema.py::test_create_kafka_events_with_disabled_protobuf PASSED [ 96%]
posthog/helpers/tests/test_multi_property_breakdown.py::TestMultiPropertyBreakdown::test_flattens_multi_property_breakdown_for_single_property_requests PASSED [ 96%]
posthog/helpers/tests/test_multi_property_breakdown.py::TestMultiPropertyBreakdown::test_handles_empty_breakdowns_array PASSED [ 96%]
posthog/helpers/tests/test_multi_property_breakdown.py::TestMultiPropertyBreakdown::test_handles_empty_inputs PASSED [ 97%]
posthog/helpers/tests/test_multi_property_breakdown.py::TestMultiPropertyBreakdown::test_keeps_multi_property_breakdown_for_multi_property_requests PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_preprocess_with_no_recordings PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_preprocess_recording_event_groups_snapshots_split_by_session_and_window_id PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_compression_and_grouping PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompression_results_in_same_data PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_has_full_snapshot_property PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompress_uncompressed_events_returns_unmodified_events PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompress_ignores_if_not_enough_chunks PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompress_deduplicates_if_duplicate_chunks PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompress_ignores_if_too_few_chunks_even_after_deduplication PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_paginate_decompression PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompress_empty_list PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_decompress_data_returning_only_activity_info PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_get_events_summary_from_snapshot_data PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_is_active_event PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_new_ingestion PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_new_ingestion_large_full_snapshot_is_separated PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_new_ingestion_large_non_full_snapshots_are_separated PASSED [ 97%]
posthog/helpers/tests/test_session_recording_helpers.py::test_new_ingestion_groups_using_snapshot_bytes_if_possible PASSED [ 97%]
posthog/logging/test/test_timing.py::test_wrap_with_timing_calls_statsd PASSED [ 97%]
posthog/management/commands/test/test_migrate_kafka_data.py::test_can_migrate_data_from_one_topic_to_another_on_a_different_cluster PASSED [ 97%]
posthog/management/commands/test/test_migrate_kafka_data.py::test_we_do_not_migrate_when_dry_run_is_set PASSED [ 97%]
posthog/management/commands/test/test_migrate_kafka_data.py::test_cannot_send_data_back_into_same_topic_on_same_cluster PASSED [ 97%]
posthog/management/commands/test/test_migrate_kafka_data.py::test_that_the_command_fails_if_the_specified_consumer_group_does_not_exist PASSED [ 97%]
posthog/management/commands/test/test_migrate_kafka_data.py::test_that_we_error_if_the_target_topic_doesnt_exist PASSED [ 97%]
posthog/management/commands/test/test_migrate_kafka_data.py::test_we_fail_on_send_errors_to_new_topic PASSED [ 97%]
posthog/models/filters/mixins/test/test_groups.py::test_validate_group_type_index PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter0-hour] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter1-day] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter2-week] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter3-month] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter4-hour] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter5-day] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_success[filter6-hour] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_errors[filter0-Interval foo does not belong to SUPPORTED_INTERVAL_TYPES!] PASSED [ 98%]
posthog/models/filters/mixins/test/test_interval.py::test_filter_interval_errors[filter1-Interval must be a string!] PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_multi_level_parsing PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_simple_parsing PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_empty_parsing PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_invalid_parsing PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_includes_unhomogenous_groups PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_multi_level_to_dict PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_simple_to_dict PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_simple_json_parsing PASSED [ 98%]
posthog/models/filters/mixins/test/test_property.py::test_property_group_multi_level_json_parsing PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent0-potential_child0-True] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent1-potential_child1-True] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent2-potential_child2-False] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent3-potential_child3-False] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent4-potential_child4-True] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent5-potential_child5-False] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent6-potential_child6-True] PASSED [ 98%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent7-potential_child7-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent8-potential_child8-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent9-potential_child9-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent10-potential_child10-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent11-potential_child11-True] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent12-potential_child12-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent13-potential_child13-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent14-potential_child14-True] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_is_child[potential_parent15-potential_child15-False] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_hierarchy.py::test_construct_hierarchy PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_sessions.py::test_sessions_condition[query0-1 = 1] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_sessions.py::test_sessions_condition[query1-metrics_time_to_see_data.team_id = %(team_id)s] PASSED [ 99%]
posthog/queries/time_to_see_data/test/test_sessions.py::test_sessions_condition[query2-metrics_time_to_see_data.team_id = %(team_id)s AND metrics_time_to_see_data.session_id = %(session_id)s] PASSED [ 99%]
posthog/tasks/test/test_check_clickhouse_schema_drift.py::test_get_clickhouse_schema_drift PASSED [ 99%]
posthog/tasks/test/test_check_clickhouse_schema_drift.py::test_check_clickhouse_schema_drift_error_from_clickhouse PASSED [ 99%]
posthog/tasks/test/test_check_clickhouse_schema_drift.py::test_check_clickhouse_schema_drift_without_drift PASSED [ 99%]
posthog/tasks/test/test_check_clickhouse_schema_drift.py::test_check_clickhouse_schema_drift_with_drift PASSED [ 99%]
posthog/temporal/tests/test_encryption_codec.py::test_payloads_are_encrypted PASSED [ 99%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_workflow_inputs_yields_partition_ids[inputs0-expected0] PASSED [ 99%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_workflow_inputs_yields_partition_ids[inputs1-expected1] PASSED [ 99%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_workflow_inputs_yields_partition_ids[inputs2-expected2] PASSED [ 99%]
posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_workflow_inputs_yields_partition_ids[inputs3-expected3] PASSED [ 99%]
posthog/test/test_celery.py::TestCeleryMetrics::test_clickhouse_errors_count PASSED [ 99%]
posthog/test/test_health.py::test_livez_returns_200_and_doesnt_require_any_dependencies PASSED [ 99%]
posthog/test/test_latest_migrations.py::TestLatestMigrations::test_ee_migrations_is_in_sync_with_latest SKIPPED [ 99%]
posthog/test/test_latest_migrations.py::TestLatestMigrations::test_posthog_migration_is_in_sync_with_latest PASSED [ 99%]
posthog/test/activity_logging/test_person_activity_logging.py::TestChangesBetweenPersons::test_can_exclude_changed_fields_in_persons PASSED [100%]

=================================== FAILURES ===================================
____ TestDashboardTemplates.test_cant_make_templates_without_teamid_private ____

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_cant_make_templates_without_teamid_private>

    def test_cant_make_templates_without_teamid_private(self) -> None:
        """
        This test protects us from accidentally making the original default templates private
        And as they don't have a team_id, they can't be then be found to be made public again
        """
>       assert DashboardTemplate.objects.count() == 2  # default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:367: AssertionError
_________ TestDashboardTemplates.test_delete_dashboard_template_by_id __________

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_delete_dashboard_template_by_id>

    def test_delete_dashboard_template_by_id(self) -> None:
>       assert DashboardTemplate.objects.count() == 2  # default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:249: AssertionError
___________ TestDashboardTemplates.test_get_dashboard_template_by_id ___________

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_get_dashboard_template_by_id>

    def test_get_dashboard_template_by_id(self) -> None:
>       assert DashboardTemplate.objects.count() == 2  # default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:231: AssertionError
___ TestDashboardTemplates.test_non_staff_can_get_public_dashboard_templates ___

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_non_staff_can_get_public_dashboard_templates>

    def test_non_staff_can_get_public_dashboard_templates(self) -> None:
>       assert DashboardTemplate.objects.count() == 2  # Default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:190: AssertionError
_____ TestDashboardTemplates.test_non_staff_cannot_edit_dashboard_template _____

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_non_staff_cannot_edit_dashboard_template>

    def test_non_staff_cannot_edit_dashboard_template(self) -> None:
>       default_template = DashboardTemplate.objects.all()[0]

posthog/api/dashboards/test/test_dashboard_templates.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet []>, k = 0

    def __getitem__(self, k):
        """Retrieve an item or slice from the set of results."""
        if not isinstance(k, (int, slice)):
            raise TypeError(
                'QuerySet indices must be integers or slices, not %s.'
                % type(k).__name__
            )
        assert ((not isinstance(k, slice) and (k >= 0)) or
                (isinstance(k, slice) and (k.start is None or k.start >= 0) and
                 (k.stop is None or k.stop >= 0))), \
            "Negative indexing is not supported."
    
        if self._result_cache is not None:
            return self._result_cache[k]
    
        if isinstance(k, slice):
            qs = self._chain()
            if k.start is not None:
                start = int(k.start)
            else:
                start = None
            if k.stop is not None:
                stop = int(k.stop)
            else:
                stop = None
            qs.query.set_limits(start, stop)
            return list(qs)[::k.step] if k.step else qs
    
        qs = self._chain()
        qs.query.set_limits(k, k + 1)
        qs._fetch_all()
>       return qs._result_cache[0]
E       IndexError: list index out of range

env/lib/python3.10/site-packages/django/db/models/query.py:318: IndexError
______ TestDashboardTemplates.test_non_staff_user_cannot_create_dashboard ______

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_non_staff_user_cannot_create_dashboard>

    def test_non_staff_user_cannot_create_dashboard(self) -> None:
>       assert DashboardTemplate.objects.count() == 2  # default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:218: AssertionError
_ TestDashboardTemplates.test_non_staff_user_cannot_delete_dashboard_template_by_id _

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_non_staff_user_cannot_delete_dashboard_template_by_id>

    def test_non_staff_user_cannot_delete_dashboard_template_by_id(self) -> None:
>       assert DashboardTemplate.objects.count() == 2  # default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:270: AssertionError
_________ TestDashboardTemplates.test_update_dashboard_template_by_id __________

self = <posthog.api.dashboards.test.test_dashboard_templates.TestDashboardTemplates testMethod=test_update_dashboard_template_by_id>

    def test_update_dashboard_template_by_id(self) -> None:
>       assert DashboardTemplate.objects.count() == 2  # default template
E       AssertionError: assert 0 == 2
E         +0
E         -2

posthog/api/dashboards/test/test_dashboard_templates.py:292: AssertionError
_________________ TestEvents.test_filter_events_by_properties __________________

self = <posthog.api.test.test_event.TestEvents testMethod=test_filter_events_by_properties>

    @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=False)
    def test_filter_events_by_properties(self):
        _create_person(properties={"email": "tim@posthog.com"}, team=self.team, distinct_ids=["2", "some-random-uid"])
        _create_event(event="event_name", team=self.team, distinct_id="2", properties={"$browser": "Chrome"})
        event2_uuid = _create_event(
            event="event_name", team=self.team, distinct_id="2", properties={"$browser": "Safari"}
        )
        flush_persons_and_events()
    
        # Django session, PostHog user, PostHog team, PostHog org membership,
        # look up if rate limit is enabled (cached after first lookup), 5x non-cached instance
        # setting (poe, rate limit), person and distinct id
        expected_queries = 12
    
>       with self.assertNumQueries(expected_queries):

posthog/api/test/test_event.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:84: in __exit__
    self.test_case.assertEqual(
E   AssertionError: 10 != 12 : 10 queries executed, 12 expected
E   Captured queries were:
E   1. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:02:33.420366+00:00'::timestamptz AND "django_session"."session_key" = 'je4a73w08a8e2miazi2st5f1pdx88z5u') LIMIT 21 /**/
E   2. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 3888 LIMIT 21 /**/
E   3. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days" FROM "posthog_team" WHERE "posthog_team"."id" = 4368 LIMIT 21 /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   4. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 3888 /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   5. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:RATE_LIMIT_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   6. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   7. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   8. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   9. SELECT "posthog_person"."id", "posthog_person"."created_at", "posthog_person"."properties_last_updated_at", "posthog_person"."properties_last_operation", "posthog_person"."team_id", "posthog_person"."properties", "posthog_person"."is_user_id", "posthog_person"."is_identified", "posthog_person"."uuid", "posthog_person"."version" FROM "posthog_person" INNER JOIN "posthog_persondistinctid" ON ("posthog_person"."id" = "posthog_persondistinctid"."person_id") WHERE ("posthog_persondistinctid"."distinct_id" IN ('2') AND "posthog_persondistinctid"."team_id" = 4368 AND "posthog_person"."team_id" = 4368) /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
E   10. SELECT "posthog_persondistinctid"."id", "posthog_persondistinctid"."team_id", "posthog_persondistinctid"."person_id", "posthog_persondistinctid"."distinct_id", "posthog_persondistinctid"."version" FROM "posthog_persondistinctid" WHERE "posthog_persondistinctid"."person_id" IN (7895) /*controller='project_events-list',route='api/projects/%28%3FP%3Cparent_lookup_team_id%3E%5B%5E/.%5D%2B%29/events/%3F%24'*/
______________ TestBlastRadius.test_user_blast_radius_with_groups ______________

self = <posthog.api.test.test_feature_flag.TestBlastRadius testMethod=test_user_blast_radius_with_groups>

    @snapshot_clickhouse_queries
    def test_user_blast_radius_with_groups(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
    
        for i in range(10):
            create_group(
                team_id=self.team.pk, group_type_index=0, group_key=f"org:{i}", properties={"industry": f"{i}"}
            )
    
        response = self.client.post(
            f"/api/projects/{self.team.id}/feature_flags/user_blast_radius",
            {
                "condition": {
                    "properties": [
                        {
                            "key": "industry",
                            "type": "group",
                            "value": [0, 1, 2, 3],
                            "operator": "exact",
                            "group_type_index": 0,
                        }
                    ],
                    "rollout_percentage": 25,
                },
                "group_type_index": 0,
            },
        )
    
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    
        response_json = response.json()
>       self.assertDictContainsSubset({"users_affected": 4, "total_users": 10}, response_json)
E       AssertionError: Mismatched values: 'users_affected', expected: 4, actual: 0,'total_users', expected: 10, actual: 0

posthog/api/test/test_feature_flag.py:2637: AssertionError
_______ TestBlastRadius.test_user_blast_radius_with_groups_all_selected ________

self = <posthog.api.test.test_feature_flag.TestBlastRadius testMethod=test_user_blast_radius_with_groups_all_selected>

    def test_user_blast_radius_with_groups_all_selected(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
        GroupTypeMapping.objects.create(team=self.team, group_type="company", group_type_index=1)
    
        for i in range(5):
            create_group(
                team_id=self.team.pk, group_type_index=1, group_key=f"org:{i}", properties={"industry": f"{i}"}
            )
    
        response = self.client.post(
            f"/api/projects/{self.team.id}/feature_flags/user_blast_radius",
            {
                "condition": {
                    "properties": [],
                    "rollout_percentage": 25,
                },
                "group_type_index": 1,
            },
        )
    
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    
        response_json = response.json()
>       self.assertDictContainsSubset({"users_affected": 5, "total_users": 5}, response_json)
E       AssertionError: Mismatched values: 'users_affected', expected: 5, actual: 0,'total_users', expected: 5, actual: 0

posthog/api/test/test_feature_flag.py:2688: AssertionError
___ TestBlastRadius.test_user_blast_radius_with_groups_incorrect_group_type ____

self = <posthog.api.test.test_feature_flag.TestBlastRadius testMethod=test_user_blast_radius_with_groups_incorrect_group_type>

    def test_user_blast_radius_with_groups_incorrect_group_type(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
        GroupTypeMapping.objects.create(team=self.team, group_type="company", group_type_index=1)
    
        for i in range(10):
            create_group(
                team_id=self.team.pk, group_type_index=0, group_key=f"org:{i}", properties={"industry": f"{i}"}
            )
    
        response = self.client.post(
            f"/api/projects/{self.team.id}/feature_flags/user_blast_radius",
            {
                "condition": {
                    "properties": [
                        {
                            "key": "industry",
                            "type": "group",
                            "value": [0, 1, 2, 3, 4],
                            "operator": "exact",
                            "group_type_index": 0,
                        },
                        {
                            "key": "industry",
                            "type": "group",
                            "value": [2, 3, 4, 5, 6],
                            "operator": "exact",
                            "group_type_index": 0,
                        },
                    ],
                    "rollout_percentage": 25,
                },
                "group_type_index": 1,
            },
        )
    
>       self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
E       AssertionError: 200 != 400

posthog/api/test/test_feature_flag.py:2766: AssertionError
_____ TestBlastRadius.test_user_blast_radius_with_groups_multiple_queries ______

self = <posthog.api.test.test_feature_flag.TestBlastRadius testMethod=test_user_blast_radius_with_groups_multiple_queries>

    @snapshot_clickhouse_queries
    def test_user_blast_radius_with_groups_multiple_queries(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
        GroupTypeMapping.objects.create(team=self.team, group_type="company", group_type_index=1)
    
        for i in range(10):
            create_group(
                team_id=self.team.pk, group_type_index=0, group_key=f"org:{i}", properties={"industry": f"{i}"}
            )
    
        response = self.client.post(
            f"/api/projects/{self.team.id}/feature_flags/user_blast_radius",
            {
                "condition": {
                    "properties": [
                        {
                            "key": "industry",
                            "type": "group",
                            "value": [0, 1, 2, 3, 4],
                            "operator": "exact",
                            "group_type_index": 0,
                        },
                        {
                            "key": "industry",
                            "type": "group",
                            "value": [2, 3, 4, 5, 6],
                            "operator": "exact",
                            "group_type_index": 0,
                        },
                    ],
                    "rollout_percentage": 25,
                },
                "group_type_index": 0,
            },
        )
    
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    
        response_json = response.json()
>       self.assertDictContainsSubset({"users_affected": 3, "total_users": 10}, response_json)
E       AssertionError: Mismatched values: 'users_affected', expected: 3, actual: 0,'total_users', expected: 10, actual: 0

posthog/api/test/test_feature_flag.py:2729: AssertionError
_______ TestBlastRadius.test_user_blast_radius_with_groups_zero_selected _______

self = <posthog.api.test.test_feature_flag.TestBlastRadius testMethod=test_user_blast_radius_with_groups_zero_selected>

    def test_user_blast_radius_with_groups_zero_selected(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
    
        for i in range(5):
            create_group(
                team_id=self.team.pk, group_type_index=0, group_key=f"org:{i}", properties={"industry": f"{i}"}
            )
    
        response = self.client.post(
            f"/api/projects/{self.team.id}/feature_flags/user_blast_radius",
            {
                "condition": {
                    "properties": [
                        {"key": "industry", "type": "group", "value": [8], "operator": "exact", "group_type_index": 0}
                    ],
                    "rollout_percentage": 25,
                },
                "group_type_index": 0,
            },
        )
    
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    
        response_json = response.json()
>       self.assertDictContainsSubset({"users_affected": 0, "total_users": 5}, response_json)
E       AssertionError: Mismatched values: 'total_users', expected: 5, actual: 0

posthog/api/test/test_feature_flag.py:2663: AssertionError
_______________ TestInsight.test_insight_funnels_hogql_breakdown _______________

self = <posthog.api.test.test_insight.TestInsight testMethod=test_insight_funnels_hogql_breakdown>

    @snapshot_clickhouse_queries
    @also_test_with_materialized_columns(event_properties=["int_value"], person_properties=["fish"])
    def test_insight_funnels_hogql_breakdown(self) -> None:
        with freeze_time("2012-01-15T04:01:34.000Z"):
            _create_person(team=self.team, distinct_ids=["1"], properties={"fish": "there is no fish"})
            _create_event(team=self.team, event="user signed up", distinct_id="1", properties={"int_value": 1})
            _create_event(team=self.team, event="user did things", distinct_id="1", properties={"int_value": 20})
            response = self.client.post(
                f"/api/projects/{self.team.id}/insights/funnel/",
                {
                    "breakdown_type": "hogql",
                    "breakdowns": [{"property": "person.properties.fish", "type": "hogql"}],
                    "events": [
                        {"id": "user signed up", "type": "events", "order": 0},
                        {"id": "user did things", "type": "events", "order": 1},
                    ],
                    "properties": json.dumps(
                        [
                            {"key": "toInt(properties.int_value) < 10 and 'bla' != 'a%sd'", "type": "hogql"},
                        ]
                    ),
                    "funnel_window_days": 14,
                },
            )
>           self.assertEqual(response.status_code, status.HTTP_200_OK)
E           AssertionError: 500 != 200

posthog/api/test/test_insight.py:2445: AssertionError
----------------------------- Captured stderr call -----------------------------
2023-07-11T16:03:20.147755Z [error    ] Code: 47.
DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'fish'), ''), 'null'), '^"|"$', '')] AS value, count() AS count FROM events AS e WHERE (team_id = 4445) AND (event IN ['user did things', 'user signed up']) AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2012-01-08 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-15 23:59:59', 'UTC')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'int_value'), ''), 'null'), '^"|"$', '')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'properties' 'person_props', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
23. ? @ 0x00007f134ac45609 in ?
24. __clone @ 0x00007f134ab6a133 in ?
 [posthog.exceptions] host= ip=127.0.0.1 path=/api/projects/4445/insights/funnel/ pid=1138453 request_id=d70aaa44-d232-40c4-a800-60ef2424c281 team_id=4445 tid=140518560597824 token=token123 x_forwarded_for=
Traceback (most recent call last):
  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 102, in sync_execute
    result = client.execute(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1188, in _execute_mock_call
    return self._mock_wraps(*args, **kwargs)
  File "/workspaces/posthog/posthog/test/base.py", line 673, in execute_wrapper
    return original_client_execute(query, *args, **kwargs)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 304, in execute
    rv = self.process_ordinary_query(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 491, in process_ordinary_query
    return self.receive_result(with_column_types=with_column_types,
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 151, in receive_result
    return result.get_result()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/result.py", line 50, in get_result
    for packet in self.packet_generator:
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 167, in packet_generator
    packet = self.receive_packet()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 184, in receive_packet
    raise packet.exception
clickhouse_driver.errors.ServerException: Code: 47.
DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'fish'), ''), 'null'), '^"|"$', '')] AS value, count() AS count FROM events AS e WHERE (team_id = 4445) AND (event IN ['user did things', 'user signed up']) AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2012-01-08 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-15 23:59:59', 'UTC')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'int_value'), ''), 'null'), '^"|"$', '')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'properties' 'person_props', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
23. ? @ 0x00007f134ac45609 in ?
24. __clone @ 0x00007f134ab6a133 in ?


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/workspaces/posthog/posthog/api/insight.py", line 876, in funnel
    funnel = self.calculate_funnel(request)
  File "/workspaces/posthog/posthog/decorators.py", line 74, in wrapper
    fresh_result_package = cast(T, f(self, request))
  File "/workspaces/posthog/posthog/api/insight.py", line 902, in calculate_funnel
    "result": funnel_order_class(team=team, filter=filter).run(),
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 103, in run
    results = self._exec_query()
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 269, in _exec_query
    query = self.get_query()
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 38, in get_query
    {self.get_step_counts_query()}
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 43, in get_step_counts_query
    steps_per_person_query = self.get_step_counts_without_aggregation_query()
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 61, in get_step_counts_without_aggregation_query
    formatted_query = self.build_step_subquery(2, max_steps)
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 123, in build_step_subquery
    FROM ({self._get_inner_event_query(entity_name=event_names_alias)})
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 461, in _get_inner_event_query
    values = self._get_breakdown_conditions()
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 846, in _get_breakdown_conditions
    return get_breakdown_prop_values(
  File "/workspaces/posthog/posthog/queries/breakdown_props.py", line 201, in get_breakdown_prop_values
    return insight_sync_execute(
  File "/workspaces/posthog/posthog/queries/insight.py", line 15, in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
  File "/workspaces/posthog/posthog/utils.py", line 1263, in inner
    return inner._impl(*args, **kwargs)  # type: ignore
  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 113, in sync_execute
    raise err
posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'fish'), ''), 'null'), '^"|"$', '')] AS value, count() AS count FROM events AS e WHERE (team_id = 4445) AND (event IN ['user did things', 'user signed up']) AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2012-01-08 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-15 23:59:59', 'UTC')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'int_value'), ''), 'null'), '^"|"$', '')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'properties' 'person_props', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
23. ? @ 0x00007f134ac45609 in ?
24. __clone @ 0x00007f134ab6a133 in ?

2023-07-11T16:03:20.170553Z [error    ] Internal Server Error: /api/projects/4445/insights/funnel/ [django.request] host= pid=1138453 team_id=4445 tid=140518560597824 token=token123 x_forwarded_for=
2023-07-11T16:03:20.170785Z [error    ] Internal Server Error: /api/projects/4445/insights/funnel/ [django.request] host= pid=1138453 team_id=4445 tid=140518560597824 token=token123 x_forwarded_for=
------------------------------ Captured log call -------------------------------
ERROR    posthog.exceptions:exceptions.py:56 {'request_id': 'd70aaa44-d232-40c4-a800-60ef2424c281', 'ip': '127.0.0.1', 'path': '/api/projects/4445/insights/funnel/', 'event': CHQueryErrorUnknownIdentifier('DB::Exception: Missing columns: \'person_props\' while processing query: \'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, \'fish\'), \'\'), \'null\'), \'^"|"$\', \'\')] AS value, count() AS count FROM events AS e WHERE (team_id = 4445) AND (event IN [\'user did things\', \'user signed up\']) AND (toTimeZone(timestamp, \'UTC\') >= toDateTime(\'2012-01-08 00:00:00\', \'UTC\')) AND (toTimeZone(timestamp, \'UTC\') <= toDateTime(\'2012-01-15 23:59:59\', \'UTC\')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, \'int_value\'), \'\'), \'null\'), \'^"|"$\', \'\')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25\', required columns: \'team_id\' \'event\' \'timestamp\' \'properties\' \'person_props\', maybe you meant: \'team_id\', \'event\', \'timestamp\' or \'properties\'. Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008877911 in /usr/bin/clickhouse\n2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse\n3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse\n4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse\n15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse\n16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse\n21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse\n23. ? @ 0x00007f134ac45609 in ?\n24. __clone @ 0x00007f134ab6a133 in ?\n'), 'token': 'token123', 'team_id': 4445, 'x_forwarded_for': '', 'host': '', 'timestamp': '2023-07-11T16:03:20.147755Z', 'logger': 'posthog.exceptions', 'level': 'error', 'pid': 1138453, 'tid': 140518560597824, 'exception': 'Traceback (most recent call last):\n  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 102, in sync_execute\n    result = client.execute(\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1188, in _execute_mock_call\n    return self._mock_wraps(*args, **kwargs)\n  File "/workspaces/posthog/posthog/test/base.py", line 673, in execute_wrapper\n    return original_client_execute(query, *args, **kwargs)\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 304, in execute\n    rv = self.process_ordinary_query(\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 491, in process_ordinary_query\n    return self.receive_result(with_column_types=with_column_types,\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 151, in receive_result\n    return result.get_result()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/result.py", line 50, in get_result\n    for packet in self.packet_generator:\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 167, in packet_generator\n    packet = self.receive_packet()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 184, in receive_packet\n    raise packet.exception\nclickhouse_driver.errors.ServerException: Code: 47.\nDB::Exception: Missing columns: \'person_props\' while processing query: \'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, \'fish\'), \'\'), \'null\'), \'^"|"$\', \'\')] AS value, count() AS count FROM events AS e WHERE (team_id = 4445) AND (event IN [\'user did things\', \'user signed up\']) AND (toTimeZone(timestamp, \'UTC\') >= toDateTime(\'2012-01-08 00:00:00\', \'UTC\')) AND (toTimeZone(timestamp, \'UTC\') <= toDateTime(\'2012-01-15 23:59:59\', \'UTC\')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, \'int_value\'), \'\'), \'null\'), \'^"|"$\', \'\')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25\', required columns: \'team_id\' \'event\' \'timestamp\' \'properties\' \'person_props\', maybe you meant: \'team_id\', \'event\', \'timestamp\' or \'properties\'. Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008877911 in /usr/bin/clickhouse\n2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse\n3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse\n4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse\n15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse\n16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse\n21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse\n23. ? @ 0x00007f134ac45609 in ?\n24. __clone @ 0x00007f134ab6a133 in ?\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/workspaces/posthog/posthog/api/insight.py", line 876, in funnel\n    funnel = self.calculate_funnel(request)\n  File "/workspaces/posthog/posthog/decorators.py", line 74, in wrapper\n    fresh_result_package = cast(T, f(self, request))\n  File "/workspaces/posthog/posthog/api/insight.py", line 902, in calculate_funnel\n    "result": funnel_order_class(team=team, filter=filter).run(),\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 103, in run\n    results = self._exec_query()\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 269, in _exec_query\n    query = self.get_query()\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 38, in get_query\n    {self.get_step_counts_query()}\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 43, in get_step_counts_query\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 61, in get_step_counts_without_aggregation_query\n    formatted_query = self.build_step_subquery(2, max_steps)\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 123, in build_step_subquery\n    FROM ({self._get_inner_event_query(entity_name=event_names_alias)})\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 461, in _get_inner_event_query\n    values = self._get_breakdown_conditions()\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 846, in _get_breakdown_conditions\n    return get_breakdown_prop_values(\n  File "/workspaces/posthog/posthog/queries/breakdown_props.py", line 201, in get_breakdown_prop_values\n    return insight_sync_execute(\n  File "/workspaces/posthog/posthog/queries/insight.py", line 15, in insight_sync_execute\n    return sync_execute(query, args=args, team_id=team_id, **kwargs)\n  File "/workspaces/posthog/posthog/utils.py", line 1263, in inner\n    return inner._impl(*args, **kwargs)  # type: ignore\n  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 113, in sync_execute\n    raise err\nposthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.\nDB::Exception: Missing columns: \'person_props\' while processing query: \'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, \'fish\'), \'\'), \'null\'), \'^"|"$\', \'\')] AS value, count() AS count FROM events AS e WHERE (team_id = 4445) AND (event IN [\'user did things\', \'user signed up\']) AND (toTimeZone(timestamp, \'UTC\') >= toDateTime(\'2012-01-08 00:00:00\', \'UTC\')) AND (toTimeZone(timestamp, \'UTC\') <= toDateTime(\'2012-01-15 23:59:59\', \'UTC\')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, \'int_value\'), \'\'), \'null\'), \'^"|"$\', \'\')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25\', required columns: \'team_id\' \'event\' \'timestamp\' \'properties\' \'person_props\', maybe you meant: \'team_id\', \'event\', \'timestamp\' or \'properties\'. Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008877911 in /usr/bin/clickhouse\n2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse\n3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse\n4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse\n15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse\n16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse\n21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse\n23. ? @ 0x00007f134ac45609 in ?\n24. __clone @ 0x00007f134ab6a133 in ?\n'}
ERROR    django.request:log.py:224 Internal Server Error: /api/projects/4445/insights/funnel/
___________ TestInsight.test_insight_funnels_hogql_breakdown_single ____________

self = <posthog.api.test.test_insight.TestInsight testMethod=test_insight_funnels_hogql_breakdown_single>

    @also_test_with_materialized_columns(event_properties=["int_value"], person_properties=["fish"])
    def test_insight_funnels_hogql_breakdown_single(self) -> None:
        with freeze_time("2012-01-15T04:01:34.000Z"):
            _create_person(team=self.team, distinct_ids=["1"], properties={"fish": "there is no fish"})
            _create_event(team=self.team, event="user signed up", distinct_id="1", properties={"int_value": 1})
            _create_event(team=self.team, event="user did things", distinct_id="1", properties={"int_value": 20})
            response = self.client.post(
                f"/api/projects/{self.team.id}/insights/funnel/",
                {
                    "breakdown_type": "hogql",
                    "breakdown": "person.properties.fish",
                    "events": [
                        {"id": "user signed up", "type": "events", "order": 0},
                        {"id": "user did things", "type": "events", "order": 1},
                    ],
                    "properties": json.dumps(
                        [
                            {"key": "toInt(properties.int_value) < 10 and 'bla' != 'a%sd'", "type": "hogql"},
                        ]
                    ),
                    "funnel_window_days": 14,
                },
            )
>           self.assertEqual(response.status_code, status.HTTP_200_OK)
E           AssertionError: 500 != 200

posthog/api/test/test_insight.py:2483: AssertionError
----------------------------- Captured stderr call -----------------------------
2023-07-11T16:03:20.711515Z [error    ] Code: 47.
DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'fish'), ''), 'null'), '^"|"$', '')] AS value, count() AS count FROM events AS e WHERE (team_id = 4446) AND (event IN ['user did things', 'user signed up']) AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2012-01-08 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-15 23:59:59', 'UTC')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'int_value'), ''), 'null'), '^"|"$', '')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'properties' 'person_props', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
23. ? @ 0x00007f134ac45609 in ?
24. __clone @ 0x00007f134ab6a133 in ?
 [posthog.exceptions] host= ip=127.0.0.1 path=/api/projects/4446/insights/funnel/ pid=1138453 request_id=a3ccc632-f737-4e66-9cec-3926a1adc36b team_id=4446 tid=140518560597824 token=token123 x_forwarded_for=
Traceback (most recent call last):
  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 102, in sync_execute
    result = client.execute(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 304, in execute
    rv = self.process_ordinary_query(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 491, in process_ordinary_query
    return self.receive_result(with_column_types=with_column_types,
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 151, in receive_result
    return result.get_result()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/result.py", line 50, in get_result
    for packet in self.packet_generator:
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 167, in packet_generator
    packet = self.receive_packet()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 184, in receive_packet
    raise packet.exception
clickhouse_driver.errors.ServerException: Code: 47.
DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'fish'), ''), 'null'), '^"|"$', '')] AS value, count() AS count FROM events AS e WHERE (team_id = 4446) AND (event IN ['user did things', 'user signed up']) AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2012-01-08 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-15 23:59:59', 'UTC')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'int_value'), ''), 'null'), '^"|"$', '')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'properties' 'person_props', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
23. ? @ 0x00007f134ac45609 in ?
24. __clone @ 0x00007f134ab6a133 in ?


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "/workspaces/posthog/posthog/api/insight.py", line 876, in funnel
    funnel = self.calculate_funnel(request)
  File "/workspaces/posthog/posthog/decorators.py", line 74, in wrapper
    fresh_result_package = cast(T, f(self, request))
  File "/workspaces/posthog/posthog/api/insight.py", line 902, in calculate_funnel
    "result": funnel_order_class(team=team, filter=filter).run(),
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 103, in run
    results = self._exec_query()
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 269, in _exec_query
    query = self.get_query()
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 38, in get_query
    {self.get_step_counts_query()}
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 43, in get_step_counts_query
    steps_per_person_query = self.get_step_counts_without_aggregation_query()
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 61, in get_step_counts_without_aggregation_query
    formatted_query = self.build_step_subquery(2, max_steps)
  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 123, in build_step_subquery
    FROM ({self._get_inner_event_query(entity_name=event_names_alias)})
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 461, in _get_inner_event_query
    values = self._get_breakdown_conditions()
  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 846, in _get_breakdown_conditions
    return get_breakdown_prop_values(
  File "/workspaces/posthog/posthog/queries/breakdown_props.py", line 201, in get_breakdown_prop_values
    return insight_sync_execute(
  File "/workspaces/posthog/posthog/queries/insight.py", line 15, in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
  File "/workspaces/posthog/posthog/utils.py", line 1263, in inner
    return inner._impl(*args, **kwargs)  # type: ignore
  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 113, in sync_execute
    raise err
posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, 'fish'), ''), 'null'), '^"|"$', '')] AS value, count() AS count FROM events AS e WHERE (team_id = 4446) AND (event IN ['user did things', 'user signed up']) AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2012-01-08 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2012-01-15 23:59:59', 'UTC')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'int_value'), ''), 'null'), '^"|"$', '')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'properties' 'person_props', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
23. ? @ 0x00007f134ac45609 in ?
24. __clone @ 0x00007f134ab6a133 in ?

2023-07-11T16:03:20.714059Z [error    ] Internal Server Error: /api/projects/4446/insights/funnel/ [django.request] host= pid=1138453 team_id=4446 tid=140518560597824 token=token123 x_forwarded_for=
2023-07-11T16:03:20.714289Z [error    ] Internal Server Error: /api/projects/4446/insights/funnel/ [django.request] host= pid=1138453 team_id=4446 tid=140518560597824 token=token123 x_forwarded_for=
------------------------------ Captured log call -------------------------------
ERROR    posthog.exceptions:exceptions.py:56 {'request_id': 'a3ccc632-f737-4e66-9cec-3926a1adc36b', 'ip': '127.0.0.1', 'path': '/api/projects/4446/insights/funnel/', 'event': CHQueryErrorUnknownIdentifier('DB::Exception: Missing columns: \'person_props\' while processing query: \'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, \'fish\'), \'\'), \'null\'), \'^"|"$\', \'\')] AS value, count() AS count FROM events AS e WHERE (team_id = 4446) AND (event IN [\'user did things\', \'user signed up\']) AND (toTimeZone(timestamp, \'UTC\') >= toDateTime(\'2012-01-08 00:00:00\', \'UTC\')) AND (toTimeZone(timestamp, \'UTC\') <= toDateTime(\'2012-01-15 23:59:59\', \'UTC\')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, \'int_value\'), \'\'), \'null\'), \'^"|"$\', \'\')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25\', required columns: \'team_id\' \'event\' \'timestamp\' \'properties\' \'person_props\', maybe you meant: \'team_id\', \'event\', \'timestamp\' or \'properties\'. Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008877911 in /usr/bin/clickhouse\n2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse\n3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse\n4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse\n15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse\n16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse\n21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse\n23. ? @ 0x00007f134ac45609 in ?\n24. __clone @ 0x00007f134ab6a133 in ?\n'), 'token': 'token123', 'team_id': 4446, 'x_forwarded_for': '', 'host': '', 'timestamp': '2023-07-11T16:03:20.711515Z', 'logger': 'posthog.exceptions', 'level': 'error', 'pid': 1138453, 'tid': 140518560597824, 'exception': 'Traceback (most recent call last):\n  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 102, in sync_execute\n    result = client.execute(\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 304, in execute\n    rv = self.process_ordinary_query(\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 491, in process_ordinary_query\n    return self.receive_result(with_column_types=with_column_types,\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 151, in receive_result\n    return result.get_result()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/result.py", line 50, in get_result\n    for packet in self.packet_generator:\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 167, in packet_generator\n    packet = self.receive_packet()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 184, in receive_packet\n    raise packet.exception\nclickhouse_driver.errors.ServerException: Code: 47.\nDB::Exception: Missing columns: \'person_props\' while processing query: \'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, \'fish\'), \'\'), \'null\'), \'^"|"$\', \'\')] AS value, count() AS count FROM events AS e WHERE (team_id = 4446) AND (event IN [\'user did things\', \'user signed up\']) AND (toTimeZone(timestamp, \'UTC\') >= toDateTime(\'2012-01-08 00:00:00\', \'UTC\')) AND (toTimeZone(timestamp, \'UTC\') <= toDateTime(\'2012-01-15 23:59:59\', \'UTC\')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, \'int_value\'), \'\'), \'null\'), \'^"|"$\', \'\')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25\', required columns: \'team_id\' \'event\' \'timestamp\' \'properties\' \'person_props\', maybe you meant: \'team_id\', \'event\', \'timestamp\' or \'properties\'. Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008877911 in /usr/bin/clickhouse\n2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse\n3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse\n4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse\n15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse\n16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse\n21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse\n23. ? @ 0x00007f134ac45609 in ?\n24. __clone @ 0x00007f134ab6a133 in ?\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/views.py", line 506, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/workspaces/posthog/posthog/api/insight.py", line 876, in funnel\n    funnel = self.calculate_funnel(request)\n  File "/workspaces/posthog/posthog/decorators.py", line 74, in wrapper\n    fresh_result_package = cast(T, f(self, request))\n  File "/workspaces/posthog/posthog/api/insight.py", line 902, in calculate_funnel\n    "result": funnel_order_class(team=team, filter=filter).run(),\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 103, in run\n    results = self._exec_query()\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 269, in _exec_query\n    query = self.get_query()\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 38, in get_query\n    {self.get_step_counts_query()}\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 43, in get_step_counts_query\n    steps_per_person_query = self.get_step_counts_without_aggregation_query()\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 61, in get_step_counts_without_aggregation_query\n    formatted_query = self.build_step_subquery(2, max_steps)\n  File "/workspaces/posthog/posthog/queries/funnels/funnel.py", line 123, in build_step_subquery\n    FROM ({self._get_inner_event_query(entity_name=event_names_alias)})\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 461, in _get_inner_event_query\n    values = self._get_breakdown_conditions()\n  File "/workspaces/posthog/posthog/queries/funnels/base.py", line 846, in _get_breakdown_conditions\n    return get_breakdown_prop_values(\n  File "/workspaces/posthog/posthog/queries/breakdown_props.py", line 201, in get_breakdown_prop_values\n    return insight_sync_execute(\n  File "/workspaces/posthog/posthog/queries/insight.py", line 15, in insight_sync_execute\n    return sync_execute(query, args=args, team_id=team_id, **kwargs)\n  File "/workspaces/posthog/posthog/utils.py", line 1263, in inner\n    return inner._impl(*args, **kwargs)  # type: ignore\n  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 113, in sync_execute\n    raise err\nposthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.\nDB::Exception: Missing columns: \'person_props\' while processing query: \'SELECT [replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, \'fish\'), \'\'), \'null\'), \'^"|"$\', \'\')] AS value, count() AS count FROM events AS e WHERE (team_id = 4446) AND (event IN [\'user did things\', \'user signed up\']) AND (toTimeZone(timestamp, \'UTC\') >= toDateTime(\'2012-01-08 00:00:00\', \'UTC\')) AND (toTimeZone(timestamp, \'UTC\') <= toDateTime(\'2012-01-15 23:59:59\', \'UTC\')) AND ((toInt64OrNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, \'int_value\'), \'\'), \'null\'), \'^"|"$\', \'\')) < 10) AND 1) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25\', required columns: \'team_id\' \'event\' \'timestamp\' \'properties\' \'person_props\', maybe you meant: \'team_id\', \'event\', \'timestamp\' or \'properties\'. Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008877911 in /usr/bin/clickhouse\n2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse\n3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse\n4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse\n15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse\n16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse\n20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse\n21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse\n22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse\n23. ? @ 0x00007f134ac45609 in ?\n24. __clone @ 0x00007f134ab6a133 in ?\n'}
ERROR    django.request:log.py:224 Internal Server Error: /api/projects/4446/insights/funnel/
_________________ TestInstanceStatus.test_navigation_on_cloud __________________

self = <posthog.api.test.test_instance_status.TestInstanceStatus testMethod=test_navigation_on_cloud>
mocks = (<MagicMock name='dead_letter_queue_ratio_ok_cached' id='140517632176096'>, <MagicMock name='is_plugin_server_alive' i...4'>, <MagicMock name='is_redis_alive' id='140517633161968'>, <MagicMock name='is_postgres_alive' id='140517721459728'>)

    @patch("posthog.api.instance_status.is_postgres_alive")
    @patch("posthog.api.instance_status.is_redis_alive")
    @patch("posthog.api.instance_status.is_plugin_server_alive")
    @patch("posthog.api.instance_status.dead_letter_queue_ratio_ok_cached")
    def test_navigation_on_cloud(self, *mocks):
        self.user.is_staff = True
        self.user.save()
    
        with self.is_cloud(True):
>           response = self.client.get("/api/instance_status/navigation").json()

posthog/api/test/test_instance_status.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/rest_framework/test.py:289: in get
    response = super().get(path, data=data, **extra)
env/lib/python3.10/site-packages/rest_framework/test.py:206: in get
    return self.generic('GET', path, **r)
env/lib/python3.10/site-packages/rest_framework/test.py:234: in generic
    return super().generic(
env/lib/python3.10/site-packages/django/test/client.py:473: in generic
    return self.request(**r)
env/lib/python3.10/site-packages/rest_framework/test.py:286: in request
    return super().request(**kwargs)
env/lib/python3.10/site-packages/rest_framework/test.py:238: in request
    request = super().request(**kwargs)
env/lib/python3.10/site-packages/django/test/client.py:719: in request
    self.check_exception(response)
env/lib/python3.10/site-packages/django/test/client.py:580: in check_exception
    raise exc_value
env/lib/python3.10/site-packages/django/core/handlers/exception.py:47: in inner
    response = get_response(request)
env/lib/python3.10/site-packages/django/core/handlers/base.py:204: in _get_response
    response = response.render()
env/lib/python3.10/site-packages/django/template/response.py:105: in render
    self.content = self.rendered_content
env/lib/python3.10/site-packages/rest_framework/response.py:70: in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
env/lib/python3.10/site-packages/rest_framework/renderers.py:99: in render
    ret = json.dumps(
env/lib/python3.10/site-packages/rest_framework/utils/json.py:25: in dumps
    return json.dumps(*args, **kwargs)
/usr/local/lib/python3.10/json/__init__.py:238: in dumps
    **kw).encode(obj)
/usr/local/lib/python3.10/json/encoder.py:199: in encode
    chunks = self.iterencode(o, _one_shot=True)
/usr/local/lib/python3.10/json/encoder.py:257: in iterencode
    return _iterencode(o, 0)
env/lib/python3.10/site-packages/rest_framework/utils/encoders.py:53: in default
    return obj.tolist()
/usr/local/lib/python3.10/unittest/mock.py:1114: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.10/unittest/mock.py:1118: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.10/unittest/mock.py:1190: in _execute_mock_call
    return self.return_value
/usr/local/lib/python3.10/unittest/mock.py:532: in __get_return_value
    ret = self._get_child_mock(
/usr/local/lib/python3.10/unittest/mock.py:1040: in _get_child_mock
    return klass(**kw)
/usr/local/lib/python3.10/unittest/mock.py:2111: in __init__
    _safe_super(MagicMixin, self).__init__(*args, **kw)
/usr/local/lib/python3.10/unittest/mock.py:1096: in __init__
    _safe_super(CallableMixin, self).__init__(
/usr/local/lib/python3.10/unittest/mock.py:450: in __init__
    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)
/usr/local/lib/python3.10/unittest/mock.py:505: in _mock_add_spec
    if iscoroutinefunction(getattr(spec, attr, None)):
/usr/local/lib/python3.10/asyncio/coroutines.py:166: in iscoroutinefunction
    return (inspect.iscoroutinefunction(func) or
/usr/local/lib/python3.10/inspect.py:313: in iscoroutinefunction
    return _has_code_flag(obj, CO_COROUTINE)
/usr/local/lib/python3.10/inspect.py:297: in _has_code_flag
    if not (isfunction(f) or _signature_is_functionlike(f)):
/usr/local/lib/python3.10/inspect.py:2004: in _signature_is_functionlike
    if not callable(obj) or isclass(obj):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

object = <method-wrapper '__bool__' of NoneType object at 0x7fcd074ab960>

    def isclass(object):
        """Return true if the object is a class.
    
        Class objects provide these attributes:
            __doc__         documentation string
            __module__      name of module in which this class was defined"""
>       return isinstance(object, type)
E       RecursionError: maximum recursion depth exceeded while calling a Python object

/usr/local/lib/python3.10/inspect.py:197: RecursionError
----------------------------- Captured stderr call -----------------------------
2023-07-11T16:04:15.969584Z [error    ] request_failed                 [django_structlog.middlewares.request] code=500 host= ip=127.0.0.1 pid=1138453 request=<WSGIRequest: GET '/api/instance_status/navigation'> request_id=23647fb6-2296-4ddf-a8e9-8a81c5d0aa07 team_id=4511 tid=140518560597824 token=token123 user_id=4036 x_forwarded_for=
Traceback (most recent call last):
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/base.py", line 204, in _get_response
    response = response.render()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/template/response.py", line 105, in render
    self.content = self.rendered_content
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/response.py", line 70, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/renderers.py", line 99, in render
    ret = json.dumps(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/json.py", line 25, in dumps
    return json.dumps(*args, **kwargs)
  File "/usr/local/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/local/lib/python3.10/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/local/lib/python3.10/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/encoders.py", line 53, in default
    return obj.tolist()
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1190, in _execute_mock_call
    return self.return_value
  File "/usr/local/lib/python3.10/unittest/mock.py", line 532, in __get_return_value
    ret = self._get_child_mock(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1040, in _get_child_mock
    return klass(**kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 2111, in __init__
    _safe_super(MagicMixin, self).__init__(*args, **kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1096, in __init__
    _safe_super(CallableMixin, self).__init__(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 450, in __init__
    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 505, in _mock_add_spec
    if iscoroutinefunction(getattr(spec, attr, None)):
  File "/usr/local/lib/python3.10/asyncio/coroutines.py", line 166, in iscoroutinefunction
    return (inspect.iscoroutinefunction(func) or
  File "/usr/local/lib/python3.10/inspect.py", line 313, in iscoroutinefunction
    return _has_code_flag(obj, CO_COROUTINE)
  File "/usr/local/lib/python3.10/inspect.py", line 297, in _has_code_flag
    if not (isfunction(f) or _signature_is_functionlike(f)):
  File "/usr/local/lib/python3.10/inspect.py", line 2004, in _signature_is_functionlike
    if not callable(obj) or isclass(obj):
  File "/usr/local/lib/python3.10/inspect.py", line 197, in isclass
    return isinstance(object, type)
RecursionError: maximum recursion depth exceeded while calling a Python object
2023-07-11T16:04:16.030361Z [error    ] Internal Server Error: /api/instance_status/navigation [django.request] host= pid=1138453 team_id=4511 tid=140518560597824 token=token123 x_forwarded_for=
Traceback (most recent call last):
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/base.py", line 204, in _get_response
    response = response.render()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/template/response.py", line 105, in render
    self.content = self.rendered_content
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/response.py", line 70, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/renderers.py", line 99, in render
    ret = json.dumps(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/json.py", line 25, in dumps
    return json.dumps(*args, **kwargs)
  File "/usr/local/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/local/lib/python3.10/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/local/lib/python3.10/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/encoders.py", line 53, in default
    return obj.tolist()
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1190, in _execute_mock_call
    return self.return_value
  File "/usr/local/lib/python3.10/unittest/mock.py", line 532, in __get_return_value
    ret = self._get_child_mock(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1040, in _get_child_mock
    return klass(**kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 2111, in __init__
    _safe_super(MagicMixin, self).__init__(*args, **kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1096, in __init__
    _safe_super(CallableMixin, self).__init__(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 450, in __init__
    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 505, in _mock_add_spec
    if iscoroutinefunction(getattr(spec, attr, None)):
  File "/usr/local/lib/python3.10/asyncio/coroutines.py", line 166, in iscoroutinefunction
    return (inspect.iscoroutinefunction(func) or
  File "/usr/local/lib/python3.10/inspect.py", line 313, in iscoroutinefunction
    return _has_code_flag(obj, CO_COROUTINE)
  File "/usr/local/lib/python3.10/inspect.py", line 297, in _has_code_flag
    if not (isfunction(f) or _signature_is_functionlike(f)):
  File "/usr/local/lib/python3.10/inspect.py", line 2004, in _signature_is_functionlike
    if not callable(obj) or isclass(obj):
  File "/usr/local/lib/python3.10/inspect.py", line 197, in isclass
    return isinstance(object, type)
RecursionError: maximum recursion depth exceeded while calling a Python object
2023-07-11T16:04:16.031183Z [error    ] Internal Server Error: /api/instance_status/navigation [django.request] host= pid=1138453 team_id=4511 tid=140518560597824 token=token123 x_forwarded_for=
Traceback (most recent call last):
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/base.py", line 204, in _get_response
    response = response.render()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/template/response.py", line 105, in render
    self.content = self.rendered_content
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/response.py", line 70, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/renderers.py", line 99, in render
    ret = json.dumps(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/json.py", line 25, in dumps
    return json.dumps(*args, **kwargs)
  File "/usr/local/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/local/lib/python3.10/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/local/lib/python3.10/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/encoders.py", line 53, in default
    return obj.tolist()
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1190, in _execute_mock_call
    return self.return_value
  File "/usr/local/lib/python3.10/unittest/mock.py", line 532, in __get_return_value
    ret = self._get_child_mock(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1040, in _get_child_mock
    return klass(**kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 2111, in __init__
    _safe_super(MagicMixin, self).__init__(*args, **kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1096, in __init__
    _safe_super(CallableMixin, self).__init__(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 450, in __init__
    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 505, in _mock_add_spec
    if iscoroutinefunction(getattr(spec, attr, None)):
  File "/usr/local/lib/python3.10/asyncio/coroutines.py", line 166, in iscoroutinefunction
    return (inspect.iscoroutinefunction(func) or
  File "/usr/local/lib/python3.10/inspect.py", line 313, in iscoroutinefunction
    return _has_code_flag(obj, CO_COROUTINE)
  File "/usr/local/lib/python3.10/inspect.py", line 297, in _has_code_flag
    if not (isfunction(f) or _signature_is_functionlike(f)):
  File "/usr/local/lib/python3.10/inspect.py", line 2004, in _signature_is_functionlike
    if not callable(obj) or isclass(obj):
  File "/usr/local/lib/python3.10/inspect.py", line 197, in isclass
    return isinstance(object, type)
RecursionError: maximum recursion depth exceeded while calling a Python object
------------------------------ Captured log call -------------------------------
ERROR    django_structlog.middlewares.request:request.py:90 {'request_id': '23647fb6-2296-4ddf-a8e9-8a81c5d0aa07', 'ip': '127.0.0.1', 'user_id': 4036, 'code': 500, 'request': <WSGIRequest: GET '/api/instance_status/navigation'>, 'event': 'request_failed', 'token': 'token123', 'team_id': 4511, 'x_forwarded_for': '', 'host': '', 'timestamp': '2023-07-11T16:04:15.969584Z', 'logger': 'django_structlog.middlewares.request', 'level': 'error', 'pid': 1138453, 'tid': 140518560597824, 'exception': 'Traceback (most recent call last):\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/base.py", line 204, in _get_response\n    response = response.render()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/template/response.py", line 105, in render\n    self.content = self.rendered_content\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/response.py", line 70, in rendered_content\n    ret = renderer.render(self.data, accepted_media_type, context)\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/renderers.py", line 99, in render\n    ret = json.dumps(\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/json.py", line 25, in dumps\n    return json.dumps(*args, **kwargs)\n  File "/usr/local/lib/python3.10/json/__init__.py", line 238, in dumps\n    **kw).encode(obj)\n  File "/usr/local/lib/python3.10/json/encoder.py", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File "/usr/local/lib/python3.10/json/encoder.py", line 257, in iterencode\n    return _iterencode(o, 0)\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/encoders.py", line 53, in default\n    return obj.tolist()\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__\n    return self._mock_call(*args, **kwargs)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1190, in _execute_mock_call\n    return self.return_value\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 532, in __get_return_value\n    ret = self._get_child_mock(\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1040, in _get_child_mock\n    return klass(**kw)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 2111, in __init__\n    _safe_super(MagicMixin, self).__init__(*args, **kw)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 1096, in __init__\n    _safe_super(CallableMixin, self).__init__(\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 450, in __init__\n    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)\n  File "/usr/local/lib/python3.10/unittest/mock.py", line 505, in _mock_add_spec\n    if iscoroutinefunction(getattr(spec, attr, None)):\n  File "/usr/local/lib/python3.10/asyncio/coroutines.py", line 166, in iscoroutinefunction\n    return (inspect.iscoroutinefunction(func) or\n  File "/usr/local/lib/python3.10/inspect.py", line 313, in iscoroutinefunction\n    return _has_code_flag(obj, CO_COROUTINE)\n  File "/usr/local/lib/python3.10/inspect.py", line 297, in _has_code_flag\n    if not (isfunction(f) or _signature_is_functionlike(f)):\n  File "/usr/local/lib/python3.10/inspect.py", line 2004, in _signature_is_functionlike\n    if not callable(obj) or isclass(obj):\n  File "/usr/local/lib/python3.10/inspect.py", line 197, in isclass\n    return isinstance(object, type)\nRecursionError: maximum recursion depth exceeded while calling a Python object'}
ERROR    django.request:log.py:224 Internal Server Error: /api/instance_status/navigation
Traceback (most recent call last):
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/core/handlers/base.py", line 204, in _get_response
    response = response.render()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/django/template/response.py", line 105, in render
    self.content = self.rendered_content
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/response.py", line 70, in rendered_content
    ret = renderer.render(self.data, accepted_media_type, context)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/renderers.py", line 99, in render
    ret = json.dumps(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/json.py", line 25, in dumps
    return json.dumps(*args, **kwargs)
  File "/usr/local/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/usr/local/lib/python3.10/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/local/lib/python3.10/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/workspaces/posthog/env/lib/python3.10/site-packages/rest_framework/utils/encoders.py", line 53, in default
    return obj.tolist()
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1114, in __call__
    return self._mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1118, in _mock_call
    return self._execute_mock_call(*args, **kwargs)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1190, in _execute_mock_call
    return self.return_value
  File "/usr/local/lib/python3.10/unittest/mock.py", line 532, in __get_return_value
    ret = self._get_child_mock(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1040, in _get_child_mock
    return klass(**kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 2111, in __init__
    _safe_super(MagicMixin, self).__init__(*args, **kw)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 1096, in __init__
    _safe_super(CallableMixin, self).__init__(
  File "/usr/local/lib/python3.10/unittest/mock.py", line 450, in __init__
    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)
  File "/usr/local/lib/python3.10/unittest/mock.py", line 505, in _mock_add_spec
    if iscoroutinefunction(getattr(spec, attr, None)):
  File "/usr/local/lib/python3.10/asyncio/coroutines.py", line 166, in iscoroutinefunction
    return (inspect.iscoroutinefunction(func) or
  File "/usr/local/lib/python3.10/inspect.py", line 313, in iscoroutinefunction
    return _has_code_flag(obj, CO_COROUTINE)
  File "/usr/local/lib/python3.10/inspect.py", line 297, in _has_code_flag
    if not (isfunction(f) or _signature_is_functionlike(f)):
  File "/usr/local/lib/python3.10/inspect.py", line 2004, in _signature_is_functionlike
    if not callable(obj) or isclass(obj):
  File "/usr/local/lib/python3.10/inspect.py", line 197, in isclass
    return isinstance(object, type)
RecursionError: maximum recursion depth exceeded while calling a Python object
__ TestOrganizationAPI.test_cant_create_organization_with_custom_plugin_level __

self = <posthog.api.test.test_organization.TestOrganizationAPI testMethod=test_cant_create_organization_with_custom_plugin_level>

    def test_cant_create_organization_with_custom_plugin_level(self):
        with self.is_cloud(True):
            response = self.client.post("/api/organizations/", {"name": "Test", "plugins_access_level": 6})
>           self.assertEqual(response.status_code, status.HTTP_201_CREATED)
E           AssertionError: 403 != 201

posthog/api/test/test_organization.py:57: AssertionError
________________ TestOrganizationDomainsAPI.test_create_domain _________________

self = <posthog.api.test.test_organization_domain.TestOrganizationDomainsAPI testMethod=test_create_domain>

    def test_create_domain(self):
        self.organization_membership.level = OrganizationMembership.Level.ADMIN
        self.organization_membership.save()
    
        with self.is_cloud(True):
            response = self.client.post(
                "/api/organizations/@current/domains/",
                {
                    "domain": "the.posthog.com",
                    "verified_at": "2022-01-01T14:25:25.000Z",  # ignore me
                    "verification_challenge": "123",  # ignore me
                    "jit_provisioning_enabled": True,  # ignore me
                    "sso_enforcement": "saml",  # ignore me
                },
            )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        response_data = response.json()
        self.assertEqual(response_data["domain"], "the.posthog.com")
>       self.assertEqual(response_data["verified_at"], None)
E       AssertionError: '2023-07-11T16:04:18.172032Z' != None

posthog/api/test/test_organization_domain.py:101: AssertionError
_ TestOrganizationDomainsAPI.test_domain_is_not_verified_with_incorrect_challenge _

self = <posthog.api.test.test_organization_domain.TestOrganizationDomainsAPI testMethod=test_domain_is_not_verified_with_incorrect_challenge>
mock_dns_query = <MagicMock name='resolve' id='140515934588880'>

    @patch("posthog.models.organization_domain.dns.resolver.resolve")
    def test_domain_is_not_verified_with_incorrect_challenge(self, mock_dns_query):
        self.organization_membership.level = OrganizationMembership.Level.ADMIN
        self.organization_membership.save()
    
        mock_dns_query.return_value = FakeDNSResponse(
            [dns.rrset.from_text("_posthog-challenge.myposthog.com.", 3600, "IN", "TXT", "incorrect_challenge")]
        )
    
        with freeze_time("2021-10-10T10:10:10Z"):
            with self.is_cloud(True):
                response = self.client.post(f"/api/organizations/@current/domains/{self.domain.id}/verify")
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        response_data = response.json()
        self.domain.refresh_from_db()
        self.assertEqual(response_data["domain"], "myposthog.com")
>       self.assertEqual(response_data["verified_at"], None)
E       AssertionError: '2021-10-10T10:10:10Z' != None

posthog/api/test/test_organization_domain.py:262: AssertionError
_ TestOrganizationDomainsAPI.test_domain_is_not_verified_with_missing_challenge _

self = <posthog.api.test.test_organization_domain.TestOrganizationDomainsAPI testMethod=test_domain_is_not_verified_with_missing_challenge>
mock_dns_query = <MagicMock name='resolve' id='140515930207040'>

    @patch("posthog.models.organization_domain.dns.resolver.resolve")
    def test_domain_is_not_verified_with_missing_challenge(self, mock_dns_query):
        self.organization_membership.level = OrganizationMembership.Level.ADMIN
        self.organization_membership.save()
    
        mock_dns_query.side_effect = dns.resolver.NoAnswer()
    
        with freeze_time("2021-10-10T10:10:10Z"):
            with self.is_cloud(True):
                response = self.client.post(f"/api/organizations/@current/domains/{self.domain.id}/verify")
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        response_data = response.json()
        self.domain.refresh_from_db()
        self.assertEqual(response_data["domain"], "myposthog.com")
>       self.assertEqual(response_data["verified_at"], None)
E       AssertionError: '2021-10-10T10:10:10Z' != None

posthog/api/test/test_organization_domain.py:220: AssertionError
__ TestOrganizationDomainsAPI.test_domain_is_not_verified_with_missing_domain __

self = <posthog.api.test.test_organization_domain.TestOrganizationDomainsAPI testMethod=test_domain_is_not_verified_with_missing_domain>
mock_dns_query = <MagicMock name='resolve' id='140515931857072'>

    @patch("posthog.models.organization_domain.dns.resolver.resolve")
    def test_domain_is_not_verified_with_missing_domain(self, mock_dns_query):
        self.organization_membership.level = OrganizationMembership.Level.ADMIN
        self.organization_membership.save()
    
        mock_dns_query.side_effect = dns.resolver.NXDOMAIN()
    
        with freeze_time("2021-10-10T10:10:10Z"):
            with self.is_cloud(True):
                response = self.client.post(f"/api/organizations/@current/domains/{self.domain.id}/verify")
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        response_data = response.json()
        self.domain.refresh_from_db()
        self.assertEqual(response_data["domain"], "myposthog.com")
>       self.assertEqual(response_data["verified_at"], None)
E       AssertionError: '2021-10-10T10:10:10Z' != None

posthog/api/test/test_organization_domain.py:240: AssertionError
_________ TestPersonTrends.test_trends_people_endpoint_filters_search __________
posthog/test/base.py:802: in wrapped
    self.assertQueryMatchesSnapshot(query)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <posthog.api.test.test_persons_trends.TestPersonTrends testMethod=test_trends_people_endpoint_filters_search>
query = '/* user_id:0 request:_snapshot_ */ \nSELECT\n    person_id AS actor_id,\n    count() AS actor_value\n    , groupUniqA...), \'^"|"$\', \'\')))\n\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n'
params = None, replace_all_numbers = False

    def assertQueryMatchesSnapshot(self, query, params=None, replace_all_numbers=False):
        # :TRICKY: team_id changes every test, avoid it messing with snapshots.
        if replace_all_numbers:
            query = re.sub(r"(\"?) = \d+", r"\1 = 2", query)
            query = re.sub(r"(\"?) IN \(\d+(, \d+)*\)", r"\1 IN (1, 2, 3, 4, 5 /* ... */)", query)
            # feature flag conditions use primary keys as columns in queries, so replace those too
            query = re.sub(r"flag_\d+_condition", r"flag_X_condition", query)
            query = re.sub(r"flag_\d+_super_condition", r"flag_X_super_condition", query)
        else:
            query = re.sub(r"(team|cohort)_id(\"?) = \d+", r"\1_id\2 = 2", query)
            query = re.sub(r"\d+ as (team|cohort)_id(\"?)", r"2 as \1_id\2", query)
    
        # hog ql checks team ids differently
        query = re.sub(
            r"equals\(([^.]+\.)?team_id?, \d+\)",
            r"equals(\1team_id, 2)",
            query,
        )
    
        # Replace organization_id and notebook_id lookups, for postgres
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") = '[^']+'::uuid""",
            r"""\1 = '00000000-0000-0000-0000-000000000000'::uuid""",
            query,
        )
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") IN \('[^']+'::uuid\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid)""",
            query,
        )
    
        # Replace notebook short_id lookups, for postgres
        query = re.sub(
            r"\"posthog_notebook\".\"short_id\" = '[a-zA-Z0-9]{8}'",
            '"posthog_notebook"."short_id" = \'00000000\'',
            query,
        )
    
        # Replace person id (when querying session recording replay events)
        query = re.sub(
            "and person_id = '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'",
            r"and person_id = '00000000-0000-0000-0000-000000000000'",
            query,
        )
    
        # Replace tag id lookups for postgres
        query = re.sub(
            rf"""("posthog_tag"\."id") IN \(('[^']+'::uuid)+(, ('[^']+'::uuid)+)*\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid /* ... */)""",
            query,
        )
    
        query = re.sub(rf"""user_id:([0-9]+) request:[a-zA-Z0-9-_]+""", r"""user_id:0 request:_snapshot_""", query)
    
        # ee license check has varying datetime
        # e.g. WHERE "ee_license"."valid_until" >= '2023-03-02T21:13:59.298031+00:00'::timestamptz
        query = re.sub(
            r"ee_license\"\.\"valid_until\" >= '\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d.\d{6}\+\d\d:\d\d'::timestamptz",
            '"ee_license"."valid_until">=\'LICENSE-TIMESTAMP\'::timestamptz"',
            query,
        )
    
        # insight cache key varies with team id
        query = re.sub(
            r"WHERE \(\"posthog_insightcachingstate\".\"cache_key\" = 'cache_\w{32}'",
            """WHERE ("posthog_insightcachingstate"."cache_key" = 'cache_THE_CACHE_KEY'""",
            query,
        )
    
        # replace Savepoint numbers
        query = re.sub(r"SAVEPOINT \".+\"", "SAVEPOINT _snapshot_", query)
    
        # test_formula has some values that change on every run
        query = re.sub(r"\SELECT \[\d+, \d+] as breakdown_value", "SELECT [1, 2] as breakdown_value", query)
        query = re.sub(
            r"SELECT distinct_id,[\n\r\s]+\d+ as value",
            "SELECT distinct_id, 1 as value",
            query,
        )
    
>       assert sqlparse.format(query, reindent=True) == self.snapshot, "\n".join(self.snapshot.get_assert_diff())
E       AssertionError: [0m[2m  '[0m[0m
E       [0m[2m       ...[0m[0m
E       [0m[2m            e."properties" as "properties",[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90m.[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m,[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90m.[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m,[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mJ[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23m.[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m^[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m|[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m,[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mJ[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23m.[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m^[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m|[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m,[0m[0m
E       [0m[2m            pdi.person_id as person_id,[0m[0m
E       [0m[2m       ...[0m[0m
E       [0m[2m  '[0m[0m

posthog/test/base.py:452: AssertionError
_______ TestPersonTrends.test_trends_people_endpoint_includes_recordings _______
posthog/test/base.py:802: in wrapped
    self.assertQueryMatchesSnapshot(query)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <posthog.api.test.test_persons_trends.TestPersonTrends testMethod=test_trends_people_endpoint_includes_recordings>
query = '/* user_id:0 request:_snapshot_ */ \nSELECT\n    person_id AS actor_id,\n    count() AS actor_value\n    , groupUniqA...), \'^"|"$\', \'\')))\n\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n'
params = None, replace_all_numbers = False

    def assertQueryMatchesSnapshot(self, query, params=None, replace_all_numbers=False):
        # :TRICKY: team_id changes every test, avoid it messing with snapshots.
        if replace_all_numbers:
            query = re.sub(r"(\"?) = \d+", r"\1 = 2", query)
            query = re.sub(r"(\"?) IN \(\d+(, \d+)*\)", r"\1 IN (1, 2, 3, 4, 5 /* ... */)", query)
            # feature flag conditions use primary keys as columns in queries, so replace those too
            query = re.sub(r"flag_\d+_condition", r"flag_X_condition", query)
            query = re.sub(r"flag_\d+_super_condition", r"flag_X_super_condition", query)
        else:
            query = re.sub(r"(team|cohort)_id(\"?) = \d+", r"\1_id\2 = 2", query)
            query = re.sub(r"\d+ as (team|cohort)_id(\"?)", r"2 as \1_id\2", query)
    
        # hog ql checks team ids differently
        query = re.sub(
            r"equals\(([^.]+\.)?team_id?, \d+\)",
            r"equals(\1team_id, 2)",
            query,
        )
    
        # Replace organization_id and notebook_id lookups, for postgres
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") = '[^']+'::uuid""",
            r"""\1 = '00000000-0000-0000-0000-000000000000'::uuid""",
            query,
        )
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") IN \('[^']+'::uuid\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid)""",
            query,
        )
    
        # Replace notebook short_id lookups, for postgres
        query = re.sub(
            r"\"posthog_notebook\".\"short_id\" = '[a-zA-Z0-9]{8}'",
            '"posthog_notebook"."short_id" = \'00000000\'',
            query,
        )
    
        # Replace person id (when querying session recording replay events)
        query = re.sub(
            "and person_id = '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'",
            r"and person_id = '00000000-0000-0000-0000-000000000000'",
            query,
        )
    
        # Replace tag id lookups for postgres
        query = re.sub(
            rf"""("posthog_tag"\."id") IN \(('[^']+'::uuid)+(, ('[^']+'::uuid)+)*\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid /* ... */)""",
            query,
        )
    
        query = re.sub(rf"""user_id:([0-9]+) request:[a-zA-Z0-9-_]+""", r"""user_id:0 request:_snapshot_""", query)
    
        # ee license check has varying datetime
        # e.g. WHERE "ee_license"."valid_until" >= '2023-03-02T21:13:59.298031+00:00'::timestamptz
        query = re.sub(
            r"ee_license\"\.\"valid_until\" >= '\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d.\d{6}\+\d\d:\d\d'::timestamptz",
            '"ee_license"."valid_until">=\'LICENSE-TIMESTAMP\'::timestamptz"',
            query,
        )
    
        # insight cache key varies with team id
        query = re.sub(
            r"WHERE \(\"posthog_insightcachingstate\".\"cache_key\" = 'cache_\w{32}'",
            """WHERE ("posthog_insightcachingstate"."cache_key" = 'cache_THE_CACHE_KEY'""",
            query,
        )
    
        # replace Savepoint numbers
        query = re.sub(r"SAVEPOINT \".+\"", "SAVEPOINT _snapshot_", query)
    
        # test_formula has some values that change on every run
        query = re.sub(r"\SELECT \[\d+, \d+] as breakdown_value", "SELECT [1, 2] as breakdown_value", query)
        query = re.sub(
            r"SELECT distinct_id,[\n\r\s]+\d+ as value",
            "SELECT distinct_id, 1 as value",
            query,
        )
    
>       assert sqlparse.format(query, reindent=True) == self.snapshot, "\n".join(self.snapshot.get_assert_diff())
E       AssertionError: [0m[2m  '[0m[0m
E       [0m[2m       ...[0m[0m
E       [0m[2m            e."properties" as "properties",[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90m.[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m,[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90m.[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m,[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mJ[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23m.[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m^[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m|[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m,[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mJ[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23m.[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m^[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m|[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m,[0m[0m
E       [0m[2m            pdi.person_id as person_id,[0m[0m
E       [0m[2m       ...[0m[0m
E       [0m[2m  '[0m[0m

posthog/test/base.py:452: AssertionError
_ TestPluginAPI.test_create_plugin_version_range_gt_next_major_ignore_on_cloud _

self = <posthog.api.test.test_plugin.TestPluginAPI testMethod=test_create_plugin_version_range_gt_next_major_ignore_on_cloud>
mock_get = <MagicMock name='get' id='140515914532464'>
mock_reload = <MagicMock name='reload_plugins_on_workers' id='140515914700960'>

    def test_create_plugin_version_range_gt_next_major_ignore_on_cloud(self, mock_get, mock_reload):
        with self.is_cloud(True):
            response = self.client.post(
                "/api/organizations/@current/plugins/",
                {
                    "url": f"https://github.com/posthog-plugin/version-greater-than/commit/{Version(VERSION).next_major()}"
                },
            )
>           self.assertEqual(response.status_code, 201)
E           AssertionError: 400 != 201

posthog/api/test/test_plugin.py:559: AssertionError
____________ TestPreflight.test_cloud_preflight_limited_db_queries _____________

self = <posthog.api.test.test_preflight.TestPreflight testMethod=test_cloud_preflight_limited_db_queries>

    @pytest.mark.ee
    @snapshot_postgres_queries
    def test_cloud_preflight_limited_db_queries(self):
        with self.is_cloud(True):
            # :IMPORTANT: This code is hit _every_ web request on cloud so avoid ever increasing db load.
>           with self.assertNumQueries(4):  # session, user, team and slack instance setting.

posthog/api/test/test_preflight.py:162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:84: in __exit__
    self.test_case.assertEqual(
E   AssertionError: 8 != 4 : 8 queries executed, 4 expected
E   Captured queries were:
E   1. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:05:11.781758+00:00'::timestamptz AND "django_session"."session_key" = 'uycv6ep7vdcxiqhdr2r72nzdog1bx2ds') LIMIT 21 /**/
E   2. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 4110 LIMIT 21 /**/
E   3. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" IN ('constance:posthog:SLACK_APP_CLIENT_ID', 'constance:posthog:SLACK_APP_CLIENT_SECRET', 'constance:posthog:SLACK_APP_SIGNING_SECRET') /*controller='posthog.views.preflight_check',route='%5E_preflight/%3F%28%3F%3A%5B%3F%23%5D.%2A%29%3F%24'*/
E   4. SELECT COUNT(*) AS "__count" FROM "posthog_user" /*controller='posthog.views.preflight_check',route='%5E_preflight/%3F%28%3F%3A%5B%3F%23%5D.%2A%29%3F%24'*/
E   5. SELECT (1) AS "a" FROM "posthog_organization" LIMIT 1 /*controller='posthog.views.preflight_check',route='%5E_preflight/%3F%28%3F%3A%5B%3F%23%5D.%2A%29%3F%24'*/
E   6. SELECT (1) AS "a" FROM "posthog_organization" WHERE NOT "posthog_organization"."for_internal_metrics" LIMIT 1 /*controller='posthog.views.preflight_check',route='%5E_preflight/%3F%28%3F%3A%5B%3F%23%5D.%2A%29%3F%24'*/
E   7. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.views.preflight_check',route='%5E_preflight/%3F%28%3F%3A%5B%3F%23%5D.%2A%29%3F%24'*/
E   8. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_HOST' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.views.preflight_check',route='%5E_preflight/%3F%28%3F%3A%5B%3F%23%5D.%2A%29%3F%24'*/
__________________ TestPreflight.test_cloud_preflight_request __________________

self = <posthog.api.test.test_preflight.TestPreflight testMethod=test_cloud_preflight_request>

    @pytest.mark.ee
    def test_cloud_preflight_request(self):
        with self.is_cloud(True):
            with self.settings(SITE_URL="https://app.posthog.com", OBJECT_STORAGE_ENABLED=False):
                response = self.client.get("/_preflight/")
                self.assertEqual(response.status_code, status.HTTP_200_OK)
                response = response.json()
                available_timezones = cast(dict, response).pop("available_timezones")
    
>               self.assertEqual(
                    response,
                    self.preflight_authenticated_dict(
                        {
                            "can_create_org": True,
                            "cloud": True,
                            "realm": "cloud",
                            "region": "US",
                            "instance_preferences": {"debug_queries": False, "disable_paid_fs": False},
                            "site_url": "https://app.posthog.com",
                            "email_service_available": True,
                            "object_storage": True,
                        }
                    ),
                )
E               AssertionError: {'dja[56 chars]ue, 'clickhouse': True, 'kafka': True, 'db': T[656 chars]: 60} != {'dja[56 chars]ue, 'db': True, 'initiated': True, 'cloud': Tr[640 chars]alse}
E                 {'available_social_auth_providers': {'github': False,
E                                                      'gitlab': False,
E                                                      'google-oauth2': False},
E                  'buffer_conversion_seconds': 60,
E               -  'can_create_org': False,
E               ?                    ^^^^
E               
E               +  'can_create_org': True,
E               ?                    ^^^
E               
E                  'celery': True,
E                  'clickhouse': True,
E               -  'cloud': False,
E               ?           ^^^^
E               
E               +  'cloud': True,
E               ?           ^^^
E               
E                  'db': True,
E                  'demo': False,
E                  'django': True,
E               -  'email_service_available': False,
E               ?                             ^^^^
E               
E               +  'email_service_available': True,
E               ?                             ^^^
E               
E                  'initiated': True,
E                  'instance_preferences': {'debug_queries': False, 'disable_paid_fs': False},
E                  'is_debug': False,
E                  'is_event_property_usage_enabled': True,
E                  'kafka': True,
E                  'licensed_users_available': None,
E               -  'object_storage': False,
E               ?                    ^^^^
E               
E               +  'object_storage': True,
E               ?                    ^^^
E               
E                  'openai_available': False,
E                  'opt_out_capture': False,
E                  'plugins': True,
E                  'posthog_version': '1.43.0',
E               -  'realm': 'hosted-clickhouse',
E               +  'realm': 'cloud',
E                  'redis': True,
E               -  'region': None,
E               ?            ^^^^
E               
E               +  'region': 'US',
E               ?            ^^^^
E               
E                  'site_url': 'https://app.posthog.com',
E                  'slack_service': {'available': False, 'client_id': None}}

posthog/api/test/test_preflight.py:140: AssertionError
__________ TestPreflight.test_cloud_preflight_request_unauthenticated __________

self = <posthog.api.test.test_preflight.TestPreflight testMethod=test_cloud_preflight_request_unauthenticated>

    @pytest.mark.ee
    def test_cloud_preflight_request_unauthenticated(self):
        set_instance_setting("EMAIL_HOST", "localhost")
        set_instance_setting("SLACK_APP_CLIENT_ID", "slack-client-id")
    
        self.client.logout()  # make sure it works anonymously
    
        with self.is_cloud(True):
            with self.settings(OBJECT_STORAGE_ENABLED=False):
                response = self.client.get("/_preflight/")
                self.assertEqual(response.status_code, status.HTTP_200_OK)
    
>               self.assertEqual(
                    response.json(),
                    self.preflight_dict(
                        {
                            "email_service_available": True,
                            "slack_service": {"available": True, "client_id": "slack-client-id"},
                            "can_create_org": True,
                            "cloud": True,
                            "realm": "cloud",
                            "region": "US",
                            "object_storage": True,
                        }
                    ),
                )
E               AssertionError: {'dja[56 chars]ue, 'clickhouse': True, 'kafka': True, 'db': T[343 chars]alse} != {'dja[56 chars]ue, 'db': True, 'initiated': True, 'cloud': Tr[328 chars]True}
E                 {'available_social_auth_providers': {'github': False,
E                                                      'gitlab': False,
E                                                      'google-oauth2': False},
E               -  'can_create_org': False,
E               ?                    ^^^^
E               
E               +  'can_create_org': True,
E               ?                    ^^^
E               
E                  'celery': True,
E                  'clickhouse': True,
E               -  'cloud': False,
E               ?           ^^^^
E               
E               +  'cloud': True,
E               ?           ^^^
E               
E                  'db': True,
E                  'demo': False,
E                  'django': True,
E                  'email_service_available': True,
E                  'initiated': True,
E                  'kafka': True,
E               -  'object_storage': False,
E               ?                    ^^^^
E               
E               +  'object_storage': True,
E               ?                    ^^^
E               
E                  'plugins': True,
E               -  'realm': 'hosted-clickhouse',
E               +  'realm': 'cloud',
E                  'redis': True,
E               -  'region': None,
E               ?            ^^^^
E               
E               +  'region': 'US',
E               ?            ^^^^
E               
E                  'slack_service': {'available': True, 'client_id': 'slack-client-id'}}

posthog/api/test/test_preflight.py:116: AssertionError
____ TestPreflight.test_cloud_preflight_request_with_social_auth_providers _____

self = <posthog.api.test.test_preflight.TestPreflight testMethod=test_cloud_preflight_request_with_social_auth_providers>

    @pytest.mark.ee
    def test_cloud_preflight_request_with_social_auth_providers(self):
        set_instance_setting("EMAIL_HOST", "localhost")
    
        with self.is_cloud(True):
            with self.settings(
                SOCIAL_AUTH_GOOGLE_OAUTH2_KEY="test_key",
                SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET="test_secret",
                INSTANCE_PREFERENCES=self.instance_preferences(disable_paid_fs=True),
                OBJECT_STORAGE_ENABLED=False,
            ):
                response = self.client.get("/_preflight/")
                self.assertEqual(response.status_code, status.HTTP_200_OK)
                response = response.json()
                available_timezones = cast(dict, response).pop("available_timezones")
    
>               self.assertEqual(
                    response,
                    self.preflight_authenticated_dict(
                        {
                            "can_create_org": True,
                            "cloud": True,
                            "realm": "cloud",
                            "region": "US",
                            "instance_preferences": {"debug_queries": False, "disable_paid_fs": True},
                            "site_url": "http://localhost:8000",
                            "available_social_auth_providers": {
                                "google-oauth2": True,
                                "github": False,
                                "gitlab": False,
                            },
                            "email_service_available": True,
                            "object_storage": True,
                        }
                    ),
                )
E               AssertionError: {'dja[56 chars]ue, 'clickhouse': True, 'kafka': True, 'db': T[652 chars]: 60} != {'dja[56 chars]ue, 'db': True, 'initiated': True, 'cloud': Tr[636 chars]alse}
E                 {'available_social_auth_providers': {'github': False,
E                                                      'gitlab': False,
E               -                                      'google-oauth2': False},
E               ?                                                       ^^^^
E               
E               +                                      'google-oauth2': True},
E               ?                                                       ^^^
E               
E                  'buffer_conversion_seconds': 60,
E               -  'can_create_org': False,
E               ?                    ^^^^
E               
E               +  'can_create_org': True,
E               ?                    ^^^
E               
E                  'celery': True,
E                  'clickhouse': True,
E               -  'cloud': False,
E               ?           ^^^^
E               
E               +  'cloud': True,
E               ?           ^^^
E               
E                  'db': True,
E                  'demo': False,
E                  'django': True,
E                  'email_service_available': True,
E                  'initiated': True,
E                  'instance_preferences': {'debug_queries': False, 'disable_paid_fs': True},
E                  'is_debug': False,
E                  'is_event_property_usage_enabled': True,
E                  'kafka': True,
E                  'licensed_users_available': None,
E               -  'object_storage': False,
E               ?                    ^^^^
E               
E               +  'object_storage': True,
E               ?                    ^^^
E               
E                  'openai_available': False,
E                  'opt_out_capture': False,
E                  'plugins': True,
E                  'posthog_version': '1.43.0',
E               -  'realm': 'hosted-clickhouse',
E               +  'realm': 'cloud',
E                  'redis': True,
E               -  'region': None,
E               ?            ^^^^
E               
E               +  'region': 'US',
E               ?            ^^^^
E               
E                  'site_url': 'http://localhost:8000',
E                  'slack_service': {'available': False, 'client_id': None}}

posthog/api/test/test_preflight.py:182: AssertionError
----------------------------- Captured stderr call -----------------------------
2023-07-11T16:05:11.903241Z [warning  ] You have Google login set up, but not the required license! [posthog.utils] host= ip=127.0.0.1 pid=1138453 request_id=0763db98-c61b-46a5-9591-1501e38d887c team_id=4585 tid=140518560597824 token=token123 x_forwarded_for=
------------------------------ Captured log call -------------------------------
WARNING  posthog.utils:utils.py:917 {'request_id': '0763db98-c61b-46a5-9591-1501e38d887c', 'ip': '127.0.0.1', 'event': 'You have Google login set up, but not the required license!', 'token': 'token123', 'team_id': 4585, 'x_forwarded_for': '', 'host': '', 'timestamp': '2023-07-11T16:05:11.903241Z', 'logger': 'posthog.utils', 'level': 'warning', 'pid': 1138453, 'tid': 140518560597824}
______________ TestQuery.test_valid_recent_performance_pageviews _______________

self = <posthog.api.test.test_query.TestQuery testMethod=test_valid_recent_performance_pageviews>

    def test_valid_recent_performance_pageviews(self):
        api_response = self.client.post(
            f"/api/projects/{self.team.id}/query/",
            {"query": {"kind": "RecentPerformancePageViewNode", "dateRange": {"date_from": None, "date_to": None}}},
        )
>       assert api_response.status_code == 200
E       AssertionError: assert 400 == 200
E         +400
E         -200

posthog/api/test/test_query.py:493: AssertionError
_______ TestSignupAPI.test_api_cannot_use_whitelist_for_different_domain _______

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_api_cannot_use_whitelist_for_different_domain>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515912799504'>
mock_request = <MagicMock name='request' id='140515913511504'>

    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @pytest.mark.ee
    def test_api_cannot_use_whitelist_for_different_domain(self, mock_sso_providers, mock_request):
        mock_sso_providers.return_value = {"google-oauth2": True}
        new_org = Organization.objects.create(name="Test org")
        OrganizationDomain.objects.create(
            domain="good.com", verified_at=timezone.now(), jit_provisioning_enabled=True, organization=new_org
        )
    
        response = self.client.get(reverse("social:begin", kwargs={"backend": "google-oauth2"}))
>       self.assertEqual(response.status_code, status.HTTP_302_FOUND)
E       AssertionError: 404 != 302

posthog/api/test/test_signup.py:590: AssertionError
_ TestSignupAPI.test_cannot_social_signup_with_whitelisted_but_jit_provisioning_disabled _

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_cannot_social_signup_with_whitelisted_but_jit_provisioning_disabled>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515930924816'>
mock_request = <MagicMock name='request' id='140515907093024'>

    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @pytest.mark.ee
    def test_cannot_social_signup_with_whitelisted_but_jit_provisioning_disabled(
        self, mock_sso_providers, mock_request
    ):
        mock_sso_providers.return_value = {"google-oauth2": True}
        new_org = Organization.objects.create(name="Test org")
        OrganizationDomain.objects.create(
            domain="posthog.net", verified_at=timezone.now(), jit_provisioning_enabled=False, organization=new_org
        )  # note `jit_provisioning_enabled=False`
    
        response = self.client.get(reverse("social:begin", kwargs={"backend": "google-oauth2"}))
>       self.assertEqual(response.status_code, status.HTTP_302_FOUND)
E       AssertionError: 404 != 302

posthog/api/test/test_signup.py:544: AssertionError
_ TestSignupAPI.test_cannot_social_signup_with_whitelisted_but_unverified_domain _

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_cannot_social_signup_with_whitelisted_but_unverified_domain>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515927815024'>
mock_request = <MagicMock name='request' id='140515913634848'>

    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @pytest.mark.ee
    def test_cannot_social_signup_with_whitelisted_but_unverified_domain(self, mock_sso_providers, mock_request):
        mock_sso_providers.return_value = {"google-oauth2": True}
        new_org = Organization.objects.create(name="Test org")
        OrganizationDomain.objects.create(
            domain="posthog.net", verified_at=None, jit_provisioning_enabled=True, organization=new_org
        )  # note `verified_at=None`
    
        response = self.client.get(reverse("social:begin", kwargs={"backend": "google-oauth2"}))
>       self.assertEqual(response.status_code, status.HTTP_302_FOUND)
E       AssertionError: 404 != 302

posthog/api/test/test_signup.py:567: AssertionError
_ TestSignupAPI.test_social_signup_to_existing_org_without_whitelisted_domain_on_cloud _

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_social_signup_to_existing_org_without_whitelisted_domain_on_cloud>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515929503344'>
mock_request = <MagicMock name='request' id='140515932679968'>

    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @pytest.mark.ee
    def test_social_signup_to_existing_org_without_whitelisted_domain_on_cloud(self, mock_sso_providers, mock_request):
        with self.is_cloud(True):
            mock_sso_providers.return_value = {"google-oauth2": True}
            Organization.objects.create(name="Hogflix Movies")
            user_count = User.objects.count()
            org_count = Organization.objects.count()
            response = self.client.get(reverse("social:begin", kwargs={"backend": "google-oauth2"}))
>           self.assertEqual(response.status_code, 302)
E           AssertionError: 404 != 302

posthog/api/test/test_signup.py:615: AssertionError
______ TestSignupAPI.test_social_signup_with_whitelisted_domain_on_cloud _______

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_social_signup_with_whitelisted_domain_on_cloud>
mock_identify = <MagicMock name='identify_task' id='140515933666272'>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515933656432'>
mock_request = <MagicMock name='request' id='140515933185712'>
mock_capture = <MagicMock name='capture' id='140515933426432'>

    @patch("posthoganalytics.capture")
    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @mock.patch("posthog.tasks.user_identify.identify_task")
    @pytest.mark.ee
    def test_social_signup_with_whitelisted_domain_on_cloud(
        self, mock_identify, mock_sso_providers, mock_request, mock_capture
    ):
        with self.is_cloud(True):
>           self.run_test_for_whitelisted_domain(mock_sso_providers, mock_request, mock_capture)

posthog/api/test/test_signup.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/api/test/test_signup.py:444: in run_test_for_whitelisted_domain
    self.assertEqual(response.status_code, status.HTTP_302_FOUND)
E   AssertionError: 404 != 302
__ TestSignupAPI.test_social_signup_with_whitelisted_domain_on_cloud_reverse ___

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_social_signup_with_whitelisted_domain_on_cloud_reverse>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515912807136'>
mock_request = <MagicMock name='request' id='140515930160240'>

    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @pytest.mark.ee
    def test_social_signup_with_whitelisted_domain_on_cloud_reverse(self, mock_sso_providers, mock_request):
        with self.is_cloud(True):
            # user already exists
            User.objects.create(email="jane@hogflix.posthog.com", distinct_id=str(uuid.uuid4()))
    
            # Make sure Google Auth is valid for this test instance
            mock_sso_providers.return_value = {"google-oauth2": True}
    
            new_org = Organization.objects.create(name="Hogflix Movies")
            OrganizationDomain.objects.create(
                domain="hogflix.posthog.com",
                verified_at=timezone.now(),
                jit_provisioning_enabled=True,
                organization=new_org,
            )
            new_project = Team.objects.create(organization=new_org, name="My First Project")
            user_count = User.objects.count()
            response = self.client.get(reverse("social:begin", kwargs={"backend": "google-oauth2"}))
>           self.assertEqual(response.status_code, status.HTTP_302_FOUND)
E           AssertionError: 404 != 302

posthog/api/test/test_signup.py:509: AssertionError
___ TestSignupAPI.test_social_signup_with_whitelisted_domain_on_self_hosted ____

self = <posthog.api.test.test_signup.TestSignupAPI testMethod=test_social_signup_with_whitelisted_domain_on_self_hosted>
mock_identify = <MagicMock name='identify_task' id='140515932714320'>
mock_sso_providers = <MagicMock name='get_instance_available_sso_providers' id='140515907342000'>
mock_request = <MagicMock name='request' id='140515931379296'>
mock_capture = <MagicMock name='capture' id='140515932249232'>

    @patch("posthoganalytics.capture")
    @mock.patch("social_core.backends.base.BaseAuth.request")
    @mock.patch("posthog.api.authentication.get_instance_available_sso_providers")
    @mock.patch("posthog.tasks.user_identify.identify_task")
    @pytest.mark.ee
    def test_social_signup_with_whitelisted_domain_on_self_hosted(
        self, mock_identify, mock_sso_providers, mock_request, mock_capture
    ):
>       self.run_test_for_whitelisted_domain(mock_sso_providers, mock_request, mock_capture)

posthog/api/test/test_signup.py:475: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/api/test/test_signup.py:444: in run_test_for_whitelisted_domain
    self.assertEqual(response.status_code, status.HTTP_302_FOUND)
E   AssertionError: 404 != 302
_ TestInviteSignupAPI.test_api_invite_sign_up_where_there_are_no_default_non_private_projects _

self = <posthog.api.test.test_signup.TestInviteSignupAPI testMethod=test_api_invite_sign_up_where_there_are_no_default_non_private_projects>

    @pytest.mark.ee
    def test_api_invite_sign_up_where_there_are_no_default_non_private_projects(self):
        self.client.logout()
        invite: OrganizationInvite = OrganizationInvite.objects.create(
            target_email="test+private@posthog.com", organization=self.organization
        )
    
        self.organization.available_features = [AvailableFeature.PROJECT_BASED_PERMISSIONING]
        self.organization.save()
        self.team.access_control = True
        self.team.save()
    
        response = self.client.post(
            f"/api/signup/{invite.id}/", {"first_name": "Alice", "password": "test_password", "email_opt_in": True}
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        user = cast(User, User.objects.order_by("-pk")[0])
        self.assertEqual(user.organization_memberships.count(), 1)
        self.assertEqual(user.organization, self.organization)
        # here
>       self.assertEqual(
            user.current_team, None
        )  # User is not assigned to a project, as there are no non-private projects
E       AssertionError: <Team at 0x7fcc6a3ddb10: id=4646, uuid=UU[84 chars]123'> != None

posthog/api/test/test_signup.py:835: AssertionError
__________ TestQuery.test_join_with_property_materialized_session_id ___________

self = <test_query.TestQuery testMethod=test_join_with_property_materialized_session_id>

    def test_join_with_property_materialized_session_id(self):
        with freeze_time("2020-01-10"):
            _create_person(distinct_ids=["some_id"], team_id=self.team.pk, properties={"$some_prop": "something"})
            _create_event(
                event="$pageview",
                team=self.team,
                distinct_id="some_id",
                properties={"attr": "some_val", "$session_id": "111"},
            )
            _create_event(
                event="$pageview",
                team=self.team,
                distinct_id="some_id",
                properties={"attr": "some_val", "$session_id": "111"},
            )
            create_snapshot(distinct_id="some_id", session_id="111", timestamp=timezone.now(), team_id=self.team.pk)
    
            response = execute_hogql_query(
                "select e.event, s.session_id from events e left join session_recording_events s on s.session_id = e.properties.$session_id where e.properties.$session_id is not null limit 10",
                team=self.team,
            )
>           self.assertEqual(
                response.clickhouse,
                f"SELECT e.event, s.session_id FROM events AS e LEFT JOIN session_recording_events AS s ON equals(s.session_id, nullIf(nullIf(e.`$session_id`, ''), 'null')) WHERE and(equals(s.team_id, {self.team.pk}), equals(e.team_id, {self.team.pk}), isNotNull(nullIf(nullIf(e.`$session_id`, ''), 'null'))) LIMIT 10 SETTINGS readonly=2, max_execution_time=60, allow_experimental_object_type=True",
            )
E           AssertionError: 'SELECT e.event, s.session_id FROM events[453 chars]True' != "SELECT e.event, s.session_id FROM events[315 chars]True"
E           - SELECT e.event, s.session_id FROM events AS e LEFT JOIN session_recording_events AS s ON equals(s.session_id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, %(hogql_val_0)s), ''), 'null'), '^"|"$', '')) WHERE and(equals(s.team_id, 4830), equals(e.team_id, 4830), isNotNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, %(hogql_val_1)s), ''), 'null'), '^"|"$', ''))) LIMIT 10 SETTINGS readonly=2, max_execution_time=60, allow_experimental_object_type=True
E           + SELECT e.event, s.session_id FROM events AS e LEFT JOIN session_recording_events AS s ON equals(s.session_id, nullIf(nullIf(e.`$session_id`, ''), 'null')) WHERE and(equals(s.team_id, 4830), equals(e.team_id, 4830), isNotNull(nullIf(nullIf(e.`$session_id`, ''), 'null'))) LIMIT 10 SETTINGS readonly=2, max_execution_time=60, allow_experimental_object_type=True

posthog/hogql/test/test_query.py:599: AssertionError
_ TestCohortUtils.test_simplified_cohort_filter_properties_non_precalculated_cohort_with_behavioural_filter _

query = '\nINSERT INTO cohortpeople\nSELECT id, %(cohort_id)s as cohort_id, %(team_id)s as team_id, 1 AS sign, %(new_version)s...M cohortpeople\nWHERE team_id = %(team_id)s AND cohort_id = %(cohort_id)s AND version < %(new_version)s AND sign = 1\n'
args = {'cohort_id': 477, 'kperson_filter_pre_477_0_0_0': 'name', 'kpersonquery_person_filter_fin_477_0_0_0': 'name', 'new_version': 0, ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"workload"...direct,parallel_hash","distributed_replica_max_ignored_errors":1000,"optimize_on_insert":0}}', 'optimize_on_insert': 0}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b160>
query = '\nINSERT INTO cohortpeople\nSELECT id, 477 as cohort_id, 4882 as team_id, 1 AS sign, 0 AS version\nFROM (\n\n        ...t_id, team_id, -1, version\nFROM cohortpeople\nWHERE team_id = 4882 AND cohort_id = 477 AND version < 0 AND sign = 1\n'
params = None, with_column_types = False, external_tables = None
query_id = 'None_None_siLWwwz3'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"workload"...direct,parallel_hash","distributed_replica_max_ignored_errors":1000,"optimize_on_insert":0}}', 'optimize_on_insert': 0}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b160>
query = '\nINSERT INTO cohortpeople\nSELECT id, 477 as cohort_id, 4882 as team_id, 1 AS sign, 0 AS version\nFROM (\n\n        ...t_id, team_id, -1, version\nFROM cohortpeople\nWHERE team_id = 4882 AND cohort_id = 477 AND version < 0 AND sign = 1\n'
params = None, with_column_types = False, external_tables = None
query_id = 'None_None_siLWwwz3', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b160>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc69143910>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b160>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b160>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 42.
E           DB::Exception: Function tuple requires at least one argument.: While processing (1 = 1) AND tuple(). Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008850ead in /usr/bin/clickhouse
E           2. ? @ 0x000000000d322d8e in /usr/bin/clickhouse
E           3. ? @ 0x000000000885250c in /usr/bin/clickhouse
E           4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271db73 in /usr/bin/clickhouse
E           5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271d779 in /usr/bin/clickhouse
E           6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271e496 in /usr/bin/clickhouse
E           7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x0000000012e98e3a in /usr/bin/clickhouse
E           8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000130a50c0 in /usr/bin/clickhouse
E           9. ? @ 0x00000000130b09cf in /usr/bin/clickhouse
E           10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8230 in /usr/bin/clickhouse
E           11. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8cf2 in /usr/bin/clickhouse
E           12. ? @ 0x000000001309ca75 in /usr/bin/clickhouse
E           13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001307af9b in /usr/bin/clickhouse
E           14. DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) @ 0x0000000013087435 in /usr/bin/clickhouse
E           15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000001308e894 in /usr/bin/clickhouse
E           16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013a51c0c in /usr/bin/clickhouse
E           17. ? @ 0x0000000013a49cba in /usr/bin/clickhouse
E           18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           20. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           21. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           22. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           23. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           24. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           25. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           26. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           27. DB::InterpreterInsertQuery::execute() @ 0x0000000013a1ff91 in /usr/bin/clickhouse
E           28. ? @ 0x0000000013e18e53 in /usr/bin/clickhouse
E           29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           30. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           31. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <test_util.TestCohortUtils testMethod=test_simplified_cohort_filter_properties_non_precalculated_cohort_with_behavioural_filter>

    def test_simplified_cohort_filter_properties_non_precalculated_cohort_with_behavioural_filter(self):
        cohort = Cohort.objects.create(
            team=self.team,
            name="cohortCeption",
            filters={
                "properties": {
                    "type": "AND",
                    "values": [
                        {"key": "name", "value": "test", "type": "person"},
                        {
                            "key": "$pageview",
                            "event_type": "events",
                            "time_interval": "day",
                            "time_value": 8,
                            "seq_time_interval": "day",
                            "seq_time_value": 3,
                            "seq_event": "$pageview",
                            "seq_event_type": "events",
                            "value": "performed_event_sequence",
                            "type": "behavioral",
                        },
                    ],
                }
            },
        )
    
>       cohort.calculate_people_ch(pending_version=0)

posthog/models/cohort/test/test_util.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/models/cohort/cohort.py:201: in calculate_people_ch
    count = recalculate_cohortpeople(self, pending_version)
posthog/models/cohort/util.py:263: in recalculate_cohortpeople
    sync_execute(
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nINSERT INTO cohortpeople\nSELECT id, %(cohort_id)s as cohort_id, %(team_id)s as team_id, 1 AS sign, %(new_version)s...M cohortpeople\nWHERE team_id = %(team_id)s AND cohort_id = %(cohort_id)s AND version < %(new_version)s AND sign = 1\n'
args = {'cohort_id': 477, 'kperson_filter_pre_477_0_0_0': 'name', 'kpersonquery_person_filter_fin_477_0_0_0': 'name', 'new_version': 0, ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"workload"...direct,parallel_hash","distributed_replica_max_ignored_errors":1000,"optimize_on_insert":0}}', 'optimize_on_insert': 0}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorNumberOfArgumentsDoesntMatch: Code: 42.
E               DB::Exception: Function tuple requires at least one argument.: While processing (1 = 1) AND tuple(). Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008850ead in /usr/bin/clickhouse
E               2. ? @ 0x000000000d322d8e in /usr/bin/clickhouse
E               3. ? @ 0x000000000885250c in /usr/bin/clickhouse
E               4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271db73 in /usr/bin/clickhouse
E               5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271d779 in /usr/bin/clickhouse
E               6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271e496 in /usr/bin/clickhouse
E               7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x0000000012e98e3a in /usr/bin/clickhouse
E               8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000130a50c0 in /usr/bin/clickhouse
E               9. ? @ 0x00000000130b09cf in /usr/bin/clickhouse
E               10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8230 in /usr/bin/clickhouse
E               11. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8cf2 in /usr/bin/clickhouse
E               12. ? @ 0x000000001309ca75 in /usr/bin/clickhouse
E               13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001307af9b in /usr/bin/clickhouse
E               14. DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) @ 0x0000000013087435 in /usr/bin/clickhouse
E               15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000001308e894 in /usr/bin/clickhouse
E               16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013a51c0c in /usr/bin/clickhouse
E               17. ? @ 0x0000000013a49cba in /usr/bin/clickhouse
E               18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               20. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               21. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               22. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               23. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               24. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               25. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               26. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               27. DB::InterpreterInsertQuery::execute() @ 0x0000000013a1ff91 in /usr/bin/clickhouse
E               28. ? @ 0x0000000013e18e53 in /usr/bin/clickhouse
E               29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               30. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               31. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse

posthog/clickhouse/client/execute.py:113: CHQueryErrorNumberOfArgumentsDoesntMatch
----------------------------- Captured stderr call -----------------------------
2023-07-11T16:12:19.362976Z [warning  ] cohort_calculation_failed      [posthog.models.cohort.cohort] current_version=None host= id=477 new_version=0 pid=1138453 team_id=4726 tid=140518560597824 token=token123 x_forwarded_for=
Traceback (most recent call last):
  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 102, in sync_execute
    result = client.execute(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 304, in execute
    rv = self.process_ordinary_query(
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 491, in process_ordinary_query
    return self.receive_result(with_column_types=with_column_types,
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 151, in receive_result
    return result.get_result()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/result.py", line 50, in get_result
    for packet in self.packet_generator:
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 167, in packet_generator
    packet = self.receive_packet()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 184, in receive_packet
    raise packet.exception
clickhouse_driver.errors.ServerException: Code: 42.
DB::Exception: Function tuple requires at least one argument.: While processing (1 = 1) AND tuple(). Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008850ead in /usr/bin/clickhouse
2. ? @ 0x000000000d322d8e in /usr/bin/clickhouse
3. ? @ 0x000000000885250c in /usr/bin/clickhouse
4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271db73 in /usr/bin/clickhouse
5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271d779 in /usr/bin/clickhouse
6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271e496 in /usr/bin/clickhouse
7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x0000000012e98e3a in /usr/bin/clickhouse
8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000130a50c0 in /usr/bin/clickhouse
9. ? @ 0x00000000130b09cf in /usr/bin/clickhouse
10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8230 in /usr/bin/clickhouse
11. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8cf2 in /usr/bin/clickhouse
12. ? @ 0x000000001309ca75 in /usr/bin/clickhouse
13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001307af9b in /usr/bin/clickhouse
14. DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) @ 0x0000000013087435 in /usr/bin/clickhouse
15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000001308e894 in /usr/bin/clickhouse
16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013a51c0c in /usr/bin/clickhouse
17. ? @ 0x0000000013a49cba in /usr/bin/clickhouse
18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
19. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
20. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
21. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
22. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
23. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
24. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
25. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
26. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
27. DB::InterpreterInsertQuery::execute() @ 0x0000000013a1ff91 in /usr/bin/clickhouse
28. ? @ 0x0000000013e18e53 in /usr/bin/clickhouse
29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
30. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
31. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/workspaces/posthog/posthog/models/cohort/cohort.py", line 201, in calculate_people_ch
    count = recalculate_cohortpeople(self, pending_version)
  File "/workspaces/posthog/posthog/models/cohort/util.py", line 263, in recalculate_cohortpeople
    sync_execute(
  File "/workspaces/posthog/posthog/utils.py", line 1263, in inner
    return inner._impl(*args, **kwargs)  # type: ignore
  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 113, in sync_execute
    raise err
posthog.errors.CHQueryErrorNumberOfArgumentsDoesntMatch: Code: 42.
DB::Exception: Function tuple requires at least one argument.: While processing (1 = 1) AND tuple(). Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
1. ? @ 0x0000000008850ead in /usr/bin/clickhouse
2. ? @ 0x000000000d322d8e in /usr/bin/clickhouse
3. ? @ 0x000000000885250c in /usr/bin/clickhouse
4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271db73 in /usr/bin/clickhouse
5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271d779 in /usr/bin/clickhouse
6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271e496 in /usr/bin/clickhouse
7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x0000000012e98e3a in /usr/bin/clickhouse
8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000130a50c0 in /usr/bin/clickhouse
9. ? @ 0x00000000130b09cf in /usr/bin/clickhouse
10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8230 in /usr/bin/clickhouse
11. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8cf2 in /usr/bin/clickhouse
12. ? @ 0x000000001309ca75 in /usr/bin/clickhouse
13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001307af9b in /usr/bin/clickhouse
14. DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) @ 0x0000000013087435 in /usr/bin/clickhouse
15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000001308e894 in /usr/bin/clickhouse
16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013a51c0c in /usr/bin/clickhouse
17. ? @ 0x0000000013a49cba in /usr/bin/clickhouse
18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
19. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
20. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
21. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
22. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
23. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
24. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
25. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
26. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
27. DB::InterpreterInsertQuery::execute() @ 0x0000000013a1ff91 in /usr/bin/clickhouse
28. ? @ 0x0000000013e18e53 in /usr/bin/clickhouse
29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
30. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
31. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse

------------------------------ Captured log call -------------------------------
WARNING  posthog.models.cohort.cohort:cohort.py:208 {'id': 477, 'current_version': None, 'new_version': 0, 'event': 'cohort_calculation_failed', 'token': 'token123', 'team_id': 4726, 'x_forwarded_for': '', 'host': '', 'timestamp': '2023-07-11T16:12:19.362976Z', 'logger': 'posthog.models.cohort.cohort', 'level': 'warning', 'pid': 1138453, 'tid': 140518560597824, 'exception': 'Traceback (most recent call last):\n  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 102, in sync_execute\n    result = client.execute(\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 304, in execute\n    rv = self.process_ordinary_query(\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 491, in process_ordinary_query\n    return self.receive_result(with_column_types=with_column_types,\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 151, in receive_result\n    return result.get_result()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/result.py", line 50, in get_result\n    for packet in self.packet_generator:\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 167, in packet_generator\n    packet = self.receive_packet()\n  File "/workspaces/posthog/env/lib/python3.10/site-packages/clickhouse_driver/client.py", line 184, in receive_packet\n    raise packet.exception\nclickhouse_driver.errors.ServerException: Code: 42.\nDB::Exception: Function tuple requires at least one argument.: While processing (1 = 1) AND tuple(). Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008850ead in /usr/bin/clickhouse\n2. ? @ 0x000000000d322d8e in /usr/bin/clickhouse\n3. ? @ 0x000000000885250c in /usr/bin/clickhouse\n4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271db73 in /usr/bin/clickhouse\n5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271d779 in /usr/bin/clickhouse\n6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271e496 in /usr/bin/clickhouse\n7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x0000000012e98e3a in /usr/bin/clickhouse\n8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000130a50c0 in /usr/bin/clickhouse\n9. ? @ 0x00000000130b09cf in /usr/bin/clickhouse\n10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8230 in /usr/bin/clickhouse\n11. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8cf2 in /usr/bin/clickhouse\n12. ? @ 0x000000001309ca75 in /usr/bin/clickhouse\n13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001307af9b in /usr/bin/clickhouse\n14. DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) @ 0x0000000013087435 in /usr/bin/clickhouse\n15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000001308e894 in /usr/bin/clickhouse\n16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013a51c0c in /usr/bin/clickhouse\n17. ? @ 0x0000000013a49cba in /usr/bin/clickhouse\n18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n19. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n20. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n21. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n22. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n23. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n24. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n25. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n26. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n27. DB::InterpreterInsertQuery::execute() @ 0x0000000013a1ff91 in /usr/bin/clickhouse\n28. ? @ 0x0000000013e18e53 in /usr/bin/clickhouse\n29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n30. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n31. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/workspaces/posthog/posthog/models/cohort/cohort.py", line 201, in calculate_people_ch\n    count = recalculate_cohortpeople(self, pending_version)\n  File "/workspaces/posthog/posthog/models/cohort/util.py", line 263, in recalculate_cohortpeople\n    sync_execute(\n  File "/workspaces/posthog/posthog/utils.py", line 1263, in inner\n    return inner._impl(*args, **kwargs)  # type: ignore\n  File "/workspaces/posthog/posthog/clickhouse/client/execute.py", line 113, in sync_execute\n    raise err\nposthog.errors.CHQueryErrorNumberOfArgumentsDoesntMatch: Code: 42.\nDB::Exception: Function tuple requires at least one argument.: While processing (1 = 1) AND tuple(). Stack trace:\n\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse\n1. ? @ 0x0000000008850ead in /usr/bin/clickhouse\n2. ? @ 0x000000000d322d8e in /usr/bin/clickhouse\n3. ? @ 0x000000000885250c in /usr/bin/clickhouse\n4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271db73 in /usr/bin/clickhouse\n5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271d779 in /usr/bin/clickhouse\n6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001271e496 in /usr/bin/clickhouse\n7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x0000000012e98e3a in /usr/bin/clickhouse\n8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000130a50c0 in /usr/bin/clickhouse\n9. ? @ 0x00000000130b09cf in /usr/bin/clickhouse\n10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8230 in /usr/bin/clickhouse\n11. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000130a8cf2 in /usr/bin/clickhouse\n12. ? @ 0x000000001309ca75 in /usr/bin/clickhouse\n13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001307af9b in /usr/bin/clickhouse\n14. DB::SelectQueryExpressionAnalyzer::appendWhere(DB::ExpressionActionsChain&, bool) @ 0x0000000013087435 in /usr/bin/clickhouse\n15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x000000001308e894 in /usr/bin/clickhouse\n16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013a51c0c in /usr/bin/clickhouse\n17. ? @ 0x0000000013a49cba in /usr/bin/clickhouse\n18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse\n19. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n20. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n21. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse\n22. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse\n23. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse\n24. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse\n25. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse\n26. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse\n27. DB::InterpreterInsertQuery::execute() @ 0x0000000013a1ff91 in /usr/bin/clickhouse\n28. ? @ 0x0000000013e18e53 in /usr/bin/clickhouse\n29. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse\n30. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse\n31. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse\n'}
___ TestOrganization.test_plugins_access_level_is_determined_based_on_realm ____

self = <posthog.models.test.test_organization_model.TestOrganization testMethod=test_plugins_access_level_is_determined_based_on_realm>

    def test_plugins_access_level_is_determined_based_on_realm(self):
        with self.is_cloud(True):
            new_org, _, _ = Organization.objects.bootstrap(self.user)
>           assert new_org.plugins_access_level == Organization.PluginsAccessLevel.CONFIG
E           AssertionError: assert <PluginsAccessLevel.ROOT: 9> == <PluginsAccessLevel.CONFIG: 3>
E             +<PluginsAccessLevel.ROOT: 9>
E             -<PluginsAccessLevel.CONFIG: 3>

posthog/models/test/test_organization_model.py:58: AssertionError
_________ TestOrganization.test_plugins_are_not_preinstalled_on_cloud __________

self = <posthog.models.test.test_organization_model.TestOrganization testMethod=test_plugins_are_not_preinstalled_on_cloud>
mock_get = <MagicMock name='get' id='140515822034544'>

    @mock.patch("requests.get", side_effect=mocked_plugin_requests_get)
    def test_plugins_are_not_preinstalled_on_cloud(self, mock_get):
        with self.is_cloud(True):
            with self.settings(PLUGINS_PREINSTALLED_URLS=["https://github.com/PostHog/helloworldplugin/"]):
                new_org, _, _ = Organization.objects.bootstrap(
                    self.user, plugins_access_level=Organization.PluginsAccessLevel.INSTALL
                )
    
>       self.assertEqual(Plugin.objects.filter(organization=new_org, is_preinstalled=True).count(), 0)
E       AssertionError: 1 != 0

posthog/models/test/test_organization_model.py:52: AssertionError
________ TestOrganization.test_plugins_are_preinstalled_on_self_hosted _________

__wrapped_mock_method__ = <function NonCallableMock.assert_any_call at 0x7fcd04769480>
args = (<MagicMock name='get' id='140515821543072'>, 'https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip')
kwargs = {'headers': {}}, __tracebackhide__ = True
msg = "get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={}) c...                                        \n  \x00-}\x01                                                                "
__mock_self = <MagicMock name='get' id='140515821543072'>
actual_args = ('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip',)
actual_kwargs = {'headers': {'Authorization': 'token ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'}}
introspection = "\nKwargs:\nassert equals failed\n  \x00-{\x01                                                                \n  \x00...                                        \n  \x00-}\x01                                                                "
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None:
        __tracebackhide__ = True
        try:
>           __wrapped_mock_method__(*args, **kwargs)

env/lib/python3.10/site-packages/pytest_mock/plugin.py:392: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='get' id='140515821543072'>
args = ('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip',)
kwargs = {'headers': {}}
expected = call('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={})
cause = None
actual = [call('https://api.github.com/repos/PostHog/helloworldplugin/commits?sha=&path=', headers={'Authorization': 'Bearer gh...d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={'Authorization': 'token ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})]
expected_string = "get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={})"

    def assert_any_call(self, /, *args, **kwargs):
        """assert the mock has been called with the specified arguments.
    
        The assert passes if the mock has *ever* been called, unlike
        `assert_called_with` and `assert_called_once_with` that only pass if
        the call is the most recent one."""
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        cause = expected if isinstance(expected, Exception) else None
        actual = [self._call_matcher(c) for c in self.call_args_list]
        if cause or expected not in _AnyComparer(actual):
            expected_string = self._format_mock_call_signature(args, kwargs)
>           raise AssertionError(
                '%s call not found' % expected_string
            ) from cause
E           AssertionError: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={}) call not found

/usr/local/lib/python3.10/unittest/mock.py:1000: AssertionError

During handling of the above exception, another exception occurred:

self = <posthog.models.test.test_organization_model.TestOrganization testMethod=test_plugins_are_preinstalled_on_self_hosted>
mock_get = <MagicMock name='get' id='140515821543072'>

    @mock.patch("requests.get", side_effect=mocked_plugin_requests_get)
    def test_plugins_are_preinstalled_on_self_hosted(self, mock_get):
        with self.is_cloud(False):
            with self.settings(PLUGINS_PREINSTALLED_URLS=["https://github.com/PostHog/helloworldplugin/"]):
                new_org, _, _ = Organization.objects.bootstrap(
                    self.user, plugins_access_level=Organization.PluginsAccessLevel.INSTALL
                )
    
        self.assertEqual(Plugin.objects.filter(organization=new_org, is_preinstalled=True).count(), 1)
        self.assertEqual(
            Plugin.objects.filter(organization=new_org, is_preinstalled=True).get().name, "helloworldplugin"
        )
        self.assertEqual(mock_get.call_count, 2)
>       mock_get.assert_any_call(
            f"https://github.com/PostHog/helloworldplugin/archive/{HELLO_WORLD_PLUGIN_GITHUB_ZIP[0]}.zip", headers={}
        )
E       AssertionError: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={}) call not found
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert equals failed
E          -{                                                                
E          ^  'headers': {                    ^{'headers': { +}}                 
E          -    'Authorization': 'token ghu                                  
E          -_IZ4LlvIifZhNwYFDdkk6t74h85cXBv                                  
E          -0A9SrM',                                                         
E          -  },                                                             
E          -}

posthog/models/test/test_organization_model.py:40: AssertionError
_______________________ TestUser.test_analytics_metadata _______________________

self = <posthog.models.test.test_user_model.TestUser testMethod=test_analytics_metadata>

    def test_analytics_metadata(self):
        # One org, one team, anonymized
        organization, team, user = User.objects.bootstrap(
            organization_name="Test Org", email="test_org@posthog.com", password="12345678", anonymize_data=True
        )
    
        with self.is_cloud(True):
>           self.assertEqual(
                user.get_analytics_metadata(),
                {
                    "realm": "cloud",
                    "email_opt_in": False,
                    "anonymize_data": True,
                    "email": None,
                    "is_signed_up": True,
                    "organization_count": 1,
                    "project_count": 1,
                    "team_member_count_all": 1,
                    "completed_onboarding_once": False,
                    "organization_id": str(organization.id),
                    "project_id": str(team.uuid),
                    "project_setup_complete": False,
                    "has_password_set": True,
                    "joined_at": user.date_joined,
                    "has_social_auth": False,
                    "social_providers": [],
                    "instance_url": "http://localhost:8000",
                    "instance_tag": "none",
                    "is_email_verified": None,
                    "has_seen_product_intro_for": None,
                },
            )
E           AssertionError: {'realm': 'hosted-clickhouse', 'email_opt_in': False[595 chars]None} != {'realm': 'cloud', 'email_opt_in': False, 'anonymize[583 chars]None}
E           Diff is 733 characters long. Set self.maxDiff to None to see it.

posthog/models/test/test_user_model.py:19: AssertionError
_____________ TestPluginsUtils.test_download_plugin_archive_github _____________

__wrapped_mock_method__ = <function NonCallableMock.assert_called_with at 0x7fcd047692d0>
args = (<MagicMock name='get' id='140515567058752'>, 'https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip')
kwargs = {'headers': {}}, __tracebackhide__ = True
msg = "expected call not found.\nExpected: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48...                                        \n  \x00-}\x01                                                                "
__mock_self = <MagicMock name='get' id='140515567058752'>
actual_args = ('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip',)
actual_kwargs = {'headers': {'Authorization': 'token ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'}}
introspection = "\nKwargs:\nassert equals failed\n  \x00-{\x01                                                                \n  \x00...                                        \n  \x00-}\x01                                                                "
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None:
        __tracebackhide__ = True
        try:
>           __wrapped_mock_method__(*args, **kwargs)

env/lib/python3.10/site-packages/pytest_mock/plugin.py:392: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='get' id='140515567058752'>
args = ('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip',)
kwargs = {'headers': {}}
expected = call('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={})
actual = call('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={'Authorization': 'token ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fccd4c56b90>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={})
E           Actual: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={'Authorization': 'token ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})

/usr/local/lib/python3.10/unittest/mock.py:929: AssertionError

During handling of the above exception, another exception occurred:

self = <posthog.plugins.test.test_utils.TestPluginsUtils testMethod=test_download_plugin_archive_github>
mock_get = <MagicMock name='get' id='140515567058752'>

    def test_download_plugin_archive_github(self, mock_get):
        plugin_github_zip_1 = download_plugin_archive(
            "https://www.github.com/PostHog/helloworldplugin/commit/82c9218ee40f561b7f37a22d6b6a0ca82887ee3e",
            HELLO_WORLD_PLUGIN_GITHUB_ZIP[0],
        )
        self.assertEqual(plugin_github_zip_1, base64.b64decode(HELLO_WORLD_PLUGIN_GITHUB_ZIP[1]))
        self.assertEqual(mock_get.call_count, 1)
>       mock_get.assert_called_with(
            "https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip",
            headers={},
        )
E       AssertionError: expected call not found.
E       Expected: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={})
E       Actual: get('https://github.com/PostHog/helloworldplugin/archive/d5aa1d2b8a534f37cd93be48b214f490ef9ee904.zip', headers={'Authorization': 'token ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert equals failed
E          -{                                                                
E          ^  'headers': {                    ^{'headers': { +}}                 
E          -    'Authorization': 'token ghu                                  
E          -_IZ4LlvIifZhNwYFDdkk6t74h85cXBv                                  
E          -0A9SrM',                                                         
E          -  },                                                             
E          -}

posthog/plugins/test/test_utils.py:428: AssertionError
___________________ TestPluginsUtils.test_parse_github_urls ____________________

__wrapped_mock_method__ = <function NonCallableMock.assert_called_with at 0x7fcd047692d0>
args = (<MagicMock name='get' id='140515930056224'>, 'https://api.github.com/repos/PostHog/posthog/commits?sha=&path=')
kwargs = {'headers': {}}, __tracebackhide__ = True
msg = "expected call not found.\nExpected: get('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={}...                                        \n  \x00-}\x01                                                                "
__mock_self = <MagicMock name='get' id='140515930056224'>
actual_args = ('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=',)
actual_kwargs = {'headers': {'Authorization': 'Bearer ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'}}
introspection = "\nKwargs:\nassert equals failed\n  \x00-{\x01                                                                \n  \x00...                                        \n  \x00-}\x01                                                                "
@py_assert2 = None, @py_assert1 = False

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None:
        __tracebackhide__ = True
        try:
>           __wrapped_mock_method__(*args, **kwargs)

env/lib/python3.10/site-packages/pytest_mock/plugin.py:392: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='get' id='140515930056224'>
args = ('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=',)
kwargs = {'headers': {}}
expected = call('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={})
actual = call('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={'Authorization': 'Bearer ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fcc68893d00>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\nActual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: get('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={})
E           Actual: get('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={'Authorization': 'Bearer ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})

/usr/local/lib/python3.10/unittest/mock.py:929: AssertionError

During handling of the above exception, another exception occurred:

self = <posthog.plugins.test.test_utils.TestPluginsUtils testMethod=test_parse_github_urls>
mock_get = <MagicMock name='get' id='140515930056224'>

    def test_parse_github_urls(self, mock_get):
        parsed_url = parse_url("https://github.com/PostHog/posthog")
        self.assertEqual(parsed_url["type"], "github")
        self.assertEqual(parsed_url["user"], "PostHog")
        self.assertEqual(parsed_url["repo"], "posthog")
        self.assertEqual(parsed_url.get("tag", None), None)
        self.assertEqual(parsed_url.get("path", None), None)
        self.assertEqual(mock_get.call_count, 0)
        mock_get.reset_mock()
    
        parsed_url = parse_url("https://github.com/PostHog/posthog", get_latest_if_none=True)
        self.assertEqual(parsed_url["type"], "github")
        self.assertEqual(parsed_url["user"], "PostHog")
        self.assertEqual(parsed_url["repo"], "posthog")
        self.assertEqual(parsed_url["tag"], "MOCKLATESTCOMMIT")
        self.assertEqual(parsed_url.get("path", None), None)
        self.assertEqual(mock_get.call_count, 1)
>       mock_get.assert_called_with("https://api.github.com/repos/PostHog/posthog/commits?sha=&path=", headers={})
E       AssertionError: expected call not found.
E       Expected: get('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={})
E       Actual: get('https://api.github.com/repos/PostHog/posthog/commits?sha=&path=', headers={'Authorization': 'Bearer ghu_IZ4LlvIifZhNwYFDdkk6t74h85cXBv0A9SrM'})
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert equals failed
E          -{                                                                
E          ^  'headers': {                    ^{'headers': { +}}                 
E          -    'Authorization': 'Bearer gh                                  
E          -u_IZ4LlvIifZhNwYFDdkk6t74h85cXB                                  
E          -v0A9SrM',                                                        
E          -  },                                                             
E          -}

posthog/plugins/test/test_utils.py:44: AssertionError
___ TestClickhouseSessionRecordingsListFromSessionReplay.test_action_filter ____
posthog/test/base.py:802: in wrapped
    self.assertQueryMatchesSnapshot(query)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_session_recording_list_from_session_replay.TestClickhouseSessionRecordingsListFromSessionReplay testMethod=test_action_filter>
query = '\n\nWITH\n        events_session_ids AS (\n            SELECT\n                groupUniqArray(event) as event_names,\...RE 1=1\n        GROUP BY session_id\n        HAVING 1=1\n        ORDER BY start_time DESC\n        LIMIT 51 OFFSET 0\n'
params = None, replace_all_numbers = False

    def assertQueryMatchesSnapshot(self, query, params=None, replace_all_numbers=False):
        # :TRICKY: team_id changes every test, avoid it messing with snapshots.
        if replace_all_numbers:
            query = re.sub(r"(\"?) = \d+", r"\1 = 2", query)
            query = re.sub(r"(\"?) IN \(\d+(, \d+)*\)", r"\1 IN (1, 2, 3, 4, 5 /* ... */)", query)
            # feature flag conditions use primary keys as columns in queries, so replace those too
            query = re.sub(r"flag_\d+_condition", r"flag_X_condition", query)
            query = re.sub(r"flag_\d+_super_condition", r"flag_X_super_condition", query)
        else:
            query = re.sub(r"(team|cohort)_id(\"?) = \d+", r"\1_id\2 = 2", query)
            query = re.sub(r"\d+ as (team|cohort)_id(\"?)", r"2 as \1_id\2", query)
    
        # hog ql checks team ids differently
        query = re.sub(
            r"equals\(([^.]+\.)?team_id?, \d+\)",
            r"equals(\1team_id, 2)",
            query,
        )
    
        # Replace organization_id and notebook_id lookups, for postgres
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") = '[^']+'::uuid""",
            r"""\1 = '00000000-0000-0000-0000-000000000000'::uuid""",
            query,
        )
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") IN \('[^']+'::uuid\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid)""",
            query,
        )
    
        # Replace notebook short_id lookups, for postgres
        query = re.sub(
            r"\"posthog_notebook\".\"short_id\" = '[a-zA-Z0-9]{8}'",
            '"posthog_notebook"."short_id" = \'00000000\'',
            query,
        )
    
        # Replace person id (when querying session recording replay events)
        query = re.sub(
            "and person_id = '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'",
            r"and person_id = '00000000-0000-0000-0000-000000000000'",
            query,
        )
    
        # Replace tag id lookups for postgres
        query = re.sub(
            rf"""("posthog_tag"\."id") IN \(('[^']+'::uuid)+(, ('[^']+'::uuid)+)*\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid /* ... */)""",
            query,
        )
    
        query = re.sub(rf"""user_id:([0-9]+) request:[a-zA-Z0-9-_]+""", r"""user_id:0 request:_snapshot_""", query)
    
        # ee license check has varying datetime
        # e.g. WHERE "ee_license"."valid_until" >= '2023-03-02T21:13:59.298031+00:00'::timestamptz
        query = re.sub(
            r"ee_license\"\.\"valid_until\" >= '\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d.\d{6}\+\d\d:\d\d'::timestamptz",
            '"ee_license"."valid_until">=\'LICENSE-TIMESTAMP\'::timestamptz"',
            query,
        )
    
        # insight cache key varies with team id
        query = re.sub(
            r"WHERE \(\"posthog_insightcachingstate\".\"cache_key\" = 'cache_\w{32}'",
            """WHERE ("posthog_insightcachingstate"."cache_key" = 'cache_THE_CACHE_KEY'""",
            query,
        )
    
        # replace Savepoint numbers
        query = re.sub(r"SAVEPOINT \".+\"", "SAVEPOINT _snapshot_", query)
    
        # test_formula has some values that change on every run
        query = re.sub(r"\SELECT \[\d+, \d+] as breakdown_value", "SELECT [1, 2] as breakdown_value", query)
        query = re.sub(
            r"SELECT distinct_id,[\n\r\s]+\d+ as value",
            "SELECT distinct_id, 1 as value",
            query,
        )
    
>       assert sqlparse.format(query, reindent=True) == self.snapshot, "\n".join(self.snapshot.get_assert_diff())
E       AssertionError: [0m[2m  '[0m[0m
E       [0m[2m        ...[0m[0m
E       [0m[2m              AND (has(['Firefox'], replaceRegexpAll(JSONExtractRaw(properties, '$browser'), '^"|"$', ''))[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mA[0m[48;5;225m[38;5;90mN[0m[48;5;225m[38;5;90mD[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mh[0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90m[[0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90mc[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mf[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90mr[0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90m][0m[48;5;225m[38;5;90m,[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m)[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mA[0m[48;5;225m[38;5;90mN[0m[48;5;225m[38;5;90mD[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mh[0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90m[[0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90mc[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mf[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90mr[0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90m][0m[48;5;225m[38;5;90m,[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mw[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;225m[38;5;90m"[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m)[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mD[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mh[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23m[[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mf[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23m-[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m-[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m][0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mJ[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m^[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m|[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mD[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mh[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23m[[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mf[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23m-[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m-[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m][0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mJ[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mx[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mc[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mR[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mw[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m^[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m|[0m[48;5;195m[38;5;23m"[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[0m
E       [0m[2m     GROUP BY session_id[0m[0m
E       [0m[2m   ...[0m[0m
E       [0m[2m  '[0m[0m

posthog/test/base.py:452: AssertionError
___________________ TestTrends.test_breakdown_by_group_props ___________________

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, %(key)s), ..., %(timezone)s)  \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf790>
query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'...ime('2020-01-12 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5336_None_wJvGzuFO'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf790>
query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'...ime('2020-01-12 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5336_None_wJvGzuFO', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf790>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc63c73010>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf790>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf790>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value, count() AS count FROM events AS e WHERE (team_id = 5336) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'group_properties_0', maybe you meant: 'team_id', 'event', 'timestamp' or 'group0_properties'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           23. ? @ 0x00007f134ac45609 in ?
E           24. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_by_group_props>

    def test_breakdown_by_group_props(self):
        self._create_groups()
    
        journey = {
            "person1": [
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 12),
                    "properties": {"$group_0": "org:5"},
                    "group0_properties": {"industry": "finance"},
                },
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 13),
                    "properties": {"$group_0": "org:6"},
                    "group0_properties": {"industry": "technology"},
                },
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 15),
                    "properties": {"$group_0": "org:7", "$group_1": "company:10"},
                    "group0_properties": {"industry": "finance"},
                    "group1_properties": {"industry": "finance"},
                },
            ]
        }
    
        journeys_for(events_by_person=journey, team=self.team)
    
        filter = Filter(
            data={
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12",
                "breakdown": "industry",
                "breakdown_type": "group",
                "breakdown_group_type_index": 0,
                "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
            }
        )
>       response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:126: in _run_query
    query_type, sql, params, parse_function = self._get_sql_for_entity(adjusted_filter, team, entity)
posthog/queries/trends/trends.py:40: in _get_sql_for_entity
    ).get_query()
posthog/queries/trends/breakdown.py:197: in get_query
    _params, breakdown_filter, _breakdown_filter_params, breakdown_value = self._breakdown_prop_params(
posthog/queries/trends/breakdown.py:394: in _breakdown_prop_params
    values_arr = get_breakdown_prop_values(
posthog/queries/breakdown_props.py:201: in get_breakdown_prop_values
    return insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, %(key)s), ..., %(timezone)s)  \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value, count() AS count FROM events AS e WHERE (team_id = 5336) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'group_properties_0', maybe you meant: 'team_id', 'event', 'timestamp' or 'group0_properties'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               23. ? @ 0x00007f134ac45609 in ?
E               24. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
__________ TestTrends.test_breakdown_by_group_props_person_on_events ___________

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515032537152'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as...t, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n',)
kwargs = {'params': None, 'query_id': '5337_None_yYaO3DvH', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515032537152'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as...t, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n',)
kwargs = {'params': None, 'query_id': '5337_None_yYaO3DvH', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515032537152'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as...t, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n',)
kwargs = {'params': None, 'query_id': '5337_None_yYaO3DvH', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
args = ()
kwargs = {'params': None, 'query_id': '5337_None_yYaO3DvH', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a275f60>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
params = None, with_column_types = False, external_tables = None
query_id = '5337_None_yYaO3DvH'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a275f60>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
params = None, with_column_types = False, external_tables = None
query_id = '5337_None_yYaO3DvH', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a275f60>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc349c0e80>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a275f60>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a275f60>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS day_start, replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS breakdown_value FROM events AS e WHERE (team_id = 5337) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND notEmpty(person_id) AND (replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') IN ['finance', 'technology']) AND notEmpty(person_id) GROUP BY day_start, breakdown_value', required columns: 'team_id' 'event' 'timestamp' 'person_id' 'group_properties_0', maybe you meant: 'team_id', 'event', 'timestamp', 'person_id' or 'group0_properties'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           20. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           21. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           22. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           26. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           27. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           29. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           30. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           31. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_by_group_props_person_on_events>

    @also_test_with_materialized_columns(
        group_properties=[(0, "industry")], materialize_only_with_person_on_events=True
    )
    @snapshot_clickhouse_queries
    def test_breakdown_by_group_props_person_on_events(self):
        self._create_groups()
    
        journey = {
            "person1": [
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 12),
                    "properties": {"$group_0": "org:5"},
                    "group0_properties": {"industry": "finance"},
                },
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 13),
                    "properties": {"$group_0": "org:6"},
                    "group0_properties": {"industry": "technology"},
                },
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 15),
                    "properties": {"$group_0": "org:7", "$group_1": "company:10"},
                    "group0_properties": {"industry": "finance"},
                    "group1_properties": {"industry": "finance"},
                },
            ]
        }
    
        journeys_for(events_by_person=journey, team=self.team)
    
        filter = Filter(
            data={
                "date_from": "2020-01-01",
                "date_to": "2020-01-12",
                "breakdown": "industry",
                "breakdown_type": "group",
                "breakdown_group_type_index": 0,
                "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
            }
        )
    
        with override_instance_config("PERSON_ON_EVENTS_ENABLED", True):
>           response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:131: in _run_query
    result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS day_start, replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS breakdown_value FROM events AS e WHERE (team_id = 5337) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND notEmpty(person_id) AND (replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') IN ['finance', 'technology']) AND notEmpty(person_id) GROUP BY day_start, breakdown_value', required columns: 'team_id' 'event' 'timestamp' 'person_id' 'group_properties_0', maybe you meant: 'team_id', 'event', 'timestamp', 'person_id' or 'group0_properties'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               20. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               21. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               22. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               26. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               27. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               29. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               30. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               31. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
_________ TestTrends.test_breakdown_by_group_props_with_person_filter __________

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, %(key)s), ..., %(timezone)s)  \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe5f0>
query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'...ime('2020-01-12 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5338_None_dFOzznUi'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe5f0>
query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'...ime('2020-01-12 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5338_None_dFOzznUi', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe5f0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc15ed1930>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe5f0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe5f0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value, count() AS count FROM (SELECT timestamp, event, team_id, e.distinct_id AS `--e.distinct_id`, pdi.person_id AS `--pdi.person_id`, pdi.distinct_id AS `--pdi.distinct_id` FROM events AS e INNER JOIN (SELECT distinct_id, argMax(person_id, version) AS person_id FROM person_distinct_id2 WHERE team_id = 5338 GROUP BY distinct_id HAVING argMax(is_deleted, version) = 0) AS pdi ON `--e.distinct_id` = `--pdi.distinct_id` HAVING (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND ((toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND ((event = 'sign up') AND (team_id = 5338)))) AS `--.s` ALL INNER JOIN (SELECT id FROM person WHERE (team_id = 5338) AND (id IN (SELECT id FROM person WHERE (team_id = 5338) AND has(['value'], replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '')))) GROUP BY id HAVING (max(is_deleted) = 0) AND has(['value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'key'), '^"|"$', ''))) AS person ON `--pdi.person_id` = id WHERE (team_id = 5338) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: '--pdi.person_id' 'id' 'team_id' 'event' 'timestamp' 'group_properties_0' '--pdi.person_id' 'id' 'team_id' 'event' 'timestamp' 'group_properties_0', joined columns: 'id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           23. ? @ 0x00007f134ac45609 in ?
E           24. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_by_group_props_with_person_filter>

    def test_breakdown_by_group_props_with_person_filter(self):
        self._create_groups()
    
        Person.objects.create(team_id=self.team.pk, distinct_ids=["person1"], properties={"key": "value"})
    
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:5"},
            timestamp="2020-01-02T12:00:00Z",
            person_properties={"key": "value"},
            group0_properties={"industry": "finance"},
        )
        _create_event(
            event="sign up",
            distinct_id="person2",
            team=self.team,
            properties={"$group_0": "org:6"},
            timestamp="2020-01-02T12:00:00Z",
            person_properties={},
            group0_properties={"industry": "technology"},
        )
    
        filter = Filter(
            data={
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12T00:00:00Z",
                "breakdown": "industry",
                "breakdown_type": "group",
                "breakdown_group_type_index": 0,
                "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
                "properties": [{"key": "key", "value": "value", "type": "person"}],
            }
        )
    
>       response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6534: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:126: in _run_query
    query_type, sql, params, parse_function = self._get_sql_for_entity(adjusted_filter, team, entity)
posthog/queries/trends/trends.py:40: in _get_sql_for_entity
    ).get_query()
posthog/queries/trends/breakdown.py:197: in get_query
    _params, breakdown_filter, _breakdown_filter_params, breakdown_value = self._breakdown_prop_params(
posthog/queries/trends/breakdown.py:394: in _breakdown_prop_params
    values_arr = get_breakdown_prop_values(
posthog/queries/breakdown_props.py:201: in get_breakdown_prop_values
    return insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(group_properties_0, %(key)s), ..., %(timezone)s)  \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS value, count() AS count FROM (SELECT timestamp, event, team_id, e.distinct_id AS `--e.distinct_id`, pdi.person_id AS `--pdi.person_id`, pdi.distinct_id AS `--pdi.distinct_id` FROM events AS e INNER JOIN (SELECT distinct_id, argMax(person_id, version) AS person_id FROM person_distinct_id2 WHERE team_id = 5338 GROUP BY distinct_id HAVING argMax(is_deleted, version) = 0) AS pdi ON `--e.distinct_id` = `--pdi.distinct_id` HAVING (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND ((toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND ((event = 'sign up') AND (team_id = 5338)))) AS `--.s` ALL INNER JOIN (SELECT id FROM person WHERE (team_id = 5338) AND (id IN (SELECT id FROM person WHERE (team_id = 5338) AND has(['value'], replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '')))) GROUP BY id HAVING (max(is_deleted) = 0) AND has(['value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'key'), '^"|"$', ''))) AS person ON `--pdi.person_id` = id WHERE (team_id = 5338) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: '--pdi.person_id' 'id' 'team_id' 'event' 'timestamp' 'group_properties_0' '--pdi.person_id' 'id' 'team_id' 'event' 'timestamp' 'group_properties_0', joined columns: 'id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               23. ? @ 0x00007f134ac45609 in ?
E               24. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
_ TestTrends.test_breakdown_by_group_props_with_person_filter_person_on_events _

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515032500928'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as...t, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n',)
kwargs = {'params': None, 'query_id': '5339_None_CvvZqWzy', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515032500928'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as...t, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n',)
kwargs = {'params': None, 'query_id': '5339_None_CvvZqWzy', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515032500928'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as...t, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n',)
kwargs = {'params': None, 'query_id': '5339_None_CvvZqWzy', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
args = ()
kwargs = {'params': None, 'query_id': '5339_None_CvvZqWzy', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e79960>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
params = None, with_column_types = False, external_tables = None
query_id = '5339_None_CvvZqWzy'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e79960>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
params = None, with_column_types = False, external_tables = None
query_id = '5339_None_CvvZqWzy', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e79960>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc34991510>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e79960>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e79960>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS day_start, replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS breakdown_value FROM events AS e WHERE (team_id = 5339) AND (event = 'sign up') AND has(['value'], replaceRegexpAll(JSONExtractRaw(person_properties, 'key'), '^"|"$', '')) AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND notEmpty(person_id) AND (replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') IN ['finance']) AND notEmpty(person_id) GROUP BY day_start, breakdown_value', required columns: 'team_id' 'event' 'person_properties' 'timestamp' 'person_id' 'group_properties_0', maybe you meant: 'team_id', 'event', 'person_properties', 'timestamp', 'person_id' or 'group0_properties'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           20. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           21. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           22. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           26. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           27. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           29. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           30. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           31. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_by_group_props_with_person_filter_person_on_events>

    @also_test_with_materialized_columns(
        person_properties=["key"], group_properties=[(0, "industry")], materialize_only_with_person_on_events=True
    )
    @snapshot_clickhouse_queries
    def test_breakdown_by_group_props_with_person_filter_person_on_events(self):
        self._create_groups()
    
        Person.objects.create(team_id=self.team.pk, distinct_ids=["person1"], properties={"key": "value"})
    
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:5"},
            timestamp="2020-01-02T12:00:00Z",
            person_properties={"key": "value"},
            group0_properties={"industry": "finance"},
        )
        _create_event(
            event="sign up",
            distinct_id="person2",
            team=self.team,
            properties={"$group_0": "org:6"},
            timestamp="2020-01-02T12:00:00Z",
            person_properties={},
            group0_properties={"industry": "technology"},
        )
    
        filter = Filter(
            data={
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12T00:00:00Z",
                "breakdown": "industry",
                "breakdown_type": "group",
                "breakdown_group_type_index": 0,
                "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
                "properties": [{"key": "key", "value": "value", "type": "person"}],
            }
        )
    
        with override_instance_config("PERSON_ON_EVENTS_ENABLED", True):
>           response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6675: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:131: in _run_query
    result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total, breakdown_value FROM (\n    SELECT SUM(total) as ...art, breakdown_value\n    ORDER BY breakdown_value, day_start\n)\nGROUP BY breakdown_value\nORDER BY breakdown_value\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event': 'sign up', 'key': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS day_start, replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') AS breakdown_value FROM events AS e WHERE (team_id = 5339) AND (event = 'sign up') AND has(['value'], replaceRegexpAll(JSONExtractRaw(person_properties, 'key'), '^"|"$', '')) AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND notEmpty(person_id) AND (replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '') IN ['finance']) AND notEmpty(person_id) GROUP BY day_start, breakdown_value', required columns: 'team_id' 'event' 'person_properties' 'timestamp' 'person_id' 'group_properties_0', maybe you meant: 'team_id', 'event', 'person_properties', 'timestamp', 'person_id' or 'group0_properties'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               20. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               21. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               22. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               26. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               27. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               29. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               30. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               31. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
_________________ TestTrends.test_breakdown_with_filter_groups _________________

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...^"|"$\', \'\'))) \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'ke_brkdwn_0': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e791e0>
query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5364_None_0Ddq4DFs'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e791e0>
query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5364_None_0Ddq4DFs', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e791e0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc63c72ef0>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e791e0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e791e0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value, count() AS count FROM events AS e WHERE (team_id = 5364) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'group_properties_0' 'properties', maybe you meant: 'team_id', 'event', 'timestamp', 'group0_properties' or 'properties'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           23. ? @ 0x00007f134ac45609 in ?
E           24. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_with_filter_groups>

    def test_breakdown_with_filter_groups(self):
        self._create_groups()
    
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"key": "oh", "$group_0": "org:7", "$group_1": "company:10"},
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:5"},
            timestamp="2020-01-02T12:00:01Z",
        )
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:6"},
            timestamp="2020-01-02T12:00:02Z",
        )
    
>       response = Trends().run(
            Filter(
                data={
                    "date_from": "2020-01-01T00:00:00Z",
                    "date_to": "2020-01-12T00:00:00Z",
                    "breakdown": "key",
                    "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
                    "properties": [{"key": "industry", "value": "finance", "type": "group", "group_type_index": 0}],
                }
            ),
            self.team,
        )

posthog/queries/test/test_trends.py:6253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:126: in _run_query
    query_type, sql, params, parse_function = self._get_sql_for_entity(adjusted_filter, team, entity)
posthog/queries/trends/trends.py:40: in _get_sql_for_entity
    ).get_query()
posthog/queries/trends/breakdown.py:197: in get_query
    _params, breakdown_filter, _breakdown_filter_params, breakdown_value = self._breakdown_prop_params(
posthog/queries/trends/breakdown.py:394: in _breakdown_prop_params
    values_arr = get_breakdown_prop_values(
posthog/queries/breakdown_props.py:201: in get_breakdown_prop_values
    return insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...^"|"$\', \'\'))) \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'ke_brkdwn_0': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value, count() AS count FROM events AS e WHERE (team_id = 5364) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'group_properties_0' 'properties', maybe you meant: 'team_id', 'event', 'timestamp', 'group0_properties' or 'properties'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               23. ? @ 0x00007f134ac45609 in ?
E               24. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
________ TestTrends.test_breakdown_with_filter_groups_person_on_events _________

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...^"|"$\', \'\'))) \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'ke_brkdwn_0': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515825119680'>
args = ('\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$...industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n',)
kwargs = {'params': None, 'query_id': '5365_None_Sjow3nkM', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515825119680'>
args = ('\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$...industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n',)
kwargs = {'params': None, 'query_id': '5365_None_Sjow3nkM', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515825119680'>
args = ('\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$...industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n',)
kwargs = {'params': None, 'query_id': '5365_None_Sjow3nkM', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
args = ()
kwargs = {'params': None, 'query_id': '5365_None_Sjow3nkM', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2765f0>
query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5365_None_Sjow3nkM'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2765f0>
query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'industry\'), \'^"|"$\', \'\')))\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5365_None_Sjow3nkM', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2765f0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc694bd780>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2765f0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2765f0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value, count() AS count FROM events AS e WHERE (team_id = 5365) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'group_properties_0' 'properties', maybe you meant: 'team_id', 'event', 'timestamp', 'group0_properties' or 'properties'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           23. ? @ 0x00007f134ac45609 in ?
E           24. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_with_filter_groups_person_on_events>

    @also_test_with_materialized_columns(
        event_properties=["key"], group_properties=[(0, "industry")], materialize_only_with_person_on_events=True
    )
    @snapshot_clickhouse_queries
    def test_breakdown_with_filter_groups_person_on_events(self):
        self._create_groups()
    
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"key": "oh", "$group_0": "org:7", "$group_1": "company:10"},
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:5"},
            timestamp="2020-01-02T12:00:01Z",
        )
        _create_event(
            event="sign up",
            distinct_id="person1",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:6"},
            timestamp="2020-01-02T12:00:02Z",
        )
    
>       response = Trends().run(
            Filter(
                data={
                    "date_from": "2020-01-01T00:00:00Z",
                    "date_to": "2020-01-12T00:00:00Z",
                    "breakdown": "key",
                    "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
                    "properties": [{"key": "industry", "value": "finance", "type": "group", "group_type_index": 0}],
                }
            ),
            self.team,
        )

posthog/queries/test/test_trends.py:6301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:126: in _run_query
    query_type, sql, params, parse_function = self._get_sql_for_entity(adjusted_filter, team, entity)
posthog/queries/trends/trends.py:40: in _get_sql_for_entity
    ).get_query()
posthog/queries/trends/breakdown.py:197: in get_query
    _params, breakdown_filter, _breakdown_filter_params, breakdown_value = self._breakdown_prop_params(
posthog/queries/trends/breakdown.py:394: in _breakdown_prop_params
    values_arr = get_breakdown_prop_values(
posthog/queries/breakdown_props.py:201: in get_breakdown_prop_values
    return insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...^"|"$\', \'\'))) \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'ke_brkdwn_0': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value, count() AS count FROM events AS e WHERE (team_id = 5365) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'group_properties_0' 'properties', maybe you meant: 'team_id', 'event', 'timestamp', 'group0_properties' or 'properties'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               23. ? @ 0x00007f134ac45609 in ?
E               24. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
_______ TestTrends.test_breakdown_with_filter_groups_person_on_events_v2 _______

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...mpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'ke_brkdwn_0': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140514530214816'>
args = ('\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$...\'))) AND notEmpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n',)
kwargs = {'params': None, 'query_id': '5366_None_raT0daKT', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140514530214816'>
args = ('\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$...\'))) AND notEmpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n',)
kwargs = {'params': None, 'query_id': '5366_None_raT0daKT', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140514530214816'>
args = ('\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$...\'))) AND notEmpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n',)
kwargs = {'params': None, 'query_id': '5366_None_raT0daKT', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'\'))) AND notEmpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
args = ()
kwargs = {'params': None, 'query_id': '5366_None_raT0daKT', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe710>
query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'\'))) AND notEmpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5366_None_raT0daKT'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe710>
query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...\'\'))) AND notEmpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5366_None_raT0daKT', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe710>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc162e3bb0>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe710>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbe710>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value, count() AS count FROM events AS e ALL LEFT JOIN (SELECT argMax(override_person_id, version) AS person_id, old_person_id FROM person_overrides WHERE team_id = 5366 GROUP BY old_person_id) AS overrides ON person_id = old_person_id WHERE (team_id = 5366) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND notEmpty(person_id) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'person_id' 'team_id' 'event' 'old_person_id' 'timestamp' 'group_properties_0' 'properties', maybe you meant: 'person_id', 'team_id', 'event', 'timestamp', 'group0_properties' or 'properties', joined columns: 'overrides.person_id' 'old_person_id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           23. ? @ 0x00007f134ac45609 in ?
E           24. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_breakdown_with_filter_groups_person_on_events_v2>

    @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=True)
    @snapshot_clickhouse_queries
    def test_breakdown_with_filter_groups_person_on_events_v2(self):
        self._create_groups()
    
        id1 = str(uuid.uuid4())
        id2 = str(uuid.uuid4())
        _create_event(
            event="sign up",
            distinct_id="test_breakdown_d1",
            team=self.team,
            properties={"key": "oh", "$group_0": "org:7", "$group_1": "company:10"},
            timestamp="2020-01-02T12:00:00Z",
            person_id=id1,
        )
        _create_event(
            event="sign up",
            distinct_id="test_breakdown_d1",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:5"},
            timestamp="2020-01-02T12:00:01Z",
            person_id=id1,
        )
        _create_event(
            event="sign up",
            distinct_id="test_breakdown_d1",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:6"},
            timestamp="2020-01-02T12:00:02Z",
            person_id=id1,
        )
        _create_event(
            event="sign up",
            distinct_id="test_breakdown_d2",
            team=self.team,
            properties={"key": "uh", "$group_0": "org:6"},
            timestamp="2020-01-02T12:00:02Z",
            person_id=id2,
        )
    
        create_person_id_override_by_distinct_id("test_breakdown_d1", "test_breakdown_d2", self.team.pk)
>       response = Trends().run(
            Filter(
                data={
                    "date_from": "2020-01-01T00:00:00Z",
                    "date_to": "2020-01-12T00:00:00Z",
                    "breakdown": "key",
                    "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0, "math": "dau"}],
                    "properties": [{"key": "industry", "value": "finance", "type": "group", "group_type_index": 0}],
                }
            ),
            self.team,
        )

posthog/queries/test/test_trends.py:6361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:126: in _run_query
    query_type, sql, params, parse_function = self._get_sql_for_entity(adjusted_filter, team, entity)
posthog/queries/trends/trends.py:40: in _get_sql_for_entity
    ).get_query()
posthog/queries/trends/breakdown.py:197: in get_query
    _params, breakdown_filter, _breakdown_filter_params, breakdown_value = self._breakdown_prop_params(
posthog/queries/trends/breakdown.py:394: in _breakdown_prop_params
    values_arr = get_breakdown_prop_values(
posthog/queries/breakdown_props.py:201: in get_breakdown_prop_values
    return insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        replaceRegexpAll(JSONExtractRaw(properties, \'key\'), \'^"|"$\...mpty(e.person_id)\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'ke_brkdwn_0': 'industry', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '') AS value, count() AS count FROM events AS e ALL LEFT JOIN (SELECT argMax(override_person_id, version) AS person_id, old_person_id FROM person_overrides WHERE team_id = 5366 GROUP BY old_person_id) AS overrides ON person_id = old_person_id WHERE (team_id = 5366) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2020-01-01 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND notEmpty(person_id) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'person_id' 'team_id' 'event' 'old_person_id' 'timestamp' 'group_properties_0' 'properties', maybe you meant: 'person_id', 'team_id', 'event', 'timestamp', 'group0_properties' or 'properties', joined columns: 'overrides.person_id' 'old_person_id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               23. ? @ 0x00007f134ac45609 in ?
E               24. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
________ TestTrends.test_filtering_by_multiple_groups_person_on_events _________

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...      AND notEmpty(e.person_id)\n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515822141200'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start...            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n',)
kwargs = {'params': None, 'query_id': '5388_None_l2zLUcsp', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515822141200'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start...            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n',)
kwargs = {'params': None, 'query_id': '5388_None_l2zLUcsp', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515822141200'>
args = ('\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start...            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n',)
kwargs = {'params': None, 'query_id': '5388_None_l2zLUcsp', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...\n            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = ()
kwargs = {'params': None, 'query_id': '5388_None_l2zLUcsp', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc69f7b7f0>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...\n            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5388_None_l2zLUcsp'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc69f7b7f0>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...\n            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5388_None_l2zLUcsp', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc69f7b7f0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc63a9d9c0>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc69f7b7f0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc69f7b7f0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' 'group_properties_2' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM events AS e WHERE (team_id = 5388) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND has(['six'], replaceRegexpAll(JSONExtractRaw(group_properties_2, 'name'), '^"|"$', ''))) AND notEmpty(person_id) GROUP BY date', required columns: 'team_id' 'event' 'timestamp' 'group_properties_2' 'person_id' 'group_properties_0', maybe you meant: 'team_id', 'event', 'timestamp', 'group0_properties' or 'person_id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           29. ? @ 0x00007f134ac45609 in ?
E           30. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_filtering_by_multiple_groups_person_on_events>

    @also_test_with_materialized_columns(
        group_properties=[(0, "industry"), (2, "name")], materialize_only_with_person_on_events=True
    )
    @snapshot_clickhouse_queries
    def test_filtering_by_multiple_groups_person_on_events(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
        GroupTypeMapping.objects.create(team=self.team, group_type="company", group_type_index=2)
    
        create_group(team_id=self.team.pk, group_type_index=0, group_key="org:5", properties={"industry": "finance"})
        create_group(team_id=self.team.pk, group_type_index=0, group_key="org:6", properties={"industry": "technology"})
        create_group(team_id=self.team.pk, group_type_index=2, group_key="company:5", properties={"name": "five"})
        create_group(team_id=self.team.pk, group_type_index=2, group_key="company:6", properties={"name": "six"})
    
        journey = {
            "person1": [
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 12),
                    "properties": {"$group_0": "org:5", "$group_2": "company:6"},
                },
                {
                    "event": "sign up",
                    "timestamp": datetime(2020, 1, 2, 12, 30),
                    "properties": {"$group_2": "company:6"},
                },
                {"event": "sign up", "timestamp": datetime(2020, 1, 2, 13), "properties": {"$group_0": "org:6"}},
                {"event": "sign up", "timestamp": datetime(2020, 1, 3, 15), "properties": {"$group_2": "company:5"}},
            ]
        }
    
        journeys_for(events_by_person=journey, team=self.team)
    
        filter = Filter(
            data={
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12",
                "events": [{"id": "sign up", "name": "sign up", "type": "events", "order": 0}],
                "properties": [
                    {"key": "industry", "value": "finance", "type": "group", "group_type_index": 0},
                    {"key": "name", "value": "six", "type": "group", "group_type_index": 2},
                ],
            }
        )
    
        with override_instance_config("PERSON_ON_EVENTS_ENABLED", True):
>           response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6774: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:131: in _run_query
    result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...      AND notEmpty(e.person_id)\n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': 'sign up', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' 'group_properties_2' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM events AS e WHERE (team_id = 5388) AND (event = 'sign up') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND has(['six'], replaceRegexpAll(JSONExtractRaw(group_properties_2, 'name'), '^"|"$', ''))) AND notEmpty(person_id) GROUP BY date', required columns: 'team_id' 'event' 'timestamp' 'group_properties_2' 'person_id' 'group_properties_0', maybe you meant: 'team_id', 'event', 'timestamp', 'group0_properties' or 'person_id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               29. ? @ 0x00007f134ac45609 in ?
E               30. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
__________________ TestTrends.test_filtering_with_group_props __________________

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...^"|"$\', \'\'))))\n            \n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': '$pageview', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf9d0>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...0, \'industry\'), \'^"|"$\', \'\'))))\n\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5390_None_hcul4Mz0'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf9d0>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...0, \'industry\'), \'^"|"$\', \'\'))))\n\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5390_None_hcul4Mz0', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf9d0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc1620f3d0>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf9d0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fccfddbf9d0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM (SELECT event, team_id, timestamp, e.distinct_id AS `--e.distinct_id`, pdi.person_id AS `--pdi.person_id`, pdi.distinct_id AS `--pdi.distinct_id` FROM events AS e INNER JOIN (SELECT distinct_id, argMax(person_id, version) AS person_id FROM person_distinct_id2 WHERE team_id = 5390 GROUP BY distinct_id HAVING argMax(is_deleted, version) = 0) AS pdi ON `--e.distinct_id` = `--pdi.distinct_id` HAVING has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND ((toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND ((toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND ((event = '$pageview') AND (team_id = 5390))))) AS `--.s` ALL INNER JOIN (SELECT id FROM person WHERE (team_id = 5390) AND (id IN (SELECT id FROM person WHERE (team_id = 5390) AND has(['value'], replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '')))) GROUP BY id HAVING has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND ((max(is_deleted) = 0) AND has(['value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'key'), '^"|"$', '')))) AS person ON id = `--pdi.person_id` WHERE (team_id = 5390) AND (event = '$pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) GROUP BY date', required columns: 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0' 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0', joined columns: 'id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           29. ? @ 0x00007f134ac45609 in ?
E           30. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_filtering_with_group_props>

    def test_filtering_with_group_props(self):
        self._create_groups()
    
        Person.objects.create(team_id=self.team.pk, distinct_ids=["person1"], properties={"key": "value"})
        _create_event(event="$pageview", distinct_id="person1", team=self.team, timestamp="2020-01-02T12:00:00Z")
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:5"},
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:6"},
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:6", "$group_1": "company:10"},
            timestamp="2020-01-02T12:00:00Z",
        )
    
        filter = Filter(
            {
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12T00:00:00Z",
                "events": [{"id": "$pageview", "type": "events", "order": 0}],
                "properties": [
                    {"key": "industry", "value": "finance", "type": "group", "group_type_index": 0},
                    {"key": "key", "value": "value", "type": "person"},
                ],
            },
            team=self.team,
        )
    
>       response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6581: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:131: in _run_query
    result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...^"|"$\', \'\'))))\n            \n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': '$pageview', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM (SELECT event, team_id, timestamp, e.distinct_id AS `--e.distinct_id`, pdi.person_id AS `--pdi.person_id`, pdi.distinct_id AS `--pdi.distinct_id` FROM events AS e INNER JOIN (SELECT distinct_id, argMax(person_id, version) AS person_id FROM person_distinct_id2 WHERE team_id = 5390 GROUP BY distinct_id HAVING argMax(is_deleted, version) = 0) AS pdi ON `--e.distinct_id` = `--pdi.distinct_id` HAVING has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND ((toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND ((toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND ((event = '$pageview') AND (team_id = 5390))))) AS `--.s` ALL INNER JOIN (SELECT id FROM person WHERE (team_id = 5390) AND (id IN (SELECT id FROM person WHERE (team_id = 5390) AND has(['value'], replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '')))) GROUP BY id HAVING has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND ((max(is_deleted) = 0) AND has(['value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'key'), '^"|"$', '')))) AS person ON id = `--pdi.person_id` WHERE (team_id = 5390) AND (event = '$pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) GROUP BY date', required columns: 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0' 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0', joined columns: 'id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               29. ? @ 0x00007f134ac45609 in ?
E               30. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
_____ TestTrends.test_filtering_with_group_props_event_with_no_group_data ______

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...^"|"$\', \'\'))))\n            \n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': '$pageview', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2756f0>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...0, \'industry\'), \'^"|"$\', \'\'))))\n\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5391_None_Vd9PWSiG'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2756f0>
query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...0, \'industry\'), \'^"|"$\', \'\'))))\n\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
params = None, with_column_types = False, external_tables = None
query_id = '5391_None_Vd9PWSiG', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2756f0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc68369420>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2756f0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2756f0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM (SELECT event, team_id, timestamp, e.distinct_id AS `--e.distinct_id`, pdi.person_id AS `--pdi.person_id`, pdi.distinct_id AS `--pdi.distinct_id` FROM events AS e INNER JOIN (SELECT distinct_id, argMax(person_id, version) AS person_id FROM person_distinct_id2 WHERE team_id = 5391 GROUP BY distinct_id HAVING argMax(is_deleted, version) = 0) AS pdi ON `--e.distinct_id` = `--pdi.distinct_id` HAVING (NOT has(['textiles'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', ''))) AND ((toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND ((toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND ((event = '$pageview') AND (team_id = 5391))))) AS `--.s` ALL INNER JOIN (SELECT id FROM person WHERE (team_id = 5391) AND (id IN (SELECT id FROM person WHERE (team_id = 5391) AND has(['value'], replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '')))) GROUP BY id HAVING (NOT has(['textiles'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', ''))) AND ((max(is_deleted) = 0) AND has(['value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'key'), '^"|"$', '')))) AS person ON id = `--pdi.person_id` WHERE (team_id = 5391) AND (event = '$pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND (NOT has(['textiles'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', ''))) GROUP BY date', required columns: 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0' 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0', joined columns: 'id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           29. ? @ 0x00007f134ac45609 in ?
E           30. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_filtering_with_group_props_event_with_no_group_data>

    def test_filtering_with_group_props_event_with_no_group_data(self):
        self._create_groups()
    
        Person.objects.create(team_id=self.team.pk, distinct_ids=["person1"], properties={"key": "value"})
        _create_event(event="$pageview", distinct_id="person1", team=self.team, timestamp="2020-01-02T12:00:00Z")
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            timestamp="2020-01-02T12:00:00Z",
        )
    
        filter = Filter(
            {
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12T00:00:00Z",
                "events": [{"id": "$pageview", "type": "events", "order": 0}],
                "properties": [
                    {
                        "key": "industry",
                        "operator": "is_not",
                        "value": "textiles",
                        "type": "group",
                        "group_type_index": 0,
                    },
                    {"key": "key", "value": "value", "type": "person"},
                ],
            },
            team=self.team,
        )
    
>       response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6627: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:131: in _run_query
    result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...^"|"$\', \'\'))))\n            \n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': '$pageview', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM (SELECT event, team_id, timestamp, e.distinct_id AS `--e.distinct_id`, pdi.person_id AS `--pdi.person_id`, pdi.distinct_id AS `--pdi.distinct_id` FROM events AS e INNER JOIN (SELECT distinct_id, argMax(person_id, version) AS person_id FROM person_distinct_id2 WHERE team_id = 5391 GROUP BY distinct_id HAVING argMax(is_deleted, version) = 0) AS pdi ON `--e.distinct_id` = `--pdi.distinct_id` HAVING (NOT has(['textiles'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', ''))) AND ((toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND ((toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND ((event = '$pageview') AND (team_id = 5391))))) AS `--.s` ALL INNER JOIN (SELECT id FROM person WHERE (team_id = 5391) AND (id IN (SELECT id FROM person WHERE (team_id = 5391) AND has(['value'], replaceRegexpAll(JSONExtractRaw(properties, 'key'), '^"|"$', '')))) GROUP BY id HAVING (NOT has(['textiles'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', ''))) AND ((max(is_deleted) = 0) AND has(['value'], replaceRegexpAll(JSONExtractRaw(argMax(person.properties, version), 'key'), '^"|"$', '')))) AS person ON id = `--pdi.person_id` WHERE (team_id = 5391) AND (event = '$pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND (NOT has(['textiles'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', ''))) GROUP BY date', required columns: 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0' 'id' 'team_id' 'event' '--pdi.person_id' 'timestamp' 'group_properties_0', joined columns: 'id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               29. ? @ 0x00007f134ac45609 in ?
E               30. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
_________ TestTrends.test_filtering_with_group_props_person_on_events __________

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...      AND notEmpty(e.person_id)\n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': '$pageview', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515044935232'>
args = ("\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start...            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n",)
kwargs = {'params': None, 'query_id': '5392_None_1oZ3g0ry', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515044935232'>
args = ("\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start...            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n",)
kwargs = {'params': None, 'query_id': '5392_None_1oZ3g0ry', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515044935232'>
args = ("\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start...            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n",)
kwargs = {'params': None, 'query_id': '5392_None_1oZ3g0ry', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = "\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...\n            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n"
args = ()
kwargs = {'params': None, 'query_id': '5392_None_1oZ3g0ry', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...out_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6925d390>
query = "\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...\n            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5392_None_1oZ3g0ry'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6925d390>
query = "\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...\n            AND notEmpty(e.person_id)\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5392_None_1oZ3g0ry', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6925d390>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc3556c4f0>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6925d390>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6925d390>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM events AS e WHERE (team_id = 5392) AND (event = '$pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND has(['value'], replaceRegexpAll(JSONExtractRaw(person_properties, 'key'), '^"|"$', ''))) AND notEmpty(person_id) GROUP BY date', required columns: 'team_id' 'event' 'timestamp' 'person_properties' 'group_properties_0' 'person_id', maybe you meant: 'team_id', 'event', 'timestamp', 'person_properties', 'group0_properties' or 'person_id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           29. ? @ 0x00007f134ac45609 in ?
E           30. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_filtering_with_group_props_person_on_events>

    @also_test_with_materialized_columns(
        person_properties=["key"], group_properties=[(0, "industry")], materialize_only_with_person_on_events=True
    )
    @snapshot_clickhouse_queries
    def test_filtering_with_group_props_person_on_events(self):
        self._create_groups()
    
        Person.objects.create(team_id=self.team.pk, distinct_ids=["person1"], properties={"key": "value"})
        _create_event(event="$pageview", distinct_id="person1", team=self.team, timestamp="2020-01-02T12:00:00Z")
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:5"},
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:6"},
            timestamp="2020-01-02T12:00:00Z",
        )
        _create_event(
            event="$pageview",
            distinct_id="person1",
            team=self.team,
            properties={"$group_0": "org:6", "$group_1": "company:10"},
            timestamp="2020-01-02T12:00:00Z",
        )
    
        filter = Filter(
            {
                "date_from": "2020-01-01T00:00:00Z",
                "date_to": "2020-01-12T00:00:00Z",
                "events": [{"id": "$pageview", "type": "events", "order": 0}],
                "properties": [
                    {"key": "industry", "value": "finance", "type": "group", "group_type_index": 0},
                    {"key": "key", "value": "value", "type": "person"},
                ],
            },
            team=self.team,
        )
    
        with override_instance_config("PERSON_ON_EVENTS_ENABLED", True):
>           response = Trends().run(filter, self.team)

posthog/queries/test/test_trends.py:6726: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/trends.py:232: in run
    result.extend(handle_compare(filter, self._run_query, team, entity=entity))
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/trends.py:131: in _run_query
    result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...      AND notEmpty(e.person_id)\n        \nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n'
args = {'date_from': '2020-01-01 00:00:00', 'date_to': '2020-01-12 23:59:59', 'event_0': '$pageview', 'interval': 'day', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ax_ignored_errors":1000,"timeout_before_checking_execution_speed":60}}', 'timeout_before_checking_execution_speed': 60}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'group_properties_0' while processing query: 'SELECT count() AS total, toStartOfDay(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date FROM events AS e WHERE (team_id = 5392) AND (event = '$pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime(toStartOfDay(toDateTime('2020-01-01 00:00:00', 'UTC')), 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-12 23:59:59', 'UTC')) AND (has(['finance'], replaceRegexpAll(JSONExtractRaw(group_properties_0, 'industry'), '^"|"$', '')) AND has(['value'], replaceRegexpAll(JSONExtractRaw(person_properties, 'key'), '^"|"$', ''))) AND notEmpty(person_id) GROUP BY date', required columns: 'team_id' 'event' 'timestamp' 'person_properties' 'group_properties_0' 'person_id', maybe you meant: 'team_id', 'event', 'timestamp', 'person_properties', 'group0_properties' or 'person_id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               15. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               16. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               21. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               23. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               24. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               25. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               27. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               29. ? @ 0x00007f134ac45609 in ?
E               30. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
____________________ TestTrends.test_trends_with_hogql_math ____________________
posthog/test/base.py:802: in wrapped
    self.assertQueryMatchesSnapshot(query)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <posthog.queries.test.test_trends.TestTrends testMethod=test_trends_with_hogql_math>
query = "\nSELECT groupArray(day_start) as date, groupArray(count) AS total FROM (\n    SELECT SUM(total) AS count, day_start\...eTime('2020-01-04 23:59:59', 'UTC')\n\n\n\nGROUP BY date\n\n    )\n    GROUP BY day_start\n    ORDER BY day_start\n)\n"
params = None, replace_all_numbers = False

    def assertQueryMatchesSnapshot(self, query, params=None, replace_all_numbers=False):
        # :TRICKY: team_id changes every test, avoid it messing with snapshots.
        if replace_all_numbers:
            query = re.sub(r"(\"?) = \d+", r"\1 = 2", query)
            query = re.sub(r"(\"?) IN \(\d+(, \d+)*\)", r"\1 IN (1, 2, 3, 4, 5 /* ... */)", query)
            # feature flag conditions use primary keys as columns in queries, so replace those too
            query = re.sub(r"flag_\d+_condition", r"flag_X_condition", query)
            query = re.sub(r"flag_\d+_super_condition", r"flag_X_super_condition", query)
        else:
            query = re.sub(r"(team|cohort)_id(\"?) = \d+", r"\1_id\2 = 2", query)
            query = re.sub(r"\d+ as (team|cohort)_id(\"?)", r"2 as \1_id\2", query)
    
        # hog ql checks team ids differently
        query = re.sub(
            r"equals\(([^.]+\.)?team_id?, \d+\)",
            r"equals(\1team_id, 2)",
            query,
        )
    
        # Replace organization_id and notebook_id lookups, for postgres
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") = '[^']+'::uuid""",
            r"""\1 = '00000000-0000-0000-0000-000000000000'::uuid""",
            query,
        )
        query = re.sub(
            rf"""("organization_id"|"posthog_organization"\."id"|"posthog_notebook"."id") IN \('[^']+'::uuid\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid)""",
            query,
        )
    
        # Replace notebook short_id lookups, for postgres
        query = re.sub(
            r"\"posthog_notebook\".\"short_id\" = '[a-zA-Z0-9]{8}'",
            '"posthog_notebook"."short_id" = \'00000000\'',
            query,
        )
    
        # Replace person id (when querying session recording replay events)
        query = re.sub(
            "and person_id = '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'",
            r"and person_id = '00000000-0000-0000-0000-000000000000'",
            query,
        )
    
        # Replace tag id lookups for postgres
        query = re.sub(
            rf"""("posthog_tag"\."id") IN \(('[^']+'::uuid)+(, ('[^']+'::uuid)+)*\)""",
            r"""\1 IN ('00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid, '00000000-0000-0000-0000-000000000000'::uuid /* ... */)""",
            query,
        )
    
        query = re.sub(rf"""user_id:([0-9]+) request:[a-zA-Z0-9-_]+""", r"""user_id:0 request:_snapshot_""", query)
    
        # ee license check has varying datetime
        # e.g. WHERE "ee_license"."valid_until" >= '2023-03-02T21:13:59.298031+00:00'::timestamptz
        query = re.sub(
            r"ee_license\"\.\"valid_until\" >= '\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d.\d{6}\+\d\d:\d\d'::timestamptz",
            '"ee_license"."valid_until">=\'LICENSE-TIMESTAMP\'::timestamptz"',
            query,
        )
    
        # insight cache key varies with team id
        query = re.sub(
            r"WHERE \(\"posthog_insightcachingstate\".\"cache_key\" = 'cache_\w{32}'",
            """WHERE ("posthog_insightcachingstate"."cache_key" = 'cache_THE_CACHE_KEY'""",
            query,
        )
    
        # replace Savepoint numbers
        query = re.sub(r"SAVEPOINT \".+\"", "SAVEPOINT _snapshot_", query)
    
        # test_formula has some values that change on every run
        query = re.sub(r"\SELECT \[\d+, \d+] as breakdown_value", "SELECT [1, 2] as breakdown_value", query)
        query = re.sub(
            r"SELECT distinct_id,[\n\r\s]+\d+ as value",
            "SELECT distinct_id, 1 as value",
            query,
        )
    
>       assert sqlparse.format(query, reindent=True) == self.snapshot, "\n".join(self.snapshot.get_assert_diff())
E       AssertionError: [0m[2m  '[0m[0m
E       [0m[2m             ...[0m[0m
E       [0m[2m                         toStartOfWeek(toDateTime('2019-12-28 00:00:00', 'UTC'))[0m[0m
E       [0m[48;5;225m[38;5;90m-[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mU[0m[48;5;225m[38;5;90mN[0m[48;5;225m[38;5;90mI[0m[48;5;225m[38;5;90mO[0m[48;5;225m[38;5;90mN[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mA[0m[48;5;225m[38;5;90mL[0m[48;5;225m[38;5;90mL[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mS[0m[48;5;225m[38;5;90mE[0m[48;5;225m[38;5;90mL[0m[48;5;225m[38;5;90mE[0m[48;5;225m[38;5;90mC[0m[48;5;225m[38;5;90mT[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mp[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90mu[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90mv[0m[48;5;225m[38;5;90mg[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mI[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90m6[0m[48;5;225m[38;5;90m4[0m[48;5;225m[38;5;90mO[0m[48;5;225m[38;5;90mr[0m[48;5;225m[38;5;90mN[0m[48;5;225m[38;5;90mu[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90mu[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90mI[0m[48;5;225m[38;5;90mf[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90mu[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90mI[0m[48;5;225m[38;5;90mf[0m[48;5;225m[38;5;90m([0m[48;5;225m[38;5;90me[0m[48;5;90m[38;5;225mv[0m[48;5;225m[38;5;90me[0m[48;5;90m[38;5;225mn[0m[48;5;90m[38;5;225mt[0m[48;5;225m[38;5;90ms[0m[48;5;90m[38;5;225m.[0m[48;5;90m[38;5;225m`[0m[48;5;225m[38;5;90m$[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90me[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90ms[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90m_[0m[48;5;225m[38;5;90mi[0m[48;5;225m[38;5;90md[0m[48;5;90m[38;5;225m`[0m[48;5;225m[38;5;90m,[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m,[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90mn[0m[48;5;225m[38;5;90mu[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90m'[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m,[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90m1[0m[48;5;225m[38;5;90m0[0m[48;5;225m[38;5;90m0[0m[48;5;225m[38;5;90m0[0m[48;5;225m[38;5;90m)[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mA[0m[48;5;225m[38;5;90mS[0m[48;5;225m[38;5;90m [0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90mo[0m[48;5;225m[38;5;90mt[0m[48;5;225m[38;5;90ma[0m[48;5;225m[38;5;90ml[0m[48;5;225m[38;5;90m,[0m[0m
E       [0m[48;5;195m[38;5;23m+[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mU[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mI[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23mL[0m[48;5;195m[38;5;23mL[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mL[0m[48;5;195m[38;5;23mE[0m[48;5;195m[38;5;23mC[0m[48;5;195m[38;5;23mT[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mp[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23mu[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23mv[0m[48;5;195m[38;5;23mg[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mI[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23m6[0m[48;5;195m[38;5;23m4[0m[48;5;195m[38;5;23mO[0m[48;5;195m[38;5;23mr[0m[48;5;195m[38;5;23mN[0m[48;5;195m[38;5;23mu[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m([0m[48;5;23m[38;5;195mr[0m[48;5;23m[38;5;195me[0m[48;5;23m[38;5;195mp[0m[48;5;23m[38;5;195ml[0m[48;5;23m[38;5;195ma[0m[48;5;23m[38;5;195mc[0m[48;5;23m[38;5;195me[0m[48;5;23m[38;5;195mR[0m[48;5;23m[38;5;195me[0m[48;5;23m[38;5;195mg[0m[48;5;23m[38;5;195me[0m[48;5;23m[38;5;195mx[0m[48;5;23m[38;5;195mp[0m[48;5;23m[38;5;195mA[0m[48;5;23m[38;5;195ml[0m[48;5;23m[38;5;195ml[0m[48;5;23m[38;5;195m([0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23mu[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23mI[0m[48;5;195m[38;5;23mf[0m[48;5;195m[38;5;23m([0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23mu[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23mI[0m[48;5;195m[38;5;23mf[0m[48;5;195m[38;5;23m([0m[48;5;23m[38;5;195mJ[0m[48;5;23m[38;5;195mS[0m[48;5;23m[38;5;195mO[0m[48;5;23m[38;5;195mN[0m[48;5;23m[38;5;195mE[0m[48;5;23m[38;5;195mx[0m[48;5;23m[38;5;195mt[0m[48;5;23m[38;5;195mr[0m[48;5;23m[38;5;195ma[0m[48;5;23m[38;5;195mc[0m[48;5;23m[38;5;195mt[0m[48;5;23m[38;5;195mR[0m[48;5;23m[38;5;195ma[0m[48;5;23m[38;5;195mw[0m[48;5;23m[38;5;195m([0m[48;5;23m[38;5;195mp[0m[48;5;23m[38;5;195mr[0m[48;5;23m[38;5;195mo[0m[48;5;23m[38;5;195mp[0m[48;5;195m[38;5;23me[0m[48;5;23m[38;5;195mr[0m[48;5;23m[38;5;195mt[0m[48;5;23m[38;5;195mi[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;23m[38;5;195m,[0m[48;5;23m[38;5;195m [0m[48;5;23m[38;5;195m'[0m[48;5;195m[38;5;23m$[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23me[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23ms[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23m_[0m[48;5;195m[38;5;23mi[0m[48;5;195m[38;5;23md[0m[48;5;23m[38;5;195m'[0m[48;5;23m[38;5;195m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23mn[0m[48;5;195m[38;5;23mu[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m'[0m[48;5;195m[38;5;23m)[0m[48;5;23m[38;5;195m,[0m[48;5;23m[38;5;195m [0m[48;5;23m[38;5;195m'[0m[48;5;23m[38;5;195m^[0m[48;5;23m[38;5;195m"[0m[48;5;23m[38;5;195m|[0m[48;5;23m[38;5;195m"[0m[48;5;23m[38;5;195m$[0m[48;5;23m[38;5;195m'[0m[48;5;23m[38;5;195m,[0m[48;5;23m[38;5;195m [0m[48;5;23m[38;5;195m'[0m[48;5;23m[38;5;195m'[0m[48;5;23m[38;5;195m)[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m,[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23m1[0m[48;5;195m[38;5;23m0[0m[48;5;195m[38;5;23m0[0m[48;5;195m[38;5;23m0[0m[48;5;195m[38;5;23m)[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mA[0m[48;5;195m[38;5;23mS[0m[48;5;195m[38;5;23m [0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23mo[0m[48;5;195m[38;5;23mt[0m[48;5;195m[38;5;23ma[0m[48;5;195m[38;5;23ml[0m[48;5;195m[38;5;23m,[0m[0m
E       [0m[2m                         toStartOfWeek(toTimeZone(toDateTime(timestamp, 'UTC'), 'UTC')) AS date[0m[0m
E       [0m[2m             ...[0m[0m
E       [0m[2m  '[0m[0m

posthog/test/base.py:452: AssertionError
_______________________ TestFormula.test_breakdown_hogql _______________________

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtr..., %(timezone)s)  \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2019-12-28 00:00:00', 'date_to': '2020-01-04 23:59:59', 'e_0_math_prop': 'session duration', 'event_None': 'session start', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515929630240'>
args = ("\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExt...e('2020-01-04 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n",)
kwargs = {'params': None, 'query_id': '5559_None_372t9e82', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515929630240'>
args = ("\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExt...e('2020-01-04 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n",)
kwargs = {'params': None, 'query_id': '5559_None_372t9e82', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515929630240'>
args = ("\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExt...e('2020-01-04 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n",)
kwargs = {'params': None, 'query_id': '5559_None_372t9e82', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtr...ime('2020-01-04 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
args = ()
kwargs = {'params': None, 'query_id': '5559_None_372t9e82', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2770d0>
query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtr...ime('2020-01-04 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5559_None_372t9e82'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2770d0>
query = "\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtr...ime('2020-01-04 23:59:59', 'UTC')\n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT 25 OFFSET 0\n)\n"
params = None, with_column_types = False, external_tables = None
query_id = '5559_None_372t9e82', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2770d0>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc16a61570>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2770d0>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc6a2770d0>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'location'), ''), 'null'), '^"|"$', '')), '')) AS value, sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS count FROM events AS e WHERE (team_id = 5559) AND (event = 'session start') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'person_props' 'properties', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E           9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E           10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E           11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E           12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           23. ? @ 0x00007f134ac45609 in ?
E           24. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <test_formula.TestFormula testMethod=test_breakdown_hogql>

    @snapshot_clickhouse_queries
    def test_breakdown_hogql(self):
>       response = self._run(
            {"breakdown": "concat(person.properties.$some_prop, ' : ', properties.location)", "breakdown_type": "hogql"}
        )

posthog/queries/trends/test/test_formula.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/trends/test/test_formula.py:97: in _run
    action_response = Trends().run(
posthog/queries/trends/trends.py:220: in run
    return handle_compare(filter, self._run_formula_query, team)
posthog/queries/base.py:72: in handle_compare
    base_entitites = func(filter=filter, team=team, **kwargs)
posthog/queries/trends/formula.py:27: in _run_formula_query
    _, sql, entity_params, _ = self._get_sql_for_entity(filter, team, entity)  # type: ignore
posthog/queries/trends/trends.py:40: in _get_sql_for_entity
    ).get_query()
posthog/queries/trends/breakdown.py:197: in get_query
    _params, breakdown_filter, _breakdown_filter_params, breakdown_value = self._breakdown_prop_params(
posthog/queries/trends/breakdown.py:394: in _breakdown_prop_params
    values_arr = get_breakdown_prop_values(
posthog/queries/breakdown_props.py:201: in get_breakdown_prop_values
    return insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT groupArray(value) FROM (\n    SELECT\n        concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtr..., %(timezone)s)  \n    GROUP BY value\n    ORDER BY count DESC, value DESC\n    LIMIT %(limit)s OFFSET %(offset)s\n)\n'
args = {'date_from': '2019-12-28 00:00:00', 'date_to': '2020-01-04 23:59:59', 'e_0_math_prop': 'session duration', 'event_None': 'session start', ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: 'person_props' while processing query: 'SELECT concat(ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person_props, '$some_prop'), ''), 'null'), '^"|"$', '')), ''), ' : ', ifNull(toString(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(properties, 'location'), ''), 'null'), '^"|"$', '')), '')) AS value, sum(toFloat64OrNull(replaceRegexpAll(JSONExtractRaw(properties, 'session duration'), '^"|"$', ''))) AS count FROM events AS e WHERE (team_id = 5559) AND (event = 'session start') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2019-12-28 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2020-01-04 23:59:59', 'UTC')) GROUP BY value ORDER BY count DESC, value DESC LIMIT 0, 25', required columns: 'team_id' 'event' 'timestamp' 'person_props' 'properties', maybe you meant: 'team_id', 'event', 'timestamp' or 'properties'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool, bool) @ 0x0000000013aead26 in /usr/bin/clickhouse
E               9. DB::getDatabaseAndTablesWithColumns(std::vector<DB::ASTTableExpression const*, std::allocator<DB::ASTTableExpression const*>> const&, std::shared_ptr<DB::Context const>, bool, bool, bool) @ 0x0000000013e346ad in /usr/bin/clickhouse
E               10. DB::JoinedTables::resolveTables() @ 0x0000000013b3178d in /usr/bin/clickhouse
E               11. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a411c5 in /usr/bin/clickhouse
E               12. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               13. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               14. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               15. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               17. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               18. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               19. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               20. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               21. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               22. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               23. ? @ 0x00007f134ac45609 in ?
E               24. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
____________ TestPerson.test_group_query_includes_recording_events _____________

query = '\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $session...RDER BY actor_value DESC, actor_id DESC /* Also sorting by ID for determinism */\nLIMIT %(limit)s\nOFFSET %(offset)s\n'
args = {'date_from': '2021-01-21 00:00:00', 'date_to': '2021-01-21 23:59:59', 'event_0': 'pageview', 'limit': 100, ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
>               result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )

posthog/clickhouse/client/execute.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515822204912'>
args = ('\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $sessio...ND "$group_0" != \'\'\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n',)
kwargs = {'params': None, 'query_id': '5579_None_heRgkjtg', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def __call__(self, /, *args, **kwargs):
        # can't use self in-case a function / method we are mocking uses self
        # in the signature
        self._mock_check_sig(*args, **kwargs)
        self._increment_mock_call(*args, **kwargs)
>       return self._mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515822204912'>
args = ('\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $sessio...ND "$group_0" != \'\'\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n',)
kwargs = {'params': None, 'query_id': '5579_None_heRgkjtg', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def _mock_call(self, /, *args, **kwargs):
>       return self._execute_mock_call(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='execute' id='140515822204912'>
args = ('\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $sessio...ND "$group_0" != \'\'\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n',)
kwargs = {'params': None, 'query_id': '5579_None_heRgkjtg', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}
effect = None

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
                raise effect
            elif not _callable(effect):
                result = next(effect)
                if _is_exception(result):
                    raise result
            else:
                result = effect(*args, **kwargs)
    
            if result is not DEFAULT:
                return result
    
        if self._mock_return_value is not DEFAULT:
            return self.return_value
    
        if self._mock_wraps is not None:
>           return self._mock_wraps(*args, **kwargs)

/usr/local/lib/python3.10/unittest/mock.py:1188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $session... AND "$group_0" != \'\'\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n'
args = ()
kwargs = {'params': None, 'query_id': '5579_None_heRgkjtg', 'settings': {'distributed_replica_max_ignored_errors': 1000, 'join_...{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}, 'with_column_types': False}

    def execute_wrapper(query, *args, **kwargs):
        if sqlparse.format(query, strip_comments=True).strip().startswith(query_prefixes):
            queries.append(query)
>       return original_client_execute(query, *args, **kwargs)

posthog/test/base.py:673: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b490>
query = '\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $session... AND "$group_0" != \'\'\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n'
params = None, with_column_types = False, external_tables = None
query_id = '5579_None_heRgkjtg'
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
types_check = False, columnar = False

    def execute(self, query, params=None, with_column_types=False,
                external_tables=None, query_id=None, settings=None,
                types_check=False, columnar=False):
        """
        Executes query.
    
        Establishes new connection if it wasn't established yet.
        After query execution connection remains intact for next queries.
        If connection can't be reused it will be closed and new connection will
        be created.
    
        :param query: query that will be send to server.
        :param params: substitution parameters for SELECT queries and data for
                       INSERT queries. Data for INSERT can be `list`, `tuple`
                       or :data:`~types.GeneratorType`.
                       Defaults to ``None`` (no parameters  or data).
        :param with_column_types: if specified column names and types will be
                                  returned alongside with result.
                                  Defaults to ``False``.
        :param external_tables: external tables to send.
                                Defaults to ``None`` (no external tables).
        :param query_id: the query identifier. If no query id specified
                         ClickHouse server will generate it.
        :param settings: dictionary of query settings.
                         Defaults to ``None`` (no additional settings).
        :param types_check: enables type checking of data for INSERT queries.
                            Causes additional overhead. Defaults to ``False``.
        :param columnar: if specified the result of the SELECT query will be
                         returned in column-oriented form.
                         It also allows to INSERT data in columnar form.
                         Defaults to ``False`` (row-like form).
    
        :return: * number of inserted rows for INSERT queries with data.
                   Returning rows count from INSERT FROM SELECT is not
                   supported.
                 * if `with_column_types=False`: `list` of `tuples` with
                   rows/columns.
                 * if `with_column_types=True`: `tuple` of 2 elements:
                    * The first element is `list` of `tuples` with
                      rows/columns.
                    * The second element information is about columns: names
                      and types.
        """
    
        start_time = time()
    
        with self.disconnect_on_error(query, settings):
            # INSERT queries can use list/tuple/generator of list/tuples/dicts.
            # For SELECT parameters can be passed in only in dict right now.
            is_insert = isinstance(params, (list, tuple, types.GeneratorType))
    
            if is_insert:
                rv = self.process_insert_query(
                    query, params, external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )
            else:
>               rv = self.process_ordinary_query(
                    query, params=params, with_column_types=with_column_types,
                    external_tables=external_tables,
                    query_id=query_id, types_check=types_check,
                    columnar=columnar
                )

env/lib/python3.10/site-packages/clickhouse_driver/client.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b490>
query = '\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $session... AND "$group_0" != \'\'\n        )\nGROUP BY actor_id\nORDER BY actor_value DESC, actor_id DESC\nLIMIT 100\nOFFSET 0\n'
params = None, with_column_types = False, external_tables = None
query_id = '5579_None_heRgkjtg', types_check = False, columnar = False

    def process_ordinary_query(
            self, query, params=None, with_column_types=False,
            external_tables=None, query_id=None,
            types_check=False, columnar=False):
    
        if params is not None:
            query = self.substitute_params(
                query, params, self.connection.context
            )
    
        self.connection.send_query(query, query_id=query_id)
        self.connection.send_external_tables(external_tables,
                                             types_check=types_check)
>       return self.receive_result(with_column_types=with_column_types,
                                   columnar=columnar)

env/lib/python3.10/site-packages/clickhouse_driver/client.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b490>
with_column_types = False, progress = False, columnar = False

    def receive_result(self, with_column_types=False, progress=False,
                       columnar=False):
    
        gen = self.packet_generator()
    
        if progress:
            return self.progress_query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
    
        else:
            result = self.query_result_cls(
                gen, with_column_types=with_column_types, columnar=columnar
            )
>           return result.get_result()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.result.QueryResult object at 0x7fcc34a35c60>

    def get_result(self):
        """
        :return: stored query result.
        """
    
>       for packet in self.packet_generator:

env/lib/python3.10/site-packages/clickhouse_driver/result.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b490>

    def packet_generator(self):
        while True:
            try:
>               packet = self.receive_packet()

env/lib/python3.10/site-packages/clickhouse_driver/client.py:167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <clickhouse_driver.client.Client object at 0x7fcc63e7b490>

    def receive_packet(self):
        packet = self.connection.receive_packet()
    
        if packet.type == ServerPacketTypes.EXCEPTION:
>           raise packet.exception
E           clickhouse_driver.errors.ServerException: Code: 47.
E           DB::Exception: Missing columns: '$group_0' while processing query: 'SELECT `$group_0` AS actor_id, count() AS actor_value, groupUniqArray(100)((timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events FROM (SELECT e.timestamp AS timestamp, replaceRegexpAll(JSONExtractRaw(e.properties, '$window_id'), '^"|"$', '') AS `$window_id`, replaceRegexpAll(JSONExtractRaw(e.properties, '$session_id'), '^"|"$', '') AS `$session_id`, e.uuid AS uuid FROM events AS e WHERE (team_id = 5579) AND (event = 'pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2021-01-21 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2021-01-21 23:59:59', 'UTC')) AND (`$group_0` != '')) GROUP BY actor_id ORDER BY actor_value DESC, actor_id DESC LIMIT 0, 100', required columns: '$group_0' '$session_id' 'timestamp' 'uuid' '$window_id' '$group_0' '$session_id' 'timestamp' 'uuid' '$window_id'. Stack trace:
E           
E           0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E           1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E           2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E           3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E           4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E           5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E           6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E           7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E           8. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E           9. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E           10. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E           11. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E           12. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E           13. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E           14. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E           15. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E           16. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E           17. ? @ 0x00007f134ac45609 in ?
E           18. __clone @ 0x00007f134ab6a133 in ?

env/lib/python3.10/site-packages/clickhouse_driver/client.py:184: ServerException

During handling of the above exception, another exception occurred:

self = <test_person.TestPerson testMethod=test_group_query_includes_recording_events>

    @snapshot_clickhouse_queries
    @freeze_time("2021-01-21T20:00:00.000Z")
    def test_group_query_includes_recording_events(self):
        GroupTypeMapping.objects.create(team=self.team, group_type="organization", group_type_index=0)
        create_group(team_id=self.team.pk, group_type_index=0, group_key="bla", properties={})
        create_session_recording_events(self.team.pk, timezone.now(), "u1", "s1")
    
        _create_event(
            event="pageview", distinct_id="u1", team=self.team, timestamp=timezone.now(), properties={"$group_0": "bla"}
        )
        _create_event(
            event="pageview",
            distinct_id="u1",
            team=self.team,
            timestamp=timezone.now() + relativedelta(hours=2),
            properties={"$session_id": "s1", "$window_id": "w1", "$group_0": "bla"},
            event_uuid="b06e5a5e-e001-4293-af81-ac73e194569d",
        )
    
        event = {
            "id": "pageview",
            "name": "pageview",
            "type": "events",
            "order": 0,
            "math": "unique_group",
            "math_group_type_index": 0,
        }
    
        filter = Filter(
            data={
                "date_from": "2021-01-21T00:00:00Z",
                "date_to": "2021-01-21T23:59:59Z",
                "events": [event],
                "include_recordings": "true",
            }
        )
        entity = Entity(event)
    
>       _, serialized_actors, _ = TrendsActors(self.team, entity, filter).get_actors()

posthog/queries/trends/test/test_person.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
posthog/queries/actor_base_query.py:102: in get_actors
    raw_result = insight_sync_execute(
posthog/queries/insight.py:15: in insight_sync_execute
    return sync_execute(query, args=args, team_id=team_id, **kwargs)
posthog/utils.py:1263: in inner
    return inner._impl(*args, **kwargs)  # type: ignore
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

query = '\nSELECT\n    $group_0 AS actor_id,\n    count() AS actor_value\n    , groupUniqArray(100)((timestamp, uuid, $session...RDER BY actor_value DESC, actor_id DESC /* Also sorting by ID for determinism */\nLIMIT %(limit)s\nOFFSET %(offset)s\n'
args = {'date_from': '2021-01-21 00:00:00', 'date_to': '2021-01-21 23:59:59', 'event_0': 'pageview', 'limit': 100, ...}
settings = {'distributed_replica_max_ignored_errors': 1000, 'join_algorithm': 'direct,parallel_hash', 'log_comment': '{"team_id":...ad.DEFAULT","query_settings":{"join_algorithm":"direct,parallel_hash","distributed_replica_max_ignored_errors":1000}}'}
with_column_types = False, flush = True

    @patchable
    def sync_execute(
        query,
        args=None,
        settings=None,
        with_column_types=False,
        flush=True,
        *,
        workload: Workload = Workload.DEFAULT,
        team_id: Optional[int] = None,
        readonly=False,
    ):
        if TEST and flush:
            try:
                from posthog.test.base import flush_persons_and_events
    
                flush_persons_and_events()
            except ModuleNotFoundError:  # when we run plugin server tests it tries to run above, ignore
                pass
    
        with get_pool(workload, team_id, readonly).get_client() as client:
            start_time = perf_counter()
    
            prepared_sql, prepared_args, tags = _prepare_query(client=client, query=query, args=args, workload=workload)
            query_id = validated_client_query_id()
            core_settings = {**default_settings(), **(settings or {})}
            tags["query_settings"] = core_settings
            settings = {**core_settings, "log_comment": json.dumps(tags, separators=(",", ":"))}
            try:
                result = client.execute(
                    prepared_sql,
                    params=prepared_args,
                    settings=settings,
                    with_column_types=with_column_types,
                    query_id=query_id,
                )
            except Exception as err:
                err = wrap_query_error(err)
                statsd.incr("clickhouse_sync_execution_failure", tags={"failed": True, "reason": type(err).__name__})
    
>               raise err
E               posthog.errors.CHQueryErrorUnknownIdentifier: Code: 47.
E               DB::Exception: Missing columns: '$group_0' while processing query: 'SELECT `$group_0` AS actor_id, count() AS actor_value, groupUniqArray(100)((timestamp, uuid, `$session_id`, `$window_id`)) AS matching_events FROM (SELECT e.timestamp AS timestamp, replaceRegexpAll(JSONExtractRaw(e.properties, '$window_id'), '^"|"$', '') AS `$window_id`, replaceRegexpAll(JSONExtractRaw(e.properties, '$session_id'), '^"|"$', '') AS `$session_id`, e.uuid AS uuid FROM events AS e WHERE (team_id = 5579) AND (event = 'pageview') AND (toTimeZone(timestamp, 'UTC') >= toDateTime('2021-01-21 00:00:00', 'UTC')) AND (toTimeZone(timestamp, 'UTC') <= toDateTime('2021-01-21 23:59:59', 'UTC')) AND (`$group_0` != '')) GROUP BY actor_id ORDER BY actor_value DESC, actor_id DESC LIMIT 0, 100', required columns: '$group_0' '$session_id' 'timestamp' 'uuid' '$window_id' '$group_0' '$session_id' 'timestamp' 'uuid' '$window_id'. Stack trace:
E               
E               0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e1fc3f5 in /usr/bin/clickhouse
E               1. ? @ 0x0000000008877911 in /usr/bin/clickhouse
E               2. DB::TreeRewriterResult::collectUsedColumns(std::shared_ptr<DB::IAST> const&, bool, bool) @ 0x0000000013d79e19 in /usr/bin/clickhouse
E               3. DB::TreeRewriter::analyzeSelect(std::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::vector<DB::TableWithColumnNamesAndTypes, std::allocator<DB::TableWithColumnNamesAndTypes>> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::TableJoin>, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>) const @ 0x0000000013d7ed7d in /usr/bin/clickhouse
E               4. ? @ 0x0000000013a47d72 in /usr/bin/clickhouse
E               5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013a4375d in /usr/bin/clickhouse
E               6. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae9b66 in /usr/bin/clickhouse
E               7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013ae7773 in /usr/bin/clickhouse
E               8. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x00000000139fd2be in /usr/bin/clickhouse
E               9. ? @ 0x0000000013e186d6 in /usr/bin/clickhouse
E               10. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e14f2e in /usr/bin/clickhouse
E               11. DB::TCPHandler::runImpl() @ 0x0000000014c3f9e4 in /usr/bin/clickhouse
E               12. DB::TCPHandler::run() @ 0x0000000014c55c79 in /usr/bin/clickhouse
E               13. Poco::Net::TCPServerConnection::start() @ 0x0000000017bc9ad4 in /usr/bin/clickhouse
E               14. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bcacf1 in /usr/bin/clickhouse
E               15. Poco::PooledThread::run() @ 0x0000000017d4d147 in /usr/bin/clickhouse
E               16. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d4ab7c in /usr/bin/clickhouse
E               17. ? @ 0x00007f134ac45609 in ?
E               18. __clone @ 0x00007f134ab6a133 in ?

posthog/clickhouse/client/execute.py:113: CHQueryErrorUnknownIdentifier
___________________________ test_prepare_dictionary ____________________________

query_inputs = QueryInputs(partition_ids=[], team_ids=[], person_overrides_to_delete=[], dictionary_name='fancy_dictionary', dry_run=False, _latest_created_at=None)
activity_environment = <temporalio.testing._activity.ActivityEnvironment object at 0x7fcc16a2dc30>
person_overrides_data = {1: {PersonOverrideTuple(old_person_id=UUID('03911ad2-c352-4c10-92a1-26489eadadb3'), override_person_id=UUID('29a549af...son_id=UUID('9610d6ad-a698-4c44-aa1e-ee791d2ddce2'), override_person_id=UUID('5a1c3690-259c-4aa8-bac4-bb174990d3df'))}}

    @pytest.mark.django_db
    @pytest.mark.asyncio
    async def test_prepare_dictionary(query_inputs, activity_environment, person_overrides_data):
        """Test a DICTIONARY is created by the prepare_dictionary activity."""
        query_inputs.dictionary_name = "fancy_dictionary"
        query_inputs.dry_run = False
    
        latest_merge_at = await activity_environment.run(prepare_dictionary, query_inputs)
    
>       assert latest_merge_at == OVERRIDES_CREATED_AT.isoformat()
E       AssertionError: assert equals failed
E          -'2023-07-11T16:21:50+00:00'       +'2020-01-02T00:00:00.123123+00: 
E                                           +00'

posthog/temporal/tests/test_squash_person_overrides_workflow.py:136: AssertionError
____________________ test_squash_person_overrides_workflow _____________________

args = ()
kwargs = {'events_to_override': [{'event': 'test-event', 'person_id': UUID('eda08992-198a-497c-8115-0503fd257e74'), 'team_id': ...5742fcab1f0'), override_person_id=UUID('e4b75989-3ec8-4fb2-bf0b-bca1d56c60c8'))}}, 'person_overrides_table': None, ...}
coro = <coroutine object test_squash_person_overrides_workflow at 0x7fcc16bcf530>
task = <Task pending name='Task-1836' coro=<test_squash_person_overrides_workflow() running at /workspaces/posthog/posthog/te...kflow.py:1205> wait_for=<Future pending cb=[<builtins.PyDoneCallback object at 0x7fcc54734090>(), Task.task_wakeup()]>>

    @functools.wraps(func)
    def inner(*args, **kwargs):
        coro = func(*args, **kwargs)
        if not inspect.isawaitable(coro):
            pyfuncitem.warn(
                pytest.PytestWarning(
                    f"The test {pyfuncitem} is marked with '@pytest.mark.asyncio' "
                    "but it is not an async function. "
                    "Please remove asyncio marker. "
                    "If the test is not marked explicitly, "
                    "check for global markers applied via 'pytestmark'."
                )
            )
            return
        task = asyncio.ensure_future(coro, loop=_loop)
        try:
>           _loop.run_until_complete(task)

env/lib/python3.10/site-packages/pytest_asyncio/plugin.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/asyncio/base_events.py:636: in run_until_complete
    self.run_forever()
/usr/local/lib/python3.10/asyncio/base_events.py:603: in run_forever
    self._run_once()
/usr/local/lib/python3.10/asyncio/base_events.py:1871: in _run_once
    event_list = self._selector.select(timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selectors.EpollSelector object at 0x7fcc16aa4940>, timeout = -1

    def select(self, timeout=None):
        if timeout is None:
            timeout = -1
        elif timeout <= 0:
            timeout = 0
        else:
            # epoll_wait() has a resolution of 1 millisecond, round away
            # from zero to wait *at least* timeout seconds.
            timeout = math.ceil(timeout * 1e3) * 1e-3
    
        # epoll_wait() expects `maxevents` to be greater than zero;
        # we want to make sure that `select()` can be called when no
        # FD is registered.
        max_ev = max(len(self._fd_to_key), 1)
    
        ready = []
        try:
>           fd_event_list = self._selector.poll(timeout, max_ev)
E           Failed: Timeout >20.0s

/usr/local/lib/python3.10/selectors.py:469: Failed
----------------------------- Captured stderr call -----------------------------

+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++

~~~~~~~~~~~~~~~~~~ Stack of Thread-50 (run) (140515056006912) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-49 (run) (140515064399616) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-48 (run) (140515072792320) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-47 (run) (140515081185024) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-46 (run) (140515576092416) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-45 (run) (140515089577728) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-44 (run) (140515584485120) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-43 (run) (140515592877824) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-42 (run) (140515601270528) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-41 (run) (140515618055936) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-40 (run) (140515626448640) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-39 (run) (140515609663232) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-37 (run) (140515716548352) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-36 (run) (140515724941056) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-35 (run) (140515742775040) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-34 (run) (140515734382336) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-30 (run) (140515767953152) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-29 (run) (140515784738560) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-27 (run) (140515801523968) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~~~~ Stack of Thread-25 (140516473685760) ~~~~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/posthoganalytics/consumer.py", line 62, in run
    self.upload()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/posthoganalytics/consumer.py", line 73, in upload
    batch = self.next()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/posthoganalytics/consumer.py", line 104, in next
    item = queue.get(block=True, timeout=self.flush_interval - elapsed)
  File "/usr/local/lib/python3.10/queue.py", line 180, in get
    self.not_empty.wait(remaining)
  File "/usr/local/lib/python3.10/threading.py", line 324, in wait
    gotit = waiter.acquire(True, timeout)

+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++
__________ test_squash_person_overrides_workflow_with_newer_overrides __________

args = ()
kwargs = {'events_to_override': [{'event': 'test-event', 'person_id': UUID('07f67b6e-7f6d-4827-a606-22fc63181d9e'), 'team_id': ...=UUID('8e84720f-cbf0-48f7-ba9e-df8f2d59ef1e'), override_person_id=UUID('0330a7c7-cf07-4134-a70e-57e664b51ebb'))}}, ...}
coro = <coroutine object test_squash_person_overrides_workflow_with_newer_overrides at 0x7fcc176eaf10>
task = <Task pending name='Task-1877' coro=<test_squash_person_overrides_workflow_with_newer_overrides() running at /workspac...kflow.py:1251> wait_for=<Future pending cb=[<builtins.PyDoneCallback object at 0x7fcc17645930>(), Task.task_wakeup()]>>

    @functools.wraps(func)
    def inner(*args, **kwargs):
        coro = func(*args, **kwargs)
        if not inspect.isawaitable(coro):
            pyfuncitem.warn(
                pytest.PytestWarning(
                    f"The test {pyfuncitem} is marked with '@pytest.mark.asyncio' "
                    "but it is not an async function. "
                    "Please remove asyncio marker. "
                    "If the test is not marked explicitly, "
                    "check for global markers applied via 'pytestmark'."
                )
            )
            return
        task = asyncio.ensure_future(coro, loop=_loop)
        try:
>           _loop.run_until_complete(task)

env/lib/python3.10/site-packages/pytest_asyncio/plugin.py:478: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/asyncio/base_events.py:636: in run_until_complete
    self.run_forever()
/usr/local/lib/python3.10/asyncio/base_events.py:603: in run_forever
    self._run_once()
/usr/local/lib/python3.10/asyncio/base_events.py:1871: in _run_once
    event_list = self._selector.select(timeout)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selectors.EpollSelector object at 0x7fcc16aecf70>, timeout = -1

    def select(self, timeout=None):
        if timeout is None:
            timeout = -1
        elif timeout <= 0:
            timeout = 0
        else:
            # epoll_wait() has a resolution of 1 millisecond, round away
            # from zero to wait *at least* timeout seconds.
            timeout = math.ceil(timeout * 1e3) * 1e-3
    
        # epoll_wait() expects `maxevents` to be greater than zero;
        # we want to make sure that `select()` can be called when no
        # FD is registered.
        max_ev = max(len(self._fd_to_key), 1)
    
        ready = []
        try:
>           fd_event_list = self._selector.poll(timeout, max_ev)
E           Failed: Timeout >20.0s

/usr/local/lib/python3.10/selectors.py:469: Failed
----------------------------- Captured stderr call -----------------------------

+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++

~~~~~~~~~~~~~~~~~~ Stack of Thread-48 (run) (140515072792320) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-47 (run) (140515081185024) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-46 (run) (140515576092416) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-45 (run) (140515089577728) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-43 (run) (140515592877824) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-42 (run) (140515601270528) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-41 (run) (140515618055936) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-37 (run) (140515716548352) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-36 (run) (140515724941056) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-30 (run) (140515767953152) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~ Stack of Thread-29 (run) (140515784738560) ~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/local/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/workspaces/posthog/posthog/api/test/batch_exports/conftest.py", line 50, in run
    loop.run_until_complete(super().run())
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 636, in run_until_complete
    self.run_forever()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 603, in run_forever
    self._run_once()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 1871, in _run_once
    event_list = self._selector.select(timeout)
  File "/usr/local/lib/python3.10/selectors.py", line 469, in select
    fd_event_list = self._selector.poll(timeout, max_ev)

~~~~~~~~~~~~~~~~~~~~~ Stack of Thread-25 (140516473685760) ~~~~~~~~~~~~~~~~~~~~~
  File "/usr/local/lib/python3.10/threading.py", line 973, in _bootstrap
    self._bootstrap_inner()
  File "/usr/local/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/posthoganalytics/consumer.py", line 62, in run
    self.upload()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/posthoganalytics/consumer.py", line 73, in upload
    batch = self.next()
  File "/workspaces/posthog/env/lib/python3.10/site-packages/posthoganalytics/consumer.py", line 104, in next
    item = queue.get(block=True, timeout=self.flush_interval - elapsed)
  File "/usr/local/lib/python3.10/queue.py", line 180, in get
    self.not_empty.wait(remaining)
  File "/usr/local/lib/python3.10/threading.py", line 324, in wait
    gotit = waiter.acquire(True, timeout)

+++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++
_________ test_squash_person_overrides_workflow_with_limited_team_ids __________
temporalio.exceptions.ApplicationError: KeyError: 'Unknown payload encoding binary/encrypted'

The above exception was the direct cause of the following exception:
temporalio.exceptions.ApplicationError: KeyError: 'Unknown payload encoding binary/encrypted'

The above exception was the direct cause of the following exception:

temporalio.exceptions.ApplicationError: Failed decoding arguments

The above exception was the direct cause of the following exception:
temporalio.exceptions.ApplicationError: KeyError: 'Unknown payload encoding binary/encrypted'

The above exception was the direct cause of the following exception:

temporalio.exceptions.ApplicationError: Failed decoding arguments

The above exception was the direct cause of the following exception:

temporalio.exceptions.ActivityError: Activity task failed

The above exception was the direct cause of the following exception:

query_inputs = QueryInputs(partition_ids=[], team_ids=[], person_overrides_to_delete=[], dictionary_name='person_overrides_join_dict', dry_run=True, _latest_created_at=None)
events_to_override = [{'event': 'test-event', 'person_id': UUID('a815cd42-0b0e-4f95-9555-3313b2e271a2'), 'team_id': 1, 'timestamp': datetim...'), 'team_id': 2, 'timestamp': datetime.datetime(2020, 1, 1, 0, 0, 0, 123123, tzinfo=datetime.timezone.utc), ...}, ...]
person_overrides_data = {1: {PersonOverrideTuple(old_person_id=UUID('061031bf-cc64-43d6-b939-665ffafabc16'), override_person_id=UUID('7fe3e64c...son_id=UUID('d57b69c7-e93e-4fac-a8df-1c7f30bb28d4'), override_person_id=UUID('ed9790e4-5169-44b9-b046-77cdae19c2e3'))}}
person_overrides = PersonOverrideTuple(old_person_id=UUID('a41e6050-57bb-4eff-8e7f-86efe909e191'), override_person_id=UUID('7e6ededd-fe3f-459c-95e0-3b58792aca9c'))

    @pytest.mark.timeout(20)
    @pytest.mark.django_db
    @pytest.mark.asyncio
    async def test_squash_person_overrides_workflow_with_limited_team_ids(
        query_inputs, events_to_override, person_overrides_data, person_overrides
    ):
        """Test the squash_person_overrides workflow end-to-end."""
        client = await Client.connect(
            f"{settings.TEMPORAL_HOST}:{settings.TEMPORAL_PORT}",
            namespace=settings.TEMPORAL_NAMESPACE,
        )
    
        workflow_id = str(uuid4())
        random_team = random.choice(list(person_overrides_data.keys()))
        inputs = SquashPersonOverridesInputs(
            partition_ids=["202001"],
            team_ids=[random_team],
            dry_run=False,
        )
    
        async with Worker(
            client,
            task_queue=settings.TEMPORAL_TASK_QUEUE,
            workflows=[SquashPersonOverridesWorkflow],
            activities=[
                prepare_person_overrides,
                prepare_dictionary,
                select_persons_to_delete,
                squash_events_partition,
                drop_dictionary,
                delete_squashed_person_overrides_from_clickhouse,
                delete_squashed_person_overrides_from_postgres,
            ],
            workflow_runner=UnsandboxedWorkflowRunner(),
>       ):

posthog/temporal/tests/test_squash_person_overrides_workflow.py:1295: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/temporalio/client.py:565: in execute_workflow
    return await (
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <temporalio.client.WorkflowHandle object at 0x7fcc16b7c850>

    async def result(
        self,
        *,
        follow_runs: bool = True,
        rpc_metadata: Mapping[str, str] = {},
        rpc_timeout: Optional[timedelta] = None,
    ) -> ReturnType:
        """Wait for result of the workflow.
    
        This will use :py:attr:`result_run_id` if present to base the result on.
        To use another run ID, a new handle must be created via
        :py:meth:`Client.get_workflow_handle`.
    
        Args:
            follow_runs: If true (default), workflow runs will be continually
                fetched, until the most recent one is found. If false, the first
                result is used.
            rpc_metadata: Headers used on the RPC call. Keys here override
                client-level RPC metadata keys.
            rpc_timeout: Optional RPC deadline to set for each RPC call. Note,
                this is the timeout for each history RPC call not this overall
                function.
    
        Returns:
            Result of the workflow after being converted by the data converter.
    
        Raises:
            WorkflowFailureError: Workflow failed, was cancelled, was
                terminated, or timed out. Use the
                :py:attr:`WorkflowFailureError.cause` to see the underlying
                reason.
            Exception: Other possible failures during result fetching.
        """
        # We have to maintain our own run ID because it can change if we follow
        # executions
        hist_run_id = self._result_run_id
        while True:
            async for event in self._fetch_history_events_for_run(
                hist_run_id,
                wait_new_event=True,
                event_filter_type=WorkflowHistoryEventFilterType.CLOSE_EVENT,
                skip_archival=True,
                rpc_metadata=rpc_metadata,
                rpc_timeout=rpc_timeout,
            ):
                if event.HasField("workflow_execution_completed_event_attributes"):
                    complete_attr = event.workflow_execution_completed_event_attributes
                    # Follow execution
                    if follow_runs and complete_attr.new_execution_run_id:
                        hist_run_id = complete_attr.new_execution_run_id
                        break
                    # Ignoring anything after the first response like TypeScript
                    type_hints = [self._result_type] if self._result_type else None
                    results = await self._client.data_converter.decode_wrapper(
                        complete_attr.result,
                        type_hints,
                    )
                    if not results:
                        return cast(ReturnType, None)
                    elif len(results) > 1:
                        warnings.warn(f"Expected single result, got {len(results)}")
                    return cast(ReturnType, results[0])
                elif event.HasField("workflow_execution_failed_event_attributes"):
                    fail_attr = event.workflow_execution_failed_event_attributes
                    # Follow execution
                    if follow_runs and fail_attr.new_execution_run_id:
                        hist_run_id = fail_attr.new_execution_run_id
                        break
>                   raise WorkflowFailureError(
                        cause=await self._client.data_converter.decode_failure(
                            fail_attr.failure
                        ),
E                       temporalio.client.WorkflowFailureError: Workflow execution failed

env/lib/python3.10/site-packages/temporalio/client.py:1012: WorkflowFailureError
---------------------------- Captured stderr setup -----------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 798, in call_soon_threadsafe
    self._check_closed()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 515, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
----------------------------- Captured stdout call -----------------------------
[2m2023-07-11T16:27:00.935542Z[0m [33m WARN[0m [1mtemporal_sdk_core::worker::workflow[0m[2m:[0m Failing workflow task [3mrun_id[0m[2m=[0m1cdbd905-2bd1-47c4-85da-6d0c4a338961 [3mfailure[0m[2m=[0mFailure { failure: Some(Failure { message: "Failed decoding arguments", source: "", stack_trace: "  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 284, in activate\n    self._apply(job)\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 346, in _apply\n    self._apply_resolve_activity(job.resolve_activity)\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 455, in _apply_resolve_activity\n    ret_vals = self._convert_payloads(\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 1138, in _convert_payloads\n    raise RuntimeError(\"Failed decoding arguments\") from err\n", encoded_attributes: None, cause: Some(Failure { message: "'Unknown payload encoding binary/encrypted'", source: "", stack_trace: "  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 1133, in _convert_payloads\n    return self._payload_converter.from_payloads(\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/converter.py\", line 241, in from_payloads\n    raise KeyError(f\"Unknown payload encoding {encoding.decode()}\")\n", encoded_attributes: None, cause: None, failure_info: Some(ApplicationFailureInfo(ApplicationFailureInfo { r#type: "KeyError", non_retryable: false, details: None })) }), failure_info: Some(ApplicationFailureInfo(ApplicationFailureInfo { r#type: "RuntimeError", non_retryable: false, details: None })) }) }
[2m2023-07-11T16:27:22.182977Z[0m [33m WARN[0m [1mtemporal_sdk_core::worker::workflow[0m[2m:[0m Failing workflow task [3mrun_id[0m[2m=[0m1cdbd905-2bd1-47c4-85da-6d0c4a338961 [3mfailure[0m[2m=[0mFailure { failure: Some(Failure { message: "Failed decoding arguments", source: "", stack_trace: "  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 284, in activate\n    self._apply(job)\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 346, in _apply\n    self._apply_resolve_activity(job.resolve_activity)\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 455, in _apply_resolve_activity\n    ret_vals = self._convert_payloads(\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 1138, in _convert_payloads\n    raise RuntimeError(\"Failed decoding arguments\") from err\n", encoded_attributes: None, cause: Some(Failure { message: "'Unknown payload encoding binary/encrypted'", source: "", stack_trace: "  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/worker/_workflow_instance.py\", line 1133, in _convert_payloads\n    return self._payload_converter.from_payloads(\n\n  File \"/workspaces/posthog/env/lib/python3.10/site-packages/temporalio/converter.py\", line 241, in from_payloads\n    raise KeyError(f\"Unknown payload encoding {encoding.decode()}\")\n", encoded_attributes: None, cause: None, failure_info: Some(ApplicationFailureInfo(ApplicationFailureInfo { r#type: "KeyError", non_retryable: false, details: None })) }), failure_info: Some(ApplicationFailureInfo(ApplicationFailureInfo { r#type: "RuntimeError", non_retryable: false, details: None })) }) }
----------------------------- Captured stderr call -----------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 798, in call_soon_threadsafe
    self._check_closed()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 515, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Traceback (most recent call last):
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 798, in call_soon_threadsafe
    self._check_closed()
  File "/usr/local/lib/python3.10/asyncio/base_events.py", line 515, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
_ TestAutoProjectMiddleware.test_project_switched_when_accessing_dashboard_of_another_accessible_team _

self = <posthog.test.test_middleware.TestAutoProjectMiddleware testMethod=test_project_switched_when_accessing_dashboard_of_another_accessible_team>

    @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=False)
    def test_project_switched_when_accessing_dashboard_of_another_accessible_team(self):
        dashboard = Dashboard.objects.create(team=self.second_team)
>       with self.assertNumQueries(self.base_app_num_queries + 4):  # AutoProjectMiddleware adds 4 queries

posthog/test/test_middleware.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:84: in __exit__
    self.test_case.assertEqual(
E   AssertionError: 41 != 45 : 41 queries executed, 45 expected
E   Captured queries were:
E   1. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:45.875796+00:00'::timestamptz AND "django_session"."session_key" = '00w2hnesseywpgmbz57ghlzhppaqm7b8') LIMIT 21 /**/
E   2. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /**/
E   3. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5657 LIMIT 21 /**/
E   4. SELECT (1) AS "a" FROM "posthog_dashboard" WHERE (NOT ("posthog_dashboard"."deleted") AND NOT "posthog_dashboard"."deleted" AND "posthog_dashboard"."id" = 1055 AND "posthog_dashboard"."team_id" = 5657) LIMIT 1 /**/
E   5. SELECT "posthog_dashboard"."id", "posthog_dashboard"."team_id", "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_dashboard" INNER JOIN "posthog_team" ON ("posthog_dashboard"."team_id" = "posthog_team"."id") WHERE (NOT ("posthog_dashboard"."deleted") AND NOT "posthog_dashboard"."deleted" AND "posthog_dashboard"."id" = 1055) ORDER BY "posthog_dashboard"."id" ASC LIMIT 1 /**/
E   6. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 5072 /**/
E   7. UPDATE "posthog_user" SET "password" = 'pbkdf2_sha256$260000$8WuD759yo12qW2QZD2MURb$w8lotlHJu+UWYIlebbFmC/sSQ6w7Od13RGSl7TLfhV8=', "last_login" = '2023-07-11T16:31:45.869572+00:00'::timestamptz, "first_name" = '', "last_name" = '', "is_staff" = false, "is_active" = true, "date_joined" = '2023-07-11T16:31:45.438915+00:00'::timestamptz, "uuid" = '018945cb-671e-0000-7ea4-93b4ddd13d9a'::uuid, "current_organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid, "current_team_id" = 5658, "email" = 'user1@posthog.com', "pending_email" = NULL, "temporary_token" = NULL, "distinct_id" = 'f3LQEDeuBOhtolkAaMGrFeXwn8md5F8kFPPWecd1i5s', "is_email_verified" = NULL, "has_seen_product_intro_for" = NULL, "email_opt_in" = false, "partial_notification_settings" = NULL, "anonymize_data" = false, "toolbar_mode" = 'toolbar', "events_column_config" = '{"active": "DEFAULT"}' WHERE "posthog_user"."id" = 5072 /**/
E   8. SELECT (1) AS "a" FROM "posthog_user" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   9. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:45.885550+00:00'::timestamptz AND "django_session"."session_key" = '00w2hnesseywpgmbz57ghlzhppaqm7b8') LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   10. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" IN ('constance:posthog:SLACK_APP_CLIENT_ID', 'constance:posthog:SLACK_APP_CLIENT_SECRET', 'constance:posthog:SLACK_APP_SIGNING_SECRET') /*controller='posthog.urls.home',route='%5E.%2A'*/
E   11. SELECT COUNT(*) AS "__count" FROM "posthog_user" /*controller='posthog.urls.home',route='%5E.%2A'*/
E   12. SELECT (1) AS "a" FROM "posthog_organization" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   13. SELECT (1) AS "a" FROM "posthog_organization" WHERE NOT "posthog_organization"."for_internal_metrics" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   14. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   15. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_HOST' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   16. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$pageview' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   17. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$screen' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   18. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   19. SELECT COUNT(*) FROM (SELECT DISTINCT "posthog_organizationmembership"."user_id" AS Col1 FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."organization_id" IN (SELECT U0."id" FROM "posthog_organization" U0 INNER JOIN "posthog_organizationmembership" U1 ON (U0."id" = U1."organization_id") WHERE U1."user_id" = 5072)) subquery /*controller='posthog.urls.home',route='%5E.%2A'*/
E   20. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5658 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   21. SELECT COUNT(*) AS "__count" FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   22. SELECT (1) AS "a" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organization"."available_features" @> ARRAY['project_based_permissioning']::varchar(64)[] AND "posthog_organizationmembership"."user_id" = 5072) LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   23. SELECT COUNT(*) AS "__count" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   24. SELECT (1) AS "a" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organizationmembership"."user_id" = 5072 AND "posthog_team"."completed_snippet_onboarding" AND "posthog_team"."ingested_event") LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   25. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   26. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   27. SELECT "social_auth_usersocialauth"."provider" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   28. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   29. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   30. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days" FROM "posthog_team" WHERE "posthog_team"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid /*controller='posthog.urls.home',route='%5E.%2A'*/
E   31. SELECT "posthog_team"."id", "posthog_team"."organization_id", "posthog_team"."access_control" FROM "posthog_team" WHERE "posthog_team"."organization_id" IN ('018945cb-6719-0000-a841-14697af9d3b6'::uuid) /*controller='posthog.urls.home',route='%5E.%2A'*/
E   32. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   33. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at" FROM "posthog_organizationmembership" WHERE ("posthog_organizationmembership"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid AND "posthog_organizationmembership"."user_id" = 5072) ORDER BY "posthog_organizationmembership"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   34. SELECT "otp_static_staticdevice"."id", "otp_static_staticdevice"."user_id", "otp_static_staticdevice"."name", "otp_static_staticdevice"."confirmed", "otp_static_staticdevice"."throttling_failure_timestamp", "otp_static_staticdevice"."throttling_failure_count" FROM "otp_static_staticdevice" WHERE ("otp_static_staticdevice"."user_id" = 5072 AND "otp_static_staticdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   35. SELECT "otp_totp_totpdevice"."id", "otp_totp_totpdevice"."user_id", "otp_totp_totpdevice"."name", "otp_totp_totpdevice"."confirmed", "otp_totp_totpdevice"."throttling_failure_timestamp", "otp_totp_totpdevice"."throttling_failure_count", "otp_totp_totpdevice"."key", "otp_totp_totpdevice"."step", "otp_totp_totpdevice"."t0", "otp_totp_totpdevice"."digits", "otp_totp_totpdevice"."tolerance", "otp_totp_totpdevice"."drift", "otp_totp_totpdevice"."last_t" FROM "otp_totp_totpdevice" WHERE ("otp_totp_totpdevice"."user_id" = 5072 AND "otp_totp_totpdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   36. SELECT "two_factor_phonedevice"."id", "two_factor_phonedevice"."user_id", "two_factor_phonedevice"."name", "two_factor_phonedevice"."confirmed", "two_factor_phonedevice"."throttling_failure_timestamp", "two_factor_phonedevice"."throttling_failure_count", "two_factor_phonedevice"."number", "two_factor_phonedevice"."key", "two_factor_phonedevice"."method" FROM "two_factor_phonedevice" WHERE ("two_factor_phonedevice"."user_id" = 5072 AND "two_factor_phonedevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   37. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   38. SELECT (1) AS "a" FROM "posthog_grouptypemapping" WHERE "posthog_grouptypemapping"."team_id" = 5657 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   39. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   40. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:GROUPS_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   41. SELECT "posthog_pluginconfig"."id", "posthog_pluginconfig"."config", "posthog_plugin"."config_schema", "posthog_plugin"."id", "posthog_plugin"."plugin_type", "posthog_plugin"."name" FROM "posthog_plugin" INNER JOIN "posthog_pluginconfig" ON ("posthog_plugin"."id" = "posthog_pluginconfig"."plugin_id") INNER JOIN "posthog_pluginsourcefile" ON ("posthog_plugin"."id" = "posthog_pluginsourcefile"."plugin_id") WHERE ("posthog_pluginconfig"."enabled" AND "posthog_pluginconfig"."team_id" = 5657 AND "posthog_pluginsourcefile"."filename" = 'frontend.tsx' AND "posthog_pluginsourcefile"."status" = 'TRANSPILED') /*controller='posthog.urls.home',route='%5E.%2A'*/
_ TestAutoProjectMiddleware.test_project_switched_when_accessing_feature_flag_of_another_accessible_team _

self = <posthog.test.test_middleware.TestAutoProjectMiddleware testMethod=test_project_switched_when_accessing_feature_flag_of_another_accessible_team>

    @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=False)
    def test_project_switched_when_accessing_feature_flag_of_another_accessible_team(self):
        feature_flag = FeatureFlag.objects.create(team=self.second_team, created_by=self.user)
    
>       with self.assertNumQueries(self.base_app_num_queries + 4):

posthog/test/test_middleware.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:84: in __exit__
    self.test_case.assertEqual(
E   AssertionError: 41 != 45 : 41 queries executed, 45 expected
E   Captured queries were:
E   1. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:46.113414+00:00'::timestamptz AND "django_session"."session_key" = 'jpxtfh2zvzsp5yaf7v5ifrmvtt1layk5') LIMIT 21 /**/
E   2. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /**/
E   3. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5657 LIMIT 21 /**/
E   4. SELECT (1) AS "a" FROM "posthog_featureflag" WHERE (NOT "posthog_featureflag"."deleted" AND "posthog_featureflag"."id" = 931 AND "posthog_featureflag"."team_id" = 5657) LIMIT 1 /**/
E   5. SELECT "posthog_featureflag"."id", "posthog_featureflag"."team_id", "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_featureflag" INNER JOIN "posthog_team" ON ("posthog_featureflag"."team_id" = "posthog_team"."id") WHERE (NOT "posthog_featureflag"."deleted" AND "posthog_featureflag"."id" = 931) ORDER BY "posthog_featureflag"."id" ASC LIMIT 1 /**/
E   6. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 5072 /**/
E   7. UPDATE "posthog_user" SET "password" = 'pbkdf2_sha256$260000$8WuD759yo12qW2QZD2MURb$w8lotlHJu+UWYIlebbFmC/sSQ6w7Od13RGSl7TLfhV8=', "last_login" = '2023-07-11T16:31:46.106516+00:00'::timestamptz, "first_name" = '', "last_name" = '', "is_staff" = false, "is_active" = true, "date_joined" = '2023-07-11T16:31:45.438915+00:00'::timestamptz, "uuid" = '018945cb-671e-0000-7ea4-93b4ddd13d9a'::uuid, "current_organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid, "current_team_id" = 5658, "email" = 'user1@posthog.com', "pending_email" = NULL, "temporary_token" = NULL, "distinct_id" = 'f3LQEDeuBOhtolkAaMGrFeXwn8md5F8kFPPWecd1i5s', "is_email_verified" = NULL, "has_seen_product_intro_for" = NULL, "email_opt_in" = false, "partial_notification_settings" = NULL, "anonymize_data" = false, "toolbar_mode" = 'toolbar', "events_column_config" = '{"active": "DEFAULT"}' WHERE "posthog_user"."id" = 5072 /**/
E   8. SELECT (1) AS "a" FROM "posthog_user" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   9. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:46.123021+00:00'::timestamptz AND "django_session"."session_key" = 'jpxtfh2zvzsp5yaf7v5ifrmvtt1layk5') LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   10. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" IN ('constance:posthog:SLACK_APP_CLIENT_ID', 'constance:posthog:SLACK_APP_CLIENT_SECRET', 'constance:posthog:SLACK_APP_SIGNING_SECRET') /*controller='posthog.urls.home',route='%5E.%2A'*/
E   11. SELECT COUNT(*) AS "__count" FROM "posthog_user" /*controller='posthog.urls.home',route='%5E.%2A'*/
E   12. SELECT (1) AS "a" FROM "posthog_organization" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   13. SELECT (1) AS "a" FROM "posthog_organization" WHERE NOT "posthog_organization"."for_internal_metrics" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   14. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   15. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_HOST' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   16. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$pageview' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   17. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$screen' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   18. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   19. SELECT COUNT(*) FROM (SELECT DISTINCT "posthog_organizationmembership"."user_id" AS Col1 FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."organization_id" IN (SELECT U0."id" FROM "posthog_organization" U0 INNER JOIN "posthog_organizationmembership" U1 ON (U0."id" = U1."organization_id") WHERE U1."user_id" = 5072)) subquery /*controller='posthog.urls.home',route='%5E.%2A'*/
E   20. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5658 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   21. SELECT COUNT(*) AS "__count" FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   22. SELECT (1) AS "a" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organization"."available_features" @> ARRAY['project_based_permissioning']::varchar(64)[] AND "posthog_organizationmembership"."user_id" = 5072) LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   23. SELECT COUNT(*) AS "__count" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   24. SELECT (1) AS "a" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organizationmembership"."user_id" = 5072 AND "posthog_team"."completed_snippet_onboarding" AND "posthog_team"."ingested_event") LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   25. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   26. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   27. SELECT "social_auth_usersocialauth"."provider" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   28. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   29. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   30. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days" FROM "posthog_team" WHERE "posthog_team"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid /*controller='posthog.urls.home',route='%5E.%2A'*/
E   31. SELECT "posthog_team"."id", "posthog_team"."organization_id", "posthog_team"."access_control" FROM "posthog_team" WHERE "posthog_team"."organization_id" IN ('018945cb-6719-0000-a841-14697af9d3b6'::uuid) /*controller='posthog.urls.home',route='%5E.%2A'*/
E   32. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   33. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at" FROM "posthog_organizationmembership" WHERE ("posthog_organizationmembership"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid AND "posthog_organizationmembership"."user_id" = 5072) ORDER BY "posthog_organizationmembership"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   34. SELECT "otp_static_staticdevice"."id", "otp_static_staticdevice"."user_id", "otp_static_staticdevice"."name", "otp_static_staticdevice"."confirmed", "otp_static_staticdevice"."throttling_failure_timestamp", "otp_static_staticdevice"."throttling_failure_count" FROM "otp_static_staticdevice" WHERE ("otp_static_staticdevice"."user_id" = 5072 AND "otp_static_staticdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   35. SELECT "otp_totp_totpdevice"."id", "otp_totp_totpdevice"."user_id", "otp_totp_totpdevice"."name", "otp_totp_totpdevice"."confirmed", "otp_totp_totpdevice"."throttling_failure_timestamp", "otp_totp_totpdevice"."throttling_failure_count", "otp_totp_totpdevice"."key", "otp_totp_totpdevice"."step", "otp_totp_totpdevice"."t0", "otp_totp_totpdevice"."digits", "otp_totp_totpdevice"."tolerance", "otp_totp_totpdevice"."drift", "otp_totp_totpdevice"."last_t" FROM "otp_totp_totpdevice" WHERE ("otp_totp_totpdevice"."user_id" = 5072 AND "otp_totp_totpdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   36. SELECT "two_factor_phonedevice"."id", "two_factor_phonedevice"."user_id", "two_factor_phonedevice"."name", "two_factor_phonedevice"."confirmed", "two_factor_phonedevice"."throttling_failure_timestamp", "two_factor_phonedevice"."throttling_failure_count", "two_factor_phonedevice"."number", "two_factor_phonedevice"."key", "two_factor_phonedevice"."method" FROM "two_factor_phonedevice" WHERE ("two_factor_phonedevice"."user_id" = 5072 AND "two_factor_phonedevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   37. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   38. SELECT (1) AS "a" FROM "posthog_grouptypemapping" WHERE "posthog_grouptypemapping"."team_id" = 5657 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   39. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   40. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:GROUPS_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   41. SELECT "posthog_pluginconfig"."id", "posthog_pluginconfig"."config", "posthog_plugin"."config_schema", "posthog_plugin"."id", "posthog_plugin"."plugin_type", "posthog_plugin"."name" FROM "posthog_plugin" INNER JOIN "posthog_pluginconfig" ON ("posthog_plugin"."id" = "posthog_pluginconfig"."plugin_id") INNER JOIN "posthog_pluginsourcefile" ON ("posthog_plugin"."id" = "posthog_pluginsourcefile"."plugin_id") WHERE ("posthog_pluginconfig"."enabled" AND "posthog_pluginconfig"."team_id" = 5657 AND "posthog_pluginsourcefile"."filename" = 'frontend.tsx' AND "posthog_pluginsourcefile"."status" = 'TRANSPILED') /*controller='posthog.urls.home',route='%5E.%2A'*/
_ TestAutoProjectMiddleware.test_project_unchanged_when_accessing_dashboards_list _

self = <posthog.test.test_middleware.TestAutoProjectMiddleware testMethod=test_project_unchanged_when_accessing_dashboards_list>

    @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=False)
    def test_project_unchanged_when_accessing_dashboards_list(self):
>       with self.assertNumQueries(self.base_app_num_queries):  # No AutoProjectMiddleware queries

posthog/test/test_middleware.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:84: in __exit__
    self.test_case.assertEqual(
E   AssertionError: 37 != 41 : 37 queries executed, 41 expected
E   Captured queries were:
E   1. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:46.619238+00:00'::timestamptz AND "django_session"."session_key" = '1o8evwk6g6ebt8tguf2sux8lhsfvjleh') LIMIT 21 /**/
E   2. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /**/
E   3. SELECT (1) AS "a" FROM "posthog_user" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   4. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:46.622167+00:00'::timestamptz AND "django_session"."session_key" = '1o8evwk6g6ebt8tguf2sux8lhsfvjleh') LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   5. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5657 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   6. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" IN ('constance:posthog:SLACK_APP_CLIENT_ID', 'constance:posthog:SLACK_APP_CLIENT_SECRET', 'constance:posthog:SLACK_APP_SIGNING_SECRET') /*controller='posthog.urls.home',route='%5E.%2A'*/
E   7. SELECT COUNT(*) AS "__count" FROM "posthog_user" /*controller='posthog.urls.home',route='%5E.%2A'*/
E   8. SELECT (1) AS "a" FROM "posthog_organization" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   9. SELECT (1) AS "a" FROM "posthog_organization" WHERE NOT "posthog_organization"."for_internal_metrics" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   10. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   11. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_HOST' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   12. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$pageview' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   13. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$screen' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   14. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   15. SELECT COUNT(*) FROM (SELECT DISTINCT "posthog_organizationmembership"."user_id" AS Col1 FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."organization_id" IN (SELECT U0."id" FROM "posthog_organization" U0 INNER JOIN "posthog_organizationmembership" U1 ON (U0."id" = U1."organization_id") WHERE U1."user_id" = 5072)) subquery /*controller='posthog.urls.home',route='%5E.%2A'*/
E   16. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5657 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   17. SELECT COUNT(*) AS "__count" FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   18. SELECT (1) AS "a" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organization"."available_features" @> ARRAY['project_based_permissioning']::varchar(64)[] AND "posthog_organizationmembership"."user_id" = 5072) LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   19. SELECT COUNT(*) AS "__count" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   20. SELECT (1) AS "a" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organizationmembership"."user_id" = 5072 AND "posthog_team"."completed_snippet_onboarding" AND "posthog_team"."ingested_event") LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   21. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   22. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   23. SELECT "social_auth_usersocialauth"."provider" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   24. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   25. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   26. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days" FROM "posthog_team" WHERE "posthog_team"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid /*controller='posthog.urls.home',route='%5E.%2A'*/
E   27. SELECT "posthog_team"."id", "posthog_team"."organization_id", "posthog_team"."access_control" FROM "posthog_team" WHERE "posthog_team"."organization_id" IN ('018945cb-6719-0000-a841-14697af9d3b6'::uuid) /*controller='posthog.urls.home',route='%5E.%2A'*/
E   28. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   29. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at" FROM "posthog_organizationmembership" WHERE ("posthog_organizationmembership"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid AND "posthog_organizationmembership"."user_id" = 5072) ORDER BY "posthog_organizationmembership"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   30. SELECT "otp_static_staticdevice"."id", "otp_static_staticdevice"."user_id", "otp_static_staticdevice"."name", "otp_static_staticdevice"."confirmed", "otp_static_staticdevice"."throttling_failure_timestamp", "otp_static_staticdevice"."throttling_failure_count" FROM "otp_static_staticdevice" WHERE ("otp_static_staticdevice"."user_id" = 5072 AND "otp_static_staticdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   31. SELECT "otp_totp_totpdevice"."id", "otp_totp_totpdevice"."user_id", "otp_totp_totpdevice"."name", "otp_totp_totpdevice"."confirmed", "otp_totp_totpdevice"."throttling_failure_timestamp", "otp_totp_totpdevice"."throttling_failure_count", "otp_totp_totpdevice"."key", "otp_totp_totpdevice"."step", "otp_totp_totpdevice"."t0", "otp_totp_totpdevice"."digits", "otp_totp_totpdevice"."tolerance", "otp_totp_totpdevice"."drift", "otp_totp_totpdevice"."last_t" FROM "otp_totp_totpdevice" WHERE ("otp_totp_totpdevice"."user_id" = 5072 AND "otp_totp_totpdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   32. SELECT "two_factor_phonedevice"."id", "two_factor_phonedevice"."user_id", "two_factor_phonedevice"."name", "two_factor_phonedevice"."confirmed", "two_factor_phonedevice"."throttling_failure_timestamp", "two_factor_phonedevice"."throttling_failure_count", "two_factor_phonedevice"."number", "two_factor_phonedevice"."key", "two_factor_phonedevice"."method" FROM "two_factor_phonedevice" WHERE ("two_factor_phonedevice"."user_id" = 5072 AND "two_factor_phonedevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   33. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   34. SELECT (1) AS "a" FROM "posthog_grouptypemapping" WHERE "posthog_grouptypemapping"."team_id" = 5657 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   35. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   36. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:GROUPS_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   37. SELECT "posthog_pluginconfig"."id", "posthog_pluginconfig"."config", "posthog_plugin"."config_schema", "posthog_plugin"."id", "posthog_plugin"."plugin_type", "posthog_plugin"."name" FROM "posthog_plugin" INNER JOIN "posthog_pluginconfig" ON ("posthog_plugin"."id" = "posthog_pluginconfig"."plugin_id") INNER JOIN "posthog_pluginsourcefile" ON ("posthog_plugin"."id" = "posthog_pluginsourcefile"."plugin_id") WHERE ("posthog_pluginconfig"."enabled" AND "posthog_pluginconfig"."team_id" = 5657 AND "posthog_pluginsourcefile"."filename" = 'frontend.tsx' AND "posthog_pluginsourcefile"."status" = 'TRANSPILED') /*controller='posthog.urls.home',route='%5E.%2A'*/
_ TestAutoProjectMiddleware.test_project_unchanged_when_creating_feature_flag __

self = <posthog.test.test_middleware.TestAutoProjectMiddleware testMethod=test_project_unchanged_when_creating_feature_flag>

    @override_settings(PERSON_ON_EVENTS_V2_OVERRIDE=False)
    def test_project_unchanged_when_creating_feature_flag(self):
>       with self.assertNumQueries(self.base_app_num_queries):

posthog/test/test_middleware.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:84: in __exit__
    self.test_case.assertEqual(
E   AssertionError: 37 != 41 : 37 queries executed, 41 expected
E   Captured queries were:
E   1. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:46.711433+00:00'::timestamptz AND "django_session"."session_key" = 'i3azi0gvvta8mgx7rpj8myo9z4w1qo30') LIMIT 21 /**/
E   2. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /**/
E   3. SELECT (1) AS "a" FROM "posthog_user" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   4. SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."expire_date" > '2023-07-11T16:31:46.714644+00:00'::timestamptz AND "django_session"."session_key" = 'i3azi0gvvta8mgx7rpj8myo9z4w1qo30') LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   5. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5657 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   6. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" IN ('constance:posthog:SLACK_APP_CLIENT_ID', 'constance:posthog:SLACK_APP_CLIENT_SECRET', 'constance:posthog:SLACK_APP_SIGNING_SECRET') /*controller='posthog.urls.home',route='%5E.%2A'*/
E   7. SELECT COUNT(*) AS "__count" FROM "posthog_user" /*controller='posthog.urls.home',route='%5E.%2A'*/
E   8. SELECT (1) AS "a" FROM "posthog_organization" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   9. SELECT (1) AS "a" FROM "posthog_organization" WHERE NOT "posthog_organization"."for_internal_metrics" LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   10. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   11. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:EMAIL_HOST' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   12. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$pageview' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   13. SELECT (1) AS "a" FROM "posthog_eventdefinition" WHERE "posthog_eventdefinition"."name" = '$screen' LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   14. SELECT "posthog_user"."id", "posthog_user"."password", "posthog_user"."last_login", "posthog_user"."first_name", "posthog_user"."last_name", "posthog_user"."is_staff", "posthog_user"."is_active", "posthog_user"."date_joined", "posthog_user"."uuid", "posthog_user"."current_organization_id", "posthog_user"."current_team_id", "posthog_user"."email", "posthog_user"."pending_email", "posthog_user"."temporary_token", "posthog_user"."distinct_id", "posthog_user"."is_email_verified", "posthog_user"."has_seen_product_intro_for", "posthog_user"."email_opt_in", "posthog_user"."partial_notification_settings", "posthog_user"."anonymize_data", "posthog_user"."toolbar_mode", "posthog_user"."events_column_config" FROM "posthog_user" WHERE "posthog_user"."id" = 5072 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   15. SELECT COUNT(*) FROM (SELECT DISTINCT "posthog_organizationmembership"."user_id" AS Col1 FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."organization_id" IN (SELECT U0."id" FROM "posthog_organization" U0 INNER JOIN "posthog_organizationmembership" U1 ON (U0."id" = U1."organization_id") WHERE U1."user_id" = 5072)) subquery /*controller='posthog.urls.home',route='%5E.%2A'*/
E   16. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days", "posthog_team"."plugins_opt_in", "posthog_team"."opt_out_capture", "posthog_team"."event_names", "posthog_team"."event_names_with_usage", "posthog_team"."event_properties", "posthog_team"."event_properties_with_usage", "posthog_team"."event_properties_numerical" FROM "posthog_team" WHERE "posthog_team"."id" = 5657 LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   17. SELECT COUNT(*) AS "__count" FROM "posthog_organizationmembership" WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   18. SELECT (1) AS "a" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organization"."available_features" @> ARRAY['project_based_permissioning']::varchar(64)[] AND "posthog_organizationmembership"."user_id" = 5072) LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   19. SELECT COUNT(*) AS "__count" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   20. SELECT (1) AS "a" FROM "posthog_team" INNER JOIN "posthog_organization" ON ("posthog_team"."organization_id" = "posthog_organization"."id") INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE ("posthog_organizationmembership"."user_id" = 5072 AND "posthog_team"."completed_snippet_onboarding" AND "posthog_team"."ingested_event") LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   21. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   22. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   23. SELECT "social_auth_usersocialauth"."provider" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   24. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" WHERE "posthog_organization"."id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid LIMIT 21 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   25. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at", "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organizationmembership" INNER JOIN "posthog_organization" ON ("posthog_organizationmembership"."organization_id" = "posthog_organization"."id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   26. SELECT "posthog_team"."id", "posthog_team"."uuid", "posthog_team"."organization_id", "posthog_team"."api_token", "posthog_team"."app_urls", "posthog_team"."name", "posthog_team"."slack_incoming_webhook", "posthog_team"."created_at", "posthog_team"."updated_at", "posthog_team"."anonymize_ips", "posthog_team"."completed_snippet_onboarding", "posthog_team"."ingested_event", "posthog_team"."autocapture_opt_out", "posthog_team"."autocapture_exceptions_opt_in", "posthog_team"."autocapture_exceptions_errors_to_ignore", "posthog_team"."session_recording_opt_in", "posthog_team"."capture_console_log_opt_in", "posthog_team"."capture_performance_opt_in", "posthog_team"."session_recording_version", "posthog_team"."signup_token", "posthog_team"."is_demo", "posthog_team"."access_control", "posthog_team"."inject_web_apps", "posthog_team"."test_account_filters", "posthog_team"."test_account_filters_default_checked", "posthog_team"."path_cleaning_filters", "posthog_team"."timezone", "posthog_team"."data_attributes", "posthog_team"."person_display_name_properties", "posthog_team"."live_events_columns", "posthog_team"."recording_domains", "posthog_team"."primary_dashboard_id", "posthog_team"."extra_settings", "posthog_team"."correlation_config", "posthog_team"."session_recording_retention_period_days" FROM "posthog_team" WHERE "posthog_team"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid /*controller='posthog.urls.home',route='%5E.%2A'*/
E   27. SELECT "posthog_team"."id", "posthog_team"."organization_id", "posthog_team"."access_control" FROM "posthog_team" WHERE "posthog_team"."organization_id" IN ('018945cb-6719-0000-a841-14697af9d3b6'::uuid) /*controller='posthog.urls.home',route='%5E.%2A'*/
E   28. SELECT "posthog_organization"."id", "posthog_organization"."name", "posthog_organization"."slug", "posthog_organization"."created_at", "posthog_organization"."updated_at", "posthog_organization"."plugins_access_level", "posthog_organization"."for_internal_metrics", "posthog_organization"."is_member_join_email_enabled", "posthog_organization"."enforce_2fa", "posthog_organization"."customer_id", "posthog_organization"."available_features", "posthog_organization"."available_product_features", "posthog_organization"."usage", "posthog_organization"."setup_section_2_completed", "posthog_organization"."personalization", "posthog_organization"."domain_whitelist" FROM "posthog_organization" INNER JOIN "posthog_organizationmembership" ON ("posthog_organization"."id" = "posthog_organizationmembership"."organization_id") WHERE "posthog_organizationmembership"."user_id" = 5072 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   29. SELECT "posthog_organizationmembership"."id", "posthog_organizationmembership"."organization_id", "posthog_organizationmembership"."user_id", "posthog_organizationmembership"."level", "posthog_organizationmembership"."joined_at", "posthog_organizationmembership"."updated_at" FROM "posthog_organizationmembership" WHERE ("posthog_organizationmembership"."organization_id" = '018945cb-6719-0000-a841-14697af9d3b6'::uuid AND "posthog_organizationmembership"."user_id" = 5072) ORDER BY "posthog_organizationmembership"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   30. SELECT "otp_static_staticdevice"."id", "otp_static_staticdevice"."user_id", "otp_static_staticdevice"."name", "otp_static_staticdevice"."confirmed", "otp_static_staticdevice"."throttling_failure_timestamp", "otp_static_staticdevice"."throttling_failure_count" FROM "otp_static_staticdevice" WHERE ("otp_static_staticdevice"."user_id" = 5072 AND "otp_static_staticdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   31. SELECT "otp_totp_totpdevice"."id", "otp_totp_totpdevice"."user_id", "otp_totp_totpdevice"."name", "otp_totp_totpdevice"."confirmed", "otp_totp_totpdevice"."throttling_failure_timestamp", "otp_totp_totpdevice"."throttling_failure_count", "otp_totp_totpdevice"."key", "otp_totp_totpdevice"."step", "otp_totp_totpdevice"."t0", "otp_totp_totpdevice"."digits", "otp_totp_totpdevice"."tolerance", "otp_totp_totpdevice"."drift", "otp_totp_totpdevice"."last_t" FROM "otp_totp_totpdevice" WHERE ("otp_totp_totpdevice"."user_id" = 5072 AND "otp_totp_totpdevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   32. SELECT "two_factor_phonedevice"."id", "two_factor_phonedevice"."user_id", "two_factor_phonedevice"."name", "two_factor_phonedevice"."confirmed", "two_factor_phonedevice"."throttling_failure_timestamp", "two_factor_phonedevice"."throttling_failure_count", "two_factor_phonedevice"."number", "two_factor_phonedevice"."key", "two_factor_phonedevice"."method" FROM "two_factor_phonedevice" WHERE ("two_factor_phonedevice"."user_id" = 5072 AND "two_factor_phonedevice"."confirmed") /*controller='posthog.urls.home',route='%5E.%2A'*/
E   33. SELECT (1) AS "a" FROM "social_auth_usersocialauth" WHERE "social_auth_usersocialauth"."user_id" = 5072 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   34. SELECT (1) AS "a" FROM "posthog_grouptypemapping" WHERE "posthog_grouptypemapping"."team_id" = 5657 LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   35. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:PERSON_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   36. SELECT "posthog_instancesetting"."id", "posthog_instancesetting"."key", "posthog_instancesetting"."raw_value" FROM "posthog_instancesetting" WHERE "posthog_instancesetting"."key" = 'constance:posthog:GROUPS_ON_EVENTS_ENABLED' ORDER BY "posthog_instancesetting"."id" ASC LIMIT 1 /*controller='posthog.urls.home',route='%5E.%2A'*/
E   37. SELECT "posthog_pluginconfig"."id", "posthog_pluginconfig"."config", "posthog_plugin"."config_schema", "posthog_plugin"."id", "posthog_plugin"."plugin_type", "posthog_plugin"."name" FROM "posthog_plugin" INNER JOIN "posthog_pluginconfig" ON ("posthog_plugin"."id" = "posthog_pluginconfig"."plugin_id") INNER JOIN "posthog_pluginsourcefile" ON ("posthog_plugin"."id" = "posthog_pluginsourcefile"."plugin_id") WHERE ("posthog_pluginconfig"."enabled" AND "posthog_pluginconfig"."team_id" = 5657 AND "posthog_pluginsourcefile"."filename" = 'frontend.tsx' AND "posthog_pluginsourcefile"."status" = 'TRANSPILED') /*controller='posthog.urls.home',route='%5E.%2A'*/
____________ TestPostHogTokenCookieMiddleware.test_logged_in_client ____________

self = <posthog.test.test_middleware.TestPostHogTokenCookieMiddleware testMethod=test_logged_in_client>

    def test_logged_in_client(self):
        self.client.force_login(self.user)
        response = self.client.get("/")
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    
>       ph_project_token_cookie = response.cookies["ph_current_project_token"]
E       KeyError: 'ph_current_project_token'

posthog/test/test_middleware.py:265: KeyError
_________________ TestPostHogTokenCookieMiddleware.test_logout _________________

self = <posthog.test.test_middleware.TestPostHogTokenCookieMiddleware testMethod=test_logout>

    def test_logout(self):
        self.client.force_login(self.user)
        response = self.client.get("/")
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    
>       self.assertEqual(response.cookies["ph_current_project_token"].key, "ph_current_project_token")
E       KeyError: 'ph_current_project_token'

posthog/test/test_middleware.py:350: KeyError
_ TestTeam.test_team_on_cloud_uses_feature_flag_to_determine_person_on_events __

self = <posthog.test.test_team.TestTeam testMethod=test_team_on_cloud_uses_feature_flag_to_determine_person_on_events>
mock_feature_enabled = <MagicMock name='feature_enabled' id='140514532763984'>

    @mock.patch("posthoganalytics.feature_enabled", return_value=True)
    def test_team_on_cloud_uses_feature_flag_to_determine_person_on_events(self, mock_feature_enabled):
        with self.is_cloud(True):
            with override_instance_config("PERSON_ON_EVENTS_ENABLED", False):
                team = Team.objects.create_with_data(organization=self.organization)
>               self.assertEqual(team.person_on_events_mode, PersonOnEventsMode.V2_ENABLED)
E               AssertionError: <PersonOnEventsMode.DISABLED: 'disabled'> != <PersonOnEventsMode.V2_ENABLED: 'v2_enabled'>

posthog/test/test_team.py:124: AssertionError
_____________________ TestReset.test_can_reset_export_run ______________________

self = <test_reset.TestReset testMethod=test_can_reset_export_run>

    def test_can_reset_export_run(self):
        """Test calling the reset endpoint to reset a BatchExportRun a couple of times."""
        temporal = sync_connect()
    
        destination_data = {
            "type": "S3",
            "config": {
                "bucket_name": "my-production-s3-bucket",
                "region": "us-east-1",
                "prefix": "posthog-events/",
                "batch_window_size": 3600,
                "aws_access_key_id": "abc123",
                "aws_secret_access_key": "secret",
            },
        }
    
        batch_export_data = {
            "name": "my-production-s3-bucket-destination",
            "destination": destination_data,
            "interval": "hour",
            "trigger_immediately": True,
        }
    
        organization = create_organization("Test Org")
        team = create_team(organization)
        user = create_user("reset.test@user.com", "Reset test user", organization)
        self.client.force_login(user)
    
        with start_test_worker(temporal):
            batch_export = create_batch_export_ok(
                self.client,
                team.pk,
                batch_export_data,
            )
    
>           batch_export_runs = wait_for_runs(self.client, team.pk, batch_export["id"])

posthog/api/test/batch_exports/test_reset.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

client = <django.test.client.Client object at 0x7fcc5477c310>, team_id = 5690
batch_export_id = '018945cc-9838-0000-26c0-d47e32cb7457', timeout = 10
number_of_runs = 1

    def wait_for_runs(client, team_id, batch_export_id, timeout=10, number_of_runs=1):
        """Wait for BatchExportRuns to be created.
    
        As these rows are created by Temporal, and the worker is running in a separate thread, we allow it
        to take a few seconds.
    
        Raises:
            TimeoutError: If there are less than number_of_runs BatchExportRuns after around timeout seconds.
    
        Returns:
            The BatchExportRuns response.
        """
        start = dt.datetime.utcnow()
        batch_export_runs = get_batch_export_runs_ok(client, team_id, batch_export_id)
    
        while batch_export_runs["count"] < number_of_runs:
            batch_export_runs = get_batch_export_runs_ok(client, team_id, batch_export_id)
            time.sleep(1)
            if (dt.datetime.utcnow() - start).seconds > timeout:
>               raise TimeoutError("BatchExportRuns never created")
E               TimeoutError: BatchExportRuns never created

posthog/api/test/batch_exports/test_reset.py:39: TimeoutError
_ CreatingSessionRecordingModelMigrationTestCase.test_migrate_to_create_session_recordings _

self = <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>
sql = 'TRUNCATE "posthog_dashboard", "posthog_pluginsourcefile", "posthog_sessionrecordingviewed", "posthog_featureflag", "p..., "axes_accesslog", "posthog_instancesetting", "posthog_text", "posthog_featureflagoverride", "posthog_dashboarditem";'
params = None
ignored_wrapper_args = (False, {'connection': <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7fcd02681150>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
>               return self.cursor.execute(sql)
E               psycopg2.errors.FeatureNotSupported: cannot truncate a table referenced in a foreign key constraint
E               DETAIL:  Table "ee_dashboardprivilege" references "posthog_dashboard".
E               HINT:  Truncate table "ee_dashboardprivilege" at the same time, or use TRUNCATE ... CASCADE.

env/lib/python3.10/site-packages/django/db/backends/utils.py:82: FeatureNotSupported

The above exception was the direct cause of the following exception:

self = <django.core.management.commands.flush.Command object at 0x7fcc63e49540>
options = {'allow_cascade': False, 'database': 'default', 'force_color': False, 'inhibit_post_migrate': False, ...}
database = 'default'
connection = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7fcd02681150>
verbosity = 0, interactive = False, reset_sequences = False
allow_cascade = False, inhibit_post_migrate = False

        def handle(self, **options):
            database = options['database']
            connection = connections[database]
            verbosity = options['verbosity']
            interactive = options['interactive']
            # The following are stealth options used by Django's internals.
            reset_sequences = options.get('reset_sequences', True)
            allow_cascade = options.get('allow_cascade', False)
            inhibit_post_migrate = options.get('inhibit_post_migrate', False)
    
            self.style = no_style()
    
            # Import the 'management' module within each installed app, to register
            # dispatcher events.
            for app_config in apps.get_app_configs():
                try:
                    import_module('.management', app_config.name)
                except ImportError:
                    pass
    
            sql_list = sql_flush(self.style, connection,
                                 reset_sequences=reset_sequences,
                                 allow_cascade=allow_cascade)
    
            if interactive:
                confirm = input("""You have requested a flush of the database.
    This will IRREVERSIBLY DESTROY all data currently in the "%s" database,
    and return each table to an empty state.
    Are you sure you want to do this?
    
        Type 'yes' to continue, or 'no' to cancel: """ % connection.settings_dict['NAME'])
            else:
                confirm = 'yes'
    
            if confirm == 'yes':
                try:
>                   connection.ops.execute_sql_flush(sql_list)

env/lib/python3.10/site-packages/django/core/management/commands/flush.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.postgresql.operations.DatabaseOperations object at 0x7fcd0253a320>
sql_list = ['TRUNCATE "posthog_dashboard", "posthog_pluginsourcefile", "posthog_sessionrecordingviewed", "posthog_featureflag", "... "axes_accesslog", "posthog_instancesetting", "posthog_text", "posthog_featureflagoverride", "posthog_dashboarditem";']

    def execute_sql_flush(self, sql_list):
        """Execute a list of SQL statements to flush the database."""
        with transaction.atomic(
            using=self.connection.alias,
            savepoint=self.connection.features.can_rollback_ddl,
        ):
            with self.connection.cursor() as cursor:
                for sql in sql_list:
>                   cursor.execute(sql)

env/lib/python3.10/site-packages/django/db/backends/base/operations.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>
sql = 'TRUNCATE "posthog_dashboard", "posthog_pluginsourcefile", "posthog_sessionrecordingviewed", "posthog_featureflag", "p..., "axes_accesslog", "posthog_instancesetting", "posthog_text", "posthog_featureflagoverride", "posthog_dashboarditem";'
params = None

    def execute(self, sql, params=None):
>       return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)

env/lib/python3.10/site-packages/django/db/backends/utils.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>
sql = 'TRUNCATE "posthog_dashboard", "posthog_pluginsourcefile", "posthog_sessionrecordingviewed", "posthog_featureflag", "p..., "axes_accesslog", "posthog_instancesetting", "posthog_text", "posthog_featureflagoverride", "posthog_dashboarditem";'
params = None, many = False
executor = <bound method CursorWrapper._execute of <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>>

    def _execute_with_wrappers(self, sql, params, many, executor):
        context = {'connection': self.db, 'cursor': self}
        for wrapper in reversed(self.db.execute_wrappers):
            executor = functools.partial(wrapper, executor)
>       return executor(sql, params, many, context)

env/lib/python3.10/site-packages/django/db/backends/utils.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>
sql = 'TRUNCATE "posthog_dashboard", "posthog_pluginsourcefile", "posthog_sessionrecordingviewed", "posthog_featureflag", "p..., "axes_accesslog", "posthog_instancesetting", "posthog_text", "posthog_featureflagoverride", "posthog_dashboarditem";'
params = None
ignored_wrapper_args = (False, {'connection': <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7fcd02681150>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
>       with self.db.wrap_database_errors:

env/lib/python3.10/site-packages/django/db/backends/utils.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.utils.DatabaseErrorWrapper object at 0x7fccd5d36020>
exc_type = <class 'psycopg2.errors.FeatureNotSupported'>
exc_value = FeatureNotSupported('cannot truncate a table referenced in a foreign key constraint\nDETAIL:  Table "ee_dashboardprivi... "posthog_dashboard".\nHINT:  Truncate table "ee_dashboardprivilege" at the same time, or use TRUNCATE ... CASCADE.\n')
traceback = <traceback object at 0x7fcc5f91d680>

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            return
        for dj_exc_type in (
                DataError,
                OperationalError,
                IntegrityError,
                InternalError,
                ProgrammingError,
                NotSupportedError,
                DatabaseError,
                InterfaceError,
                Error,
        ):
            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)
            if issubclass(exc_type, db_exc_type):
                dj_exc_value = dj_exc_type(*exc_value.args)
                # Only set the 'errors_occurred' flag for errors that may make
                # the connection unusable.
                if dj_exc_type not in (DataError, IntegrityError):
                    self.wrapper.errors_occurred = True
>               raise dj_exc_value.with_traceback(traceback) from exc_value

env/lib/python3.10/site-packages/django/db/utils.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>
sql = 'TRUNCATE "posthog_dashboard", "posthog_pluginsourcefile", "posthog_sessionrecordingviewed", "posthog_featureflag", "p..., "axes_accesslog", "posthog_instancesetting", "posthog_text", "posthog_featureflagoverride", "posthog_dashboarditem";'
params = None
ignored_wrapper_args = (False, {'connection': <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7fcd02681150>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7fcc5de5c550>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
>               return self.cursor.execute(sql)
E               django.db.utils.NotSupportedError: cannot truncate a table referenced in a foreign key constraint
E               DETAIL:  Table "ee_dashboardprivilege" references "posthog_dashboard".
E               HINT:  Truncate table "ee_dashboardprivilege" at the same time, or use TRUNCATE ... CASCADE.

env/lib/python3.10/site-packages/django/db/backends/utils.py:82: NotSupportedError

The above exception was the direct cause of the following exception:

self = <posthog.test.test_migration_0287.CreatingSessionRecordingModelMigrationTestCase testMethod=test_migrate_to_create_session_recordings>
result = <TestCaseFunction test_migrate_to_create_session_recordings>
debug = False

    def _setup_and_call(self, result, debug=False):
        """
        Perform the following in order: pre-setup, run test, post-teardown,
        skipping pre/post hooks if test is set to be skipped.
    
        If debug=True, reraise any errors in setup and use super().debug()
        instead of __call__() to run the test.
        """
        testMethod = getattr(self, self._testMethodName)
        skipped = (
            getattr(self.__class__, "__unittest_skip__", False) or
            getattr(testMethod, "__unittest_skip__", False)
        )
    
        # Convert async test methods.
        if asyncio.iscoroutinefunction(testMethod):
            setattr(self, self._testMethodName, async_to_sync(testMethod))
    
        if not skipped:
            try:
                self._pre_setup()
            except Exception:
                if debug:
                    raise
                result.addError(self, sys.exc_info())
                return
        if debug:
            super().debug()
        else:
            super().__call__(result)
        if not skipped:
            try:
>               self._post_teardown()

env/lib/python3.10/site-packages/django/test/testcases.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/django/test/testcases.py:1006: in _post_teardown
    self._fixture_teardown()
env/lib/python3.10/site-packages/django/test/testcases.py:1038: in _fixture_teardown
    call_command('flush', verbosity=0, interactive=False,
env/lib/python3.10/site-packages/django/core/management/__init__.py:181: in call_command
    return command.execute(*args, **defaults)
env/lib/python3.10/site-packages/django/core/management/base.py:398: in execute
    output = self.handle(*args, **options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.core.management.commands.flush.Command object at 0x7fcc63e49540>
options = {'allow_cascade': False, 'database': 'default', 'force_color': False, 'inhibit_post_migrate': False, ...}
database = 'default'
connection = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7fcd02681150>
verbosity = 0, interactive = False, reset_sequences = False
allow_cascade = False, inhibit_post_migrate = False

        def handle(self, **options):
            database = options['database']
            connection = connections[database]
            verbosity = options['verbosity']
            interactive = options['interactive']
            # The following are stealth options used by Django's internals.
            reset_sequences = options.get('reset_sequences', True)
            allow_cascade = options.get('allow_cascade', False)
            inhibit_post_migrate = options.get('inhibit_post_migrate', False)
    
            self.style = no_style()
    
            # Import the 'management' module within each installed app, to register
            # dispatcher events.
            for app_config in apps.get_app_configs():
                try:
                    import_module('.management', app_config.name)
                except ImportError:
                    pass
    
            sql_list = sql_flush(self.style, connection,
                                 reset_sequences=reset_sequences,
                                 allow_cascade=allow_cascade)
    
            if interactive:
                confirm = input("""You have requested a flush of the database.
    This will IRREVERSIBLY DESTROY all data currently in the "%s" database,
    and return each table to an empty state.
    Are you sure you want to do this?
    
        Type 'yes' to continue, or 'no' to cancel: """ % connection.settings_dict['NAME'])
            else:
                confirm = 'yes'
    
            if confirm == 'yes':
                try:
                    connection.ops.execute_sql_flush(sql_list)
                except Exception as exc:
>                   raise CommandError(
                        "Database %s couldn't be flushed. Possible reasons:\n"
                        "  * The database isn't running or isn't configured correctly.\n"
                        "  * At least one of the expected database tables doesn't exist.\n"
                        "  * The SQL was invalid.\n"
                        "Hint: Look at the output of 'django-admin sqlflush'. "
                        "That's the SQL this command wasn't able to run." % (
                            connection.settings_dict['NAME'],
                        )
                    ) from exc
E                   django.core.management.base.CommandError: Database test_posthog couldn't be flushed. Possible reasons:
E                     * The database isn't running or isn't configured correctly.
E                     * At least one of the expected database tables doesn't exist.
E                     * The SQL was invalid.
E                   Hint: Look at the output of 'django-admin sqlflush'. That's the SQL this command wasn't able to run.

env/lib/python3.10/site-packages/django/core/management/commands/flush.py:65: CommandError
--------------------------- snapshot report summary ----------------------------
4 snapshots failed. 1247 snapshots passed. 220 snapshots unused.

Re-run pytest with --snapshot-update to delete unused snapshots.
=========================== short test summary info ============================
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_cant_make_templates_without_teamid_private
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_delete_dashboard_template_by_id
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_get_dashboard_template_by_id
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_can_get_public_dashboard_templates
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_cannot_edit_dashboard_template
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_user_cannot_create_dashboard
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_non_staff_user_cannot_delete_dashboard_template_by_id
FAILED posthog/api/dashboards/test/test_dashboard_templates.py::TestDashboardTemplates::test_update_dashboard_template_by_id
FAILED posthog/api/test/test_event.py::TestEvents::test_filter_events_by_properties
FAILED posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups
FAILED posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_all_selected
FAILED posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_incorrect_group_type
FAILED posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_multiple_queries
FAILED posthog/api/test/test_feature_flag.py::TestBlastRadius::test_user_blast_radius_with_groups_zero_selected
FAILED posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_breakdown
FAILED posthog/api/test/test_insight.py::TestInsight::test_insight_funnels_hogql_breakdown_single
FAILED posthog/api/test/test_instance_status.py::TestInstanceStatus::test_navigation_on_cloud
FAILED posthog/api/test/test_organization.py::TestOrganizationAPI::test_cant_create_organization_with_custom_plugin_level
FAILED posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_create_domain
FAILED posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_domain_is_not_verified_with_incorrect_challenge
FAILED posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_domain_is_not_verified_with_missing_challenge
FAILED posthog/api/test/test_organization_domain.py::TestOrganizationDomainsAPI::test_domain_is_not_verified_with_missing_domain
FAILED posthog/api/test/test_persons_trends.py::TestPersonTrends::test_trends_people_endpoint_filters_search
FAILED posthog/api/test/test_persons_trends.py::TestPersonTrends::test_trends_people_endpoint_includes_recordings
FAILED posthog/api/test/test_plugin.py::TestPluginAPI::test_create_plugin_version_range_gt_next_major_ignore_on_cloud
FAILED posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_limited_db_queries
FAILED posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_request
FAILED posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_request_unauthenticated
FAILED posthog/api/test/test_preflight.py::TestPreflight::test_cloud_preflight_request_with_social_auth_providers
FAILED posthog/api/test/test_query.py::TestQuery::test_valid_recent_performance_pageviews
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_api_cannot_use_whitelist_for_different_domain
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_cannot_social_signup_with_whitelisted_but_jit_provisioning_disabled
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_cannot_social_signup_with_whitelisted_but_unverified_domain
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_to_existing_org_without_whitelisted_domain_on_cloud
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_with_whitelisted_domain_on_cloud
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_with_whitelisted_domain_on_cloud_reverse
FAILED posthog/api/test/test_signup.py::TestSignupAPI::test_social_signup_with_whitelisted_domain_on_self_hosted
FAILED posthog/api/test/test_signup.py::TestInviteSignupAPI::test_api_invite_sign_up_where_there_are_no_default_non_private_projects
FAILED posthog/hogql/test/test_query.py::TestQuery::test_join_with_property_materialized_session_id
FAILED posthog/models/cohort/test/test_util.py::TestCohortUtils::test_simplified_cohort_filter_properties_non_precalculated_cohort_with_behavioural_filter
FAILED posthog/models/test/test_organization_model.py::TestOrganization::test_plugins_access_level_is_determined_based_on_realm
FAILED posthog/models/test/test_organization_model.py::TestOrganization::test_plugins_are_not_preinstalled_on_cloud
FAILED posthog/models/test/test_organization_model.py::TestOrganization::test_plugins_are_preinstalled_on_self_hosted
FAILED posthog/models/test/test_user_model.py::TestUser::test_analytics_metadata
FAILED posthog/plugins/test/test_utils.py::TestPluginsUtils::test_download_plugin_archive_github
FAILED posthog/plugins/test/test_utils.py::TestPluginsUtils::test_parse_github_urls
FAILED posthog/queries/session_recordings/test/test_session_recording_list_from_session_replay.py::TestClickhouseSessionRecordingsListFromSessionReplay::test_action_filter
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props_person_on_events
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props_with_person_filter
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_by_group_props_with_person_filter_person_on_events
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter_groups
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter_groups_person_on_events
FAILED posthog/queries/test/test_trends.py::TestTrends::test_breakdown_with_filter_groups_person_on_events_v2
FAILED posthog/queries/test/test_trends.py::TestTrends::test_filtering_by_multiple_groups_person_on_events
FAILED posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_group_props
FAILED posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_group_props_event_with_no_group_data
FAILED posthog/queries/test/test_trends.py::TestTrends::test_filtering_with_group_props_person_on_events
FAILED posthog/queries/test/test_trends.py::TestTrends::test_trends_with_hogql_math
FAILED posthog/queries/trends/test/test_formula.py::TestFormula::test_breakdown_hogql
FAILED posthog/queries/trends/test/test_person.py::TestPerson::test_group_query_includes_recording_events
FAILED posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_prepare_dictionary
FAILED posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_person_overrides_workflow
FAILED posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_person_overrides_workflow_with_newer_overrides
FAILED posthog/temporal/tests/test_squash_person_overrides_workflow.py::test_squash_person_overrides_workflow_with_limited_team_ids
FAILED posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_dashboard_of_another_accessible_team
FAILED posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_switched_when_accessing_feature_flag_of_another_accessible_team
FAILED posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_unchanged_when_accessing_dashboards_list
FAILED posthog/test/test_middleware.py::TestAutoProjectMiddleware::test_project_unchanged_when_creating_feature_flag
FAILED posthog/test/test_middleware.py::TestPostHogTokenCookieMiddleware::test_logged_in_client
FAILED posthog/test/test_middleware.py::TestPostHogTokenCookieMiddleware::test_logout
FAILED posthog/test/test_team.py::TestTeam::test_team_on_cloud_uses_feature_flag_to_determine_person_on_events
FAILED posthog/api/test/batch_exports/test_reset.py::TestReset::test_can_reset_export_run
FAILED posthog/test/test_migration_0287.py::CreatingSessionRecordingModelMigrationTestCase::test_migrate_to_create_session_recordings
=========== 74 failed, 2548 passed, 27 skipped in 2130.27s (0:35:30) ===========
